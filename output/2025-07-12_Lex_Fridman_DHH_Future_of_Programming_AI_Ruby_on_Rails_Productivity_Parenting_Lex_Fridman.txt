================================================================================
YOUTUBE VIDEO EXTRACTION
================================================================================
VIDEO_ID: vagyIcmIGOQ
URL: https://www.youtube.com/watch?v=vagyIcmIGOQ
TITLE: DHH: Future of Programming, AI, Ruby on Rails, Productivity & Parenting | Lex Fridman Podcast #474
CHANNEL: Lex Fridman
PUBLISHED: 2025-07-12
DURATION: 6h 8m 48s
VIEWS: 650,066
LIKES: 12,738
COMMENTS: 1,718
TAGS: DHH, alex friedman, lex ai, lex debate, lex freedman, lex fridman, lex friedman, lex interview, lex lecture, lex mit

DESCRIPTION:
----------------------------------------
David Heinemeier Hansson (aka DHH) is a legendary programmer, creator of Ruby on Rails, co-owner & CTO of 37signals that created Basecamp, HEY, & ONCE, and is a NYT-best-selling author (with Jason Fried) of 4 books: REWORK, REMOTE, Getting Real, and It Doesn't Have To Be Crazy At Work. He is also a race car driver, including a class-winning performance at the 24 hour Le Mans race.
Thank you for listening ‚ù§ Check out our sponsors: https://lexfridman.com/sponsors/ep474-sb
See below for timestamps, transcript, and to give feedback, submit questions, contact Lex, etc.

*Transcript:*
https://lexfridman.com/dhh-david-heinemeier-hansson-transcript

*CONTACT LEX:*
*Feedback* - give feedback to Lex: https://lexfridman.com/survey
*AMA* - submit questions, videos or call-in: https://lexfridman.com/ama
*Hiring* - join our team: https://lexfridman.com/hiring
*Other* - other ways to get in touch: https://lexfridman.com/contact

*EPISODE LINKS:*
DHH's X: https://x.com/dhh
DHH's Website: https://dhh.d
... [truncated]

SUBTITLE AVAILABILITY:
----------------------------------------
Total languages: 158
English available: True (auto)

EXTRACTED CAPTIONS:
----------------------------------------
Method: yt-dlp
Language: en
Word count: 132,908

TRANSCRIPT:
----------------------------------------
No one anywhere who's serious believes No one anywhere who's serious believes that Cookie banners does anything good that Cookie banners does anything good for anyone. Yet, we've been unable to for anyone. Yet, we've been unable to get rid of it. This is the thing that get rid of it. This is the thing that really gets me about cookie banners, really gets me about cookie banners, too. It's not just the EU. It's the too. It's not just the EU. It's the entire world. You can't hide from cookie entire world. You can't hide from cookie banners anywhere on this planet. If you banners anywhere on this planet. If you go to goddamn Mars on one of Elon's go to goddamn Mars on one of Elon's rockets and you try to access a web rockets and you try to access a web page, you'll still see a cookie banner. page, you'll still see a cookie banner. No one in the universe is safe from this No one in the universe is safe from this nonsense. It sometimes feels like we're nonsense. It sometimes feels like we're barely better off. Like web pages aren't barely better off. Like web pages aren't that different from what they were in that different from what they were in the late 90s, early 2000s. They're still the late 90s, early 2000s. They're still just forms. They still just write to just forms. They still just write to databases. A lot of people, I think, are databases. A lot of people, I think, are very uncomfortable with the fact that very uncomfortable with the fact that they are essentially CRUD monkeys. They they are essentially CRUD monkeys. They just make systems that create, read, just make systems that create, read, update, or delete rows in a database. update, or delete rows in a database. And they have to compensate for that And they have to compensate for that existential dread by over complicating existential dread by over complicating things. That's a huge part of the things. That's a huge part of the satisfaction of driving a race car is satisfaction of driving a race car is driving it at the edge of adhesion, as driving it at the edge of adhesion, as we call it, where you're essentially we call it, where you're essentially just a tiny movement away from spinning just a tiny movement away from spinning out. Doesn't take much. Then the car out. Doesn't take much. Then the car starts rotating. Once it starts starts rotating. Once it starts rotating, you lose grip and you're going rotating, you lose grip and you're going for the wall. That balance of danger and for the wall. That balance of danger and skill is what's so intoxicating. The following is a conversation with The following is a conversation with David Heinmire Hansen, also known as David Heinmire Hansen, also known as DHH. He is a legend in the programming DHH. He is a legend in the programming and tech world. Brilliant and and tech world. Brilliant and insightful, sometimes controversial and insightful, sometimes controversial and always fun to talk to. He's the creator always fun to talk to. He's the creator of Ruby on Rails, which is an of Ruby on Rails, which is an influential web development framework influential web development framework behind many websites used by millions of behind many websites used by millions of people, including Shopify, GitHub, and people, including Shopify, GitHub, and Airbnb. Airbnb. Airbnb. He is the co-owner and CTO of 37 signals He is the co-owner and CTO of 37 signals that created base camp and once he is a that created base camp and once he is a New York Times best-selling author New York Times best-selling author together with his co-author Jason together with his co-author Jason Frerieded of four books rework remote Frerieded of four books rework remote getting real and it doesn't have to be getting real and it doesn't have to be crazy at work. And on top of that, he's crazy at work. And on top of that, he's also a race car driver, including being also a race car driver, including being a class winner at the legendary 24-hour a class winner at the legendary 24-hour lemon race. This is the Lex Rubin lemon race. This is the Lex Rubin podcast. To support it, please check out podcast. To support it, please check out our sponsors in the description and our sponsors in the description and consider subscribing to this channel. consider subscribing to this channel. And now, dear friends, here's DH. And now, dear friends, here's DH. For someone who became a legendary For someone who became a legendary programmer, you officially got into programmer, you officially got into programming late in life. And I guess programming late in life. And I guess that's because that's because that's because uh you tried to learn how to program a uh you tried to learn how to program a few times and you failed. So can you few times and you failed. So can you tell me the uh the full story, the saga tell me the uh the full story, the saga of your failures to learn programming? of your failures to learn programming? Was Commodore 64 involved? Commodore 64 Was Commodore 64 involved? Commodore 64 was the inspiration? I really wanted a was the inspiration? I really wanted a Commodore 64. That was the first Commodore 64. That was the first computer I ever sat down in front. And computer I ever sat down in front. And the way I sat down in front of it was I the way I sat down in front of it was I was 5 years old and there was this one was 5 years old and there was this one kid on my street who had a Commodore 64. kid on my street who had a Commodore 64. No one else had a computer, so we were No one else had a computer, so we were all the kids just getting over there and all the kids just getting over there and we were all playing Y Kung Fu. I don't we were all playing Y Kung Fu. I don't know if you've ever seen that game. It know if you've ever seen that game. It was one of the original fighting games. was one of the original fighting games. It's really a great game. And I was It's really a great game. And I was playing that for the first time at 5 playing that for the first time at 5 years old. And we were like seven kids years old. And we were like seven kids sitting up in this one kid's bedroom all sitting up in this one kid's bedroom all taking our turn to play the game. And I taking our turn to play the game. And I just found that unbelievably just found that unbelievably interesting. And I begged and I begged interesting. And I begged and I begged my dad, could I get a and I begged my dad, could I get a computer? And he finally comes home. computer? And he finally comes home. He's like, "I got your computer." I was He's like, "I got your computer." I was like, "Yes, my own Commodore 64." And he like, "Yes, my own Commodore 64." And he pulls out this black, green, and blue pulls out this black, green, and blue keyboard. That's an Armstrong 464. I was keyboard. That's an Armstrong 464. I was like, "Dad, what's this? like, "Dad, what's this? &gt;&gt; The disappointment. &gt;&gt; The disappointment. &gt;&gt; This is not a Commodore 64." But it was &gt;&gt; This is not a Commodore 64." But it was a computer. So, I got my first computer a computer. So, I got my first computer at essentially 6 years old, that at essentially 6 years old, that Armstrad 464. And of course, the first Armstrad 464. And of course, the first thing I wanted to do, I wanted to play thing I wanted to do, I wanted to play video games. And I think the computer, video games. And I think the computer, which he, by the way, had traded for a which he, by the way, had traded for a TV and a stereo recorder or something TV and a stereo recorder or something like that, came with like two games. One like that, came with like two games. One was this Frogger game where you had to was this Frogger game where you had to escape from underground. It was actually escape from underground. It was actually kind of dark, like this frog. You're kind of dark, like this frog. You're trying to get it out from underground. trying to get it out from underground. And I was just I was pretty bad at it. And I was just I was pretty bad at it. And I only had those two games. And then And I only had those two games. And then I wanted more games. And one way to get I wanted more games. And one way to get more games when you're a kid who don't more games when you're a kid who don't have a lot of money and can't just buy a have a lot of money and can't just buy a bunch of games is to type them in bunch of games is to type them in yourself. Back in ' 84 85 magazines yourself. Back in ' 84 85 magazines would literally print source code at the would literally print source code at the back of their magazines and you could back of their magazines and you could just sit and type it in. So I tried to just sit and type it in. So I tried to do that and it would take like two hours do that and it would take like two hours to print this game into the Armistrad to print this game into the Armistrad and of course I'd make some spelling and of course I'd make some spelling mistake along the way and something mistake along the way and something wouldn't work and the whole thing I wouldn't work and the whole thing I wasn't that good of English. I was born wasn't that good of English. I was born in Denmark. So I was really trying to in Denmark. So I was really trying to get into it because I wanted all these get into it because I wanted all these games and didn't have the money to buy games and didn't have the money to buy them and I tried quite hard for quite a them and I tried quite hard for quite a while to get into it but it just never while to get into it but it just never clicked. And then I discovered the magic clicked. And then I discovered the magic of piracy. And after that I kind of piracy. And after that I kind basically just took some time off from basically just took some time off from learning to program because well now learning to program because well now suddenly I had access to all sorts of suddenly I had access to all sorts of games. So that was the first attempt games. So that was the first attempt like around six seven years old. And like around six seven years old. And what's funny is I remember these what's funny is I remember these fragments. I remember not understanding fragments. I remember not understanding the purpose of a variable. If if there's the purpose of a variable. If if there's a thing and you assign something, why a thing and you assign something, why would you assign another thing to it? would you assign another thing to it? So, for some reason, I understood So, for some reason, I understood constants. Like, constants made sense to constants. Like, constants made sense to me, but variables didn't. Then, maybe me, but variables didn't. Then, maybe I'm 11 or 12. I've gotten into the I'm 11 or 12. I've gotten into the AmIGGA at this point. The Amigga, by the AmIGGA at this point. The Amigga, by the way, still perhaps my favorite computer way, still perhaps my favorite computer of all time. I mean, this is one of of all time. I mean, this is one of those things where you like people get those things where you like people get older and they're like, "Oh, the music older and they're like, "Oh, the music from the 80s was amazing." To me, even from the 80s was amazing." To me, even as someone who loves computers, who as someone who loves computers, who loved new computers, the AmIGGA was this loved new computers, the AmIGGA was this magical machine that was made by the magical machine that was made by the same company that produced the Commodore same company that produced the Commodore 64. And I got the AmIGGA 500, I think in 64. And I got the AmIGGA 500, I think in 87. 87. 87. &gt;&gt; Look at this sexy thing. That is a sexy &gt;&gt; Look at this sexy thing. That is a sexy machine right there. machine right there. &gt;&gt; This is from an age, by the way, where &gt;&gt; This is from an age, by the way, where computing wasn't global in the same computing wasn't global in the same sense. The different territories had sense. The different territories had different computers that were popular. different computers that were popular. The Amigga was really popular in Europe, The Amigga was really popular in Europe, but it wasn't very popular at all in the but it wasn't very popular at all in the US, as far as I understand. It wasn't US, as far as I understand. It wasn't popular in Japan. The there were just popular in Japan. The there were just different machines. The Apple 2 was a different machines. The Apple 2 was a big thing in the US. I'd never even big thing in the US. I'd never even heard of Apple in the8s in Copenhagen. heard of Apple in the8s in Copenhagen. But the Omega 500 was the machine that But the Omega 500 was the machine that brought me to want to try it again. And brought me to want to try it again. And you know what's funny? The reason I you know what's funny? The reason I wanted to try it again was I remembered wanted to try it again was I remembered the first time to learn. And then there the first time to learn. And then there was this programming language that was was this programming language that was literally called easy Amos. literally called easy Amos. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; Like the easy version of Amos. I'm like, &gt;&gt; Like the easy version of Amos. I'm like, if it's if it's easy Amos, how hard can if it's if it's easy Amos, how hard can it be? I got to be able to figure this it be? I got to be able to figure this out. And this time I tried harder. I got out. And this time I tried harder. I got into conditionals. I got into loops. I into conditionals. I got into loops. I got into all these things and I still I got into all these things and I still I couldn't do it. couldn't do it. And on the second attempt, I really got And on the second attempt, I really got to the point like maybe this is just to the point like maybe this is just maybe I'm not smart enough. Maybe maybe I'm not smart enough. Maybe programming is just not maybe it's too programming is just not maybe it's too much math. Like I like math in this sort much math. Like I like math in this sort of superficial way. I don't like it in of superficial way. I don't like it in the deep way that some of my perhaps the deep way that some of my perhaps slightly nerdier friends did who I had slightly nerdier friends did who I had tremendous respect for. Like I'm not tremendous respect for. Like I'm not that person. I'm not the ma math geek that person. I'm not the ma math geek who's going to figure it all out. So who's going to figure it all out. So after that attempt with easy Amos and after that attempt with easy Amos and failing to even get I don't even think I failing to even get I don't even think I completed one even very basic game. I completed one even very basic game. I thought the program is just not for me. thought the program is just not for me. I'm going to have to do something else. I'm going to have to do something else. I still love computers. I still love I still love computers. I still love video games. I actually at that time had video games. I actually at that time had already begun making friends with people already begun making friends with people who knew how to program who weren't even who knew how to program who weren't even programming easy Amos. They were programming easy Amos. They were programming freaking Assembler. And I programming freaking Assembler. And I would sit down and just go I'm how do would sit down and just go I'm how do you the moves and the memories and the you the moves and the memories and the copies? How do you even do this? I don't copies? How do you even do this? I don't even understand how you go from this to even understand how you go from this to AmIGGA demos, for example. That was the AmIGGA demos, for example. That was the big thing with the Amigga. had this big thing with the Amigga. had this wonderful demo scene in Europe. It's wonderful demo scene in Europe. It's this really interesting period of time this really interesting period of time in the Amigga's history where you had in the Amigga's history where you had all these programmers spread out mostly all these programmers spread out mostly all over Europe who would compete on all over Europe who would compete on graphic competitions graphic competitions graphic competitions &gt;&gt; where you could probably bring one of &gt;&gt; where you could probably bring one of these on YouTube on on this thing. They these on YouTube on on this thing. They would make these little um almost like would make these little um almost like music videos combining some MIDI music, music videos combining some MIDI music, combining some cool graphics and they combining some cool graphics and they would do all of it in like 4K. 4 would do all of it in like 4K. 4 kilobytes that is not 4K is a kilobytes that is not 4K is a revolution, 4 kilobytes of of memory. revolution, 4 kilobytes of of memory. And I just thought that was such a cool And I just thought that was such a cool scene. This was obviously pre- internet. scene. This was obviously pre- internet. It was even prebs It was even prebs bulletin board systems to some extent. bulletin board systems to some extent. me was you swap your demo software with me was you swap your demo software with someone else by sending them a disc in someone else by sending them a disc in the mail the mail the mail &gt;&gt; like the 3.5s and I just I was enamored &gt;&gt; like the 3.5s and I just I was enamored with that whole scene. I was enamored with that whole scene. I was enamored with what they were able to create and I with what they were able to create and I just wanted to be a part of it even just wanted to be a part of it even though I kind of didn't have any skills though I kind of didn't have any skills to contribute and that's how I got into to contribute and that's how I got into running BBS's. I didn't learn running BBS's. I didn't learn programming then and I wouldn't learn programming then and I wouldn't learn programming until much later until I was programming until much later until I was almost 20 years old. The bulletin board almost 20 years old. The bulletin board systems existed in this funny space systems existed in this funny space where they were partly a service to the where they were partly a service to the demo scenes allowing all these demo demo scenes allowing all these demo groups to distribute their amazing groups to distribute their amazing demos. And then it was also a place to demos. And then it was also a place to trade piracy software, pirated software. trade piracy software, pirated software. And I ended up starting one of those And I ended up starting one of those when I was 14 years old in my tiny when I was 14 years old in my tiny little bedroom in Copenhagen. I had my little bedroom in Copenhagen. I had my at that point Amigga 4000. I had three at that point Amigga 4000. I had three telephone lines coming into my tiny telephone lines coming into my tiny room. room. room. &gt;&gt; Nice. &gt;&gt; Nice. &gt;&gt; Nice. &gt;&gt; Which was funny because again, I'm 14 &gt;&gt; Which was funny because again, I'm 14 years old. By the time I was installing years old. By the time I was installing my third line, you had to get someone my third line, you had to get someone from the telephone company to come do from the telephone company to come do it. I get this guy and he's just looking it. I get this guy and he's just looking around like, "What is this? Why the hell around like, "What is this? Why the hell is a 14-year-old having three phone is a 14-year-old having three phone lines into their tiny little bedroom? lines into their tiny little bedroom? What are what's going on here? Why are What are what's going on here? Why are all these modems blinking red and um all these modems blinking red and um black and making funny sounds?" Did your black and making funny sounds?" Did your parents know? parents know? parents know? &gt;&gt; They did and they didn't. They knew I &gt;&gt; They did and they didn't. They knew I had the phone lines. They knew I had the had the phone lines. They knew I had the computer. I don't think they really computer. I don't think they really understood that I was trading pirated understood that I was trading pirated software that was both illegal and software that was both illegal and whatever else was going on. whatever else was going on. &gt;&gt; Oh, we should probably say that in &gt;&gt; Oh, we should probably say that in Europe, maybe you can comment on this in Europe, maybe you can comment on this in especially in Eastern Europe, but Europe especially in Eastern Europe, but Europe in general, piracy, I think, was more in general, piracy, I think, was more acceptable than it was in the United acceptable than it was in the United States. I don't know there maybe maybe States. I don't know there maybe maybe it's just my upbringing. That it's just my upbringing. That conversation wasn't present. I never conversation wasn't present. I never spoke to anyone growing up in Denmark spoke to anyone growing up in Denmark who had any moral qualms whatsoever who had any moral qualms whatsoever about piracy. It was just completely about piracy. It was just completely accepted that accepted that accepted that &gt;&gt; you're a kid. You want a lot of games. &gt;&gt; you're a kid. You want a lot of games. You don't have a lot of money. What do You don't have a lot of money. What do you do? You trade. you do? You trade. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Some people would occasionally buy a &gt;&gt; Some people would occasionally buy a game. I mean, I once bought a uh Sega game. I mean, I once bought a uh Sega Master System and the I bought one game Master System and the I bought one game cuz that was what I could afford. I got cuz that was what I could afford. I got Afterburner 2. I don't know if you've Afterburner 2. I don't know if you've ever played that game. It's pretty bad ever played that game. It's pretty bad implementation on the uh Sega Master implementation on the uh Sega Master System, but it was like 600 crowners and System, but it was like 600 crowners and I was making money at that time uh doing I was making money at that time uh doing newspaper delivery. I had to do that for newspaper delivery. I had to do that for a month to afford one game. I like video a month to afford one game. I like video games way too much to wait a month just games way too much to wait a month just to get one game. So piracy was just the to get one game. So piracy was just the way you did it. And that was how I got way you did it. And that was how I got into running this bulletin board system, into running this bulletin board system, being part of the demo scene, being part being part of the demo scene, being part of the piracy scene to some extent. And of the piracy scene to some extent. And then also at some point realizing, oh, then also at some point realizing, oh, you can actually also make money on this you can actually also make money on this and this can fund buying more phone and this can fund buying more phone lines and buying more modems and buying lines and buying more modems and buying more amiggas. Oh yeah, that was one of more amiggas. Oh yeah, that was one of the demo parties. These were amazing the demo parties. These were amazing things. things. things. &gt;&gt; What am I looking at? &gt;&gt; What am I looking at? &gt;&gt; Look at all those CRT monitors. &gt;&gt; Look at all those CRT monitors. &gt;&gt; All these CRT monitors. Again, when I &gt;&gt; All these CRT monitors. Again, when I was 14, I I don't understand fully why was 14, I I don't understand fully why my parents allowed this, but I traveled my parents allowed this, but I traveled from Copenhagen, the capital of Denmark, from Copenhagen, the capital of Denmark, to O, this tiny little town in Judan on to O, this tiny little town in Judan on the train with a bunch of dudes who were the train with a bunch of dudes who were like late teens in their 20s. I'm 14 like late teens in their 20s. I'm 14 years old. I'm lugging my 14in CRT years old. I'm lugging my 14in CRT monitor with my computer in the back to monitor with my computer in the back to go to the party. That was what it was go to the party. That was what it was called. That was the biggest demo scene called. That was the biggest demo scene party at that time. And it was exactly party at that time. And it was exactly as you see in that picture. Thousands of as you see in that picture. Thousands of people just lining up with their people just lining up with their computers, programming demos all day computers, programming demos all day long, and trading these things back and long, and trading these things back and forth. forth. forth. &gt;&gt; That's kind of awesome. Not going to &gt;&gt; That's kind of awesome. Not going to lie, it's a little ridiculous. lie, it's a little ridiculous. &gt;&gt; It's totally awesome. And I I I miss it &gt;&gt; It's totally awesome. And I I I miss it in ways where the internet has connected in ways where the internet has connected people in some ways, but the connection people in some ways, but the connection you get from sitting right next to you get from sitting right next to someone else someone else someone else &gt;&gt; who has their own CRT monitor who's &gt;&gt; who has their own CRT monitor who's lugged it halfway around the country to lugged it halfway around the country to get there is truly special because it get there is truly special because it was also just this burst of creativity. was also just this burst of creativity. You're constantly running around. You're You're constantly running around. You're constantly surrounded by people who are constantly surrounded by people who are really good at what they could do. really good at what they could do. They're really good at programming They're really good at programming computers. It's infectious. It was part computers. It's infectious. It was part of that pang I felt then going like oh of that pang I felt then going like oh man why can't I figure this out? I mean man why can't I figure this out? I mean why can't I even figure out easy Amos? why can't I even figure out easy Amos? I it's kind of frustrating. I it's kind of frustrating. &gt;&gt; But on your third attempt you were more &gt;&gt; But on your third attempt you were more successful. successful. successful. &gt;&gt; So third attempt is when I start getting &gt;&gt; So third attempt is when I start getting it. This is when I start helping out it. This is when I start helping out let's say building things for the let's say building things for the internet. So around 95 I think it is or internet. So around 95 I think it is or 96 96 96 I discovered the internet. Actually I discovered the internet. Actually ninth grade that was my first ninth grade that was my first experience. I went to some university in experience. I went to some university in in Denmark and in ninth grade we had in Denmark and in ninth grade we had this excursion and they sat us down in this excursion and they sat us down in front of a computer and the computer had front of a computer and the computer had Netscape Navigator the first version or Netscape Navigator the first version or maybe it was even the the precursor to maybe it was even the the precursor to that and they had a text editor and us that and they had a text editor and us kids just got like hey built something kids just got like hey built something on the internet and it was just HTML and on the internet and it was just HTML and the first thing you do is like oh I can the first thing you do is like oh I can make the text text blink by just putting make the text text blink by just putting in this tag and saving it. That was that in this tag and saving it. That was that moment. That was actually when I moment. That was actually when I reawakened the urge to want to learn to reawakened the urge to want to learn to program because I got a positive program because I got a positive experience. All the other experiences I experience. All the other experiences I had with programming was I'd spend hours had with programming was I'd spend hours typing something in, I'd click run and typing something in, I'd click run and it wouldn't work. And I'd get an error it wouldn't work. And I'd get an error message that made no sense to me as a message that made no sense to me as a kid, either at six or seven or at 12. kid, either at six or seven or at 12. And here I am sitting in front of a And here I am sitting in front of a computer connected to the internet and computer connected to the internet and I'm making text blink. I'm making it I'm making text blink. I'm making it larger. I'm turning it into an H1 or an larger. I'm turning it into an H1 or an H2. H2. H2. And these guys out here, we just did it And these guys out here, we just did it for like an hour and a half. And for like an hour and a half. And suddenly I go, "Oh, I can make things suddenly I go, "Oh, I can make things for the internet that someone in Germany for the internet that someone in Germany can be able to access and see and I can be able to access and see and I don't have to ask anyone for permission. don't have to ask anyone for permission. This is super cool. I got to do more of This is super cool. I got to do more of this." So I got into the internet. I got this." So I got into the internet. I got into working with HTML and I still had into working with HTML and I still had all these friends from these demo all these friends from these demo parties parties parties &gt;&gt; and I started working with them on &gt;&gt; and I started working with them on creating gaming websites. I'd write creating gaming websites. I'd write about the video games. I'd review him. about the video games. I'd review him. This was another good way of getting new This was another good way of getting new video games was to walk down to some video games was to walk down to some store and say like, hey, I'm a I'm a store and say like, hey, I'm a I'm a journalist. I'm like this 15year-old kid journalist. I'm like this 15year-old kid and they're they're looking at me, and they're they're looking at me, you're you're a journalist. Yeah. Can I you're you're a journalist. Yeah. Can I borrow some some games? Cuz this was borrow some some games? Cuz this was when games moved on to the PlayStation when games moved on to the PlayStation and these other things. You couldn't and these other things. You couldn't just as easily pirate, at least not at just as easily pirate, at least not at first. So, I went down there, did all first. So, I went down there, did all that. And that started the journey of that. And that started the journey of the internet for me. It started working the internet for me. It started working on these gaming websites, working with on these gaming websites, working with programmers, programmers, programmers, figuring out that I could do something. figuring out that I could do something. I could work on the HTML part. It's not I could work on the HTML part. It's not really programming, but it kind of really programming, but it kind of smells like it. You're talking to a smells like it. You're talking to a computer, you're making it put text on computer, you're making it put text on the screen, and you're communicating the screen, and you're communicating with someone halfway around the world. with someone halfway around the world. So, that became my pathway back into So, that became my pathway back into programming. And then slowly I picked up programming. And then slowly I picked up more and more of it. First website I did more and more of it. First website I did with someone, one of these programmers with someone, one of these programmers from the demo scene that was dynamic was from the demo scene that was dynamic was ASP.NET. net and it wasn't even actually ASP.NET. net and it wasn't even actually called.net that was what we started on called.net that was what we started on and then we moved on to PHP and PHP was and then we moved on to PHP and PHP was when I finally got it when it finally when I finally got it when it finally clicked when conditionals and loops and clicked when conditionals and loops and variables and all of that stuff started variables and all of that stuff started to make sense enough to me that I to make sense enough to me that I thought I can do this. thought I can do this. &gt;&gt; So would it be fair to say that we &gt;&gt; So would it be fair to say that we wouldn't have DHH without PHP and wouldn't have DHH without PHP and therefore you owe all your success to therefore you owe all your success to PHP? 100% that's true and it's even PHP? 100% that's true and it's even better than that because it's PHP to me better than that because it's PHP to me didn't just give me a start in terms of didn't just give me a start in terms of making my own web applications it making my own web applications it actually gave me a bar in many ways I actually gave me a bar in many ways I think the pinnacle of developer web think the pinnacle of developer web developer ergonomics is late '90s PHP developer ergonomics is late '90s PHP you write this script you FTP it to a you write this script you FTP it to a server and instantly it's deployed server and instantly it's deployed instantly it's available you change instantly it's available you change anything in that file and you reload anything in that file and you reload boom it's right there. There's no web boom it's right there. There's no web servers, there's no setup, there's just servers, there's no setup, there's just an Apache an Apache an Apache &gt;&gt; that runs mod PHP. And it was &gt;&gt; that runs mod PHP. And it was essentially the easiest way to get a essentially the easiest way to get a dynamic web page up and going. And this dynamic web page up and going. And this is one of the things I've been chasing is one of the things I've been chasing that high for basically the rest of my that high for basically the rest of my career that it was so easy to make career that it was so easy to make things for the internet in the mid to things for the internet in the mid to late 90s. How did we lose the late 90s. How did we lose the sensibilities that allowed us to not sensibilities that allowed us to not just work this way, but get new people just work this way, but get new people into the industry to give them their into the industry to give them their success experiences that I had, adding a success experiences that I had, adding a freaking Blink tag to an HTML page, freaking Blink tag to an HTML page, ftping a PHP page to an Apache web ftping a PHP page to an Apache web server without knowing really anything server without knowing really anything about anything, without knowing anything about anything, without knowing anything about frameworks, without knowing about frameworks, without knowing anything about setup, anything about setup, all of that stuff have really taken us all of that stuff have really taken us to a place where It sometimes feels like to a place where It sometimes feels like we're barely better off. Like web pages we're barely better off. Like web pages aren't that different from what they aren't that different from what they were in the late 90s, early 2000s. were in the late 90s, early 2000s. They're still just forms. They still They're still just forms. They still just write to databases. A lot of just write to databases. A lot of people, I think, are very uncomfortable people, I think, are very uncomfortable with the fact that they are essentially with the fact that they are essentially CRUD monkeys. They just make systems CRUD monkeys. They just make systems that create, read, update, or delete that create, read, update, or delete rows in a database. And they have to rows in a database. And they have to compensate for that existential dread by compensate for that existential dread by over complicating things. Now, that's a over complicating things. Now, that's a bit of a character. There's more to it, bit of a character. There's more to it, and there's things you can learn for and there's things you can learn for more sophisticated ways of thinking more sophisticated ways of thinking about this, but there's still an ideal about this, but there's still an ideal here, which was why I was so happy you here, which was why I was so happy you had Peter Levels on because he still had Peter Levels on because he still basically works like this. And I look at basically works like this. And I look at that and go like, man, that's amazing. that and go like, man, that's amazing. &gt;&gt; Yeah, you're chasing that high. He's &gt;&gt; Yeah, you're chasing that high. He's been high all along using PHP, jQuery, been high all along using PHP, jQuery, and uh SQLite. and uh SQLite. &gt;&gt; I think it's amazing because he's &gt;&gt; I think it's amazing because he's proving that this isn't just a nostalgic proving that this isn't just a nostalgic dream. He's actually doing it. He's dream. He's actually doing it. He's running all these businesses. Now, some running all these businesses. Now, some of that is, as he would admit up first of that is, as he would admit up first up front, is that he's just one guy. And up front, is that he's just one guy. And you can do different things when you're you can do different things when you're just one guy. When you're working in a just one guy. When you're working in a team, when I started working on the team, when I started working on the team, when I started working with Jason team, when I started working with Jason Freed on Base Camp, we at first didn't Freed on Base Camp, we at first didn't use version control together. I used use version control together. I used version control for myself and then I version control for myself and then I thought, you know what, designers thought, you know what, designers ah, they're probably not smart enough to ah, they're probably not smart enough to figure out CVS. Yeah. figure out CVS. Yeah. &gt;&gt; And therefore I just like, "No, no, no. &gt;&gt; And therefore I just like, "No, no, no. You just FTP it up. You just FTP it." I You just FTP it up. You just FTP it." I knew they knew how to do FTP. And then knew they knew how to do FTP. And then after the third time, I had overridden after the third time, I had overridden their changes. I was like, "God damn it. their changes. I was like, "God damn it. I guess I got to teach Jason CBS to not I guess I got to teach Jason CBS to not do that again." But I think there's do that again." But I think there's still way more truth to the fact that we still way more truth to the fact that we can work the way we did in the '90s, can work the way we did in the '90s, work the way Peter works today, even in work the way Peter works today, even in the team context and that we've been far the team context and that we've been far too willing to hand over far too much of too willing to hand over far too much of our developer ergonomics to the our developer ergonomics to the merchants of complexity. merchants of complexity. &gt;&gt; And you've been chasing that with Rails &gt;&gt; And you've been chasing that with Rails 8. So h how do you bring all the cool 8. So h how do you bring all the cool features of a modern framework and make features of a modern framework and make it no build make it as as easy to create it no build make it as as easy to create something and to ship it as it was in something and to ship it as it was in the '9s with just PHP. It's very the '9s with just PHP. It's very difficult for me to beat the Peter difficult for me to beat the Peter Level's approach Level's approach Level's approach uh of just just it's so easy to just uh of just just it's so easy to just ship some PHP and it should be why ship some PHP and it should be why should it be harder than that? Our should it be harder than that? Our computers today are almost infinitely computers today are almost infinitely faster than what they were in the 90s. faster than what they were in the 90s. So, shouldn't we be able to work in even So, shouldn't we be able to work in even easier ways? We should be looking back easier ways? We should be looking back on the '90s and go like, "Oh, that was on the '90s and go like, "Oh, that was way too complicated. Now we have more way too complicated. Now we have more sophisticated technology that's way sophisticated technology that's way faster and it allows us to work in these faster and it allows us to work in these easier to use ways." But that's not easier to use ways." But that's not true. But now you can see the line I true. But now you can see the line I draw in my work with Ruby and Rails and draw in my work with Ruby and Rails and especially with Rails 8. No build to me especially with Rails 8. No build to me is reaching back to that '90s feeling is reaching back to that '90s feeling and going now we can do some of those and going now we can do some of those things without giving up on all the things without giving up on all the progress because I do think you can get progress because I do think you can get too nostalgic. I do think you can start too nostalgic. I do think you can start just fantasizing that everything was just fantasizing that everything was better in the '90s. It wasn't. I mean I better in the '90s. It wasn't. I mean I was there. There was a lot of things was there. There was a lot of things that sucked. And if we can somehow find that sucked. And if we can somehow find a way to combine a way to combine the advantages and advances we've had the advantages and advances we've had over the past 20 years with that ease of over the past 20 years with that ease of developer ergonomics, we can win. No developer ergonomics, we can win. No build is a rejection of the part of web build is a rejection of the part of web development I've hated the most in the development I've hated the most in the past 10-15 years which is the JavaScript past 10-15 years which is the JavaScript scene. scene. scene. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; And I don't say that as someone who &gt;&gt; And I don't say that as someone who hates JavaScript. I mean I often joke hates JavaScript. I mean I often joke that JavaScript is my second favorite that JavaScript is my second favorite programming language. It's a very programming language. It's a very distant second. Ruby is by far in a way distant second. Ruby is by far in a way number one. But I actually like number one. But I actually like JavaScript. I don't think it's a bad JavaScript. I don't think it's a bad language. It gets a lot of language. It gets a lot of &gt;&gt; flak. People add a string of two plus a &gt;&gt; flak. People add a string of two plus a one and it gives something nonsense and one and it gives something nonsense and I just go like, "Yeah, but why are you I just go like, "Yeah, but why are you why would you do that? Just don't do why would you do that? Just don't do that." The language is actually quite that." The language is actually quite lovely, especially the modern version lovely, especially the modern version ES6 that really introduced a proper ES6 that really introduced a proper class syntax to it. So I could work with class syntax to it. So I could work with JavaScript in many of the same ways that JavaScript in many of the same ways that I love working with Ruby made things so I love working with Ruby made things so much better. But in the early 20110s much better. But in the early 20110s until quite recently, all of that until quite recently, all of that advancement happened in pre-processing advancement happened in pre-processing happened in built pipelines. The happened in built pipelines. The browsers couldn't speak a dialect of browsers couldn't speak a dialect of JavaScript that was pleasant to work JavaScript that was pleasant to work with. So everyone started to with. So everyone started to pre-ompiling their JavaScript to be able pre-ompiling their JavaScript to be able to use more modern ways of programming to use more modern ways of programming with a browser that was seen as stuck with a browser that was seen as stuck with an ancient version of JavaScript with an ancient version of JavaScript that no one actually wanted to work that no one actually wanted to work with. And that made sense to me, but it with. And that made sense to me, but it was also deeply unpleasant. And I was also deeply unpleasant. And I remember thinking during that time, the remember thinking during that time, the dark ages as I refer to them with dark ages as I refer to them with JavaScript, that JavaScript, that JavaScript, that this cannot be the final destination. this cannot be the final destination. There's no way that we have managed to There's no way that we have managed to turn the internet into such an turn the internet into such an unpleasant place to work where I would unpleasant place to work where I would start working on a project in JavaScript start working on a project in JavaScript using Webpack and all of these using Webpack and all of these dependencies and I would put it down for dependencies and I would put it down for literally 5 minutes and the thing literally 5 minutes and the thing wouldn't compile anymore. The amount of wouldn't compile anymore. The amount of churn that the JavaScript community, churn that the JavaScript community, especially with its frameworks and its especially with its frameworks and its tooling, went through in the decade from tooling, went through in the decade from 2010 to 2020 was absurd. 2010 to 2020 was absurd. And you had to be And you had to be trapped inside of that asylum to not trapped inside of that asylum to not realize what an utterly realize what an utterly perverse situation we had landed perverse situation we had landed ourselves in. Why does everything break ourselves in. Why does everything break all the time? I mean, the joke wouldn't all the time? I mean, the joke wouldn't be just that the software would break. be just that the software would break. That would annoy me personally. But then That would annoy me personally. But then I'd go on hacker news and I'd see some I'd go on hacker news and I'd see some thread on the latest JavaScript release thread on the latest JavaScript release of some framework and the thread would of some framework and the thread would be like um someone would ask well aren't be like um someone would ask well aren't we using the thing we just used three we using the thing we just used three months ago and people would be like that months ago and people would be like that thing is so outdated that's so three thing is so outdated that's so three months ago you got to get with the new months ago you got to get with the new program we're completely rewriting program we're completely rewriting everything for the teen time and everything for the teen time and anything you've learned in the framework anything you've learned in the framework you've been spending the last amount of you've been spending the last amount of time on it's all useless. You got to time on it's all useless. You got to throw everything out and you got to throw everything out and you got to start over. Why aren't you doing it, start over. Why aren't you doing it, stupid idiot? stupid idiot? stupid idiot? &gt;&gt; Is that a kind of mass hysteria that &gt;&gt; Is that a kind of mass hysteria that took over the developer community? You took over the developer community? You think? Like where you have to keep think? Like where you have to keep creating new frameworks and new creating new frameworks and we are we past that dark frameworks and we are we past that dark age? age? age? &gt;&gt; I think we're getting out of it. And &gt;&gt; I think we're getting out of it. And we're getting out of it because browsers we're getting out of it because browsers have gotten so much better. There was a have gotten so much better. There was a stagnation in browser technology. Some stagnation in browser technology. Some of it was an overhang all the way back of it was an overhang all the way back from IE5. from IE5. from IE5. So I5 essentially put the whole internet So I5 essentially put the whole internet development experience into a deep development experience into a deep freeze because Microsoft won the browser freeze because Microsoft won the browser wars in the mid 2000s and then they wars in the mid 2000s and then they basically disbanded their browser basically disbanded their browser development team because they're like development team because they're like all right job done we don't need any all right job done we don't need any more innovation on the internet. Can we more innovation on the internet. Can we just go back to writing Windows forms or just go back to writing Windows forms or something now that we control something now that we control everything? everything? everything? And it really wasn't until obviously And it really wasn't until obviously Firefox kind of kindled a little bit of Firefox kind of kindled a little bit of something, then Chrome got into the something, then Chrome got into the scene and Google got serious about scene and Google got serious about moving the web forward that you had an moving the web forward that you had an kindling of maybe the browser could be kindling of maybe the browser could be better, maybe the browser wasn't frozen better, maybe the browser wasn't frozen in time in 2005, maybe the browser could in time in 2005, maybe the browser could actually evolve like at the development actually evolve like at the development platform that it is. But then what platform that it is. But then what happened was you had a lot of smart happened was you had a lot of smart people who poured in to the web because people who poured in to the web because the web turned out to be the greatest the web turned out to be the greatest application development platform of all application development platform of all time. This was where all the money was time. This was where all the money was being made. This were this was where all being made. This were this was where all the billionaires were being minted. This the billionaires were being minted. This was where the Facebooks and whatever of was where the Facebooks and whatever of the world came to be. So you had all of the world came to be. So you had all of this brain power applied to the problem this brain power applied to the problem of how to work with the web. And there of how to work with the web. And there were some very smart people with some were some very smart people with some I'm sure very good ideas who did not I'm sure very good ideas who did not have uh programmer happiness as their have uh programmer happiness as their motivation. Number one, they had other motivation. Number one, they had other priorities and those priorities allowed priorities and those priorities allowed them to discount and even rationalize them to discount and even rationalize the complexity they were injecting the complexity they were injecting everywhere. Some of that complexity came everywhere. Some of that complexity came from organizational structure. When you from organizational structure. When you have a company like Facebook for example have a company like Facebook for example that does depend on the web and want to that does depend on the web and want to push it forward but have sliced the push it forward but have sliced the development role job into these tiny development role job into these tiny little niches. I'm a front-end little niches. I'm a front-end glob pipeline configurator. Oh yeah well glob pipeline configurator. Oh yeah well I'm a front-end whatever engineer. And I'm a front-end whatever engineer. And suddenly the web developer was no longer suddenly the web developer was no longer one person. It was 15 different roles. one person. It was 15 different roles. That in itself injected a ton of That in itself injected a ton of complexity. But I also want to give it complexity. But I also want to give it the bold case here, which was that some the bold case here, which was that some of that complexity was necessary to get of that complexity was necessary to get to where we are today. That the to where we are today. That the complexity was a bridge. It wasn't the complexity was a bridge. It wasn't the destination, but we had to cross that destination, but we had to cross that bridge to get to where we are today. bridge to get to where we are today. Where browsers are frankly incredible. Where browsers are frankly incredible. The JavaScript you can write in a text The JavaScript you can write in a text file and then serve on a web server for file and then serve on a web server for a browser to ingest is amazing. It's a browser to ingest is amazing. It's actually a really good experience. You actually a really good experience. You don't need any pre-processing. You can don't need any pre-processing. You can just write text files, send them to a just write text files, send them to a browser, and you have an incredible browser, and you have an incredible development. development. development. &gt;&gt; And we should also say that it can kind &gt;&gt; And we should also say that it can kind of be broken. At least the HTML, but of be broken. At least the HTML, but even the JavaScript could be a little even the JavaScript could be a little bit broken, and it kind of still works. bit broken, and it kind of still works. Like maybe it halfass works, but like Like maybe it halfass works, but like the just the amount of mess of smelly the just the amount of mess of smelly code that a browser has to deal with is code that a browser has to deal with is insane. This is one of the hardest insane. This is one of the hardest problems in computing today is to parse problems in computing today is to parse the entire internet because thankfully the entire internet because thankfully for us as web developers but perhaps not for us as web developers but perhaps not so much for the browser developers every so much for the browser developers every web page that has ever been created web page that has ever been created minus the brief period with flash still minus the brief period with flash still runs today. runs today. runs today. &gt;&gt; The web page I did in ninth grade would &gt;&gt; The web page I did in ninth grade would render on a modern browser today 30 render on a modern browser today 30 years later. That is completely crazy years later. That is completely crazy when you think about the amount of when you think about the amount of evolution we've had with the web, how evolution we've had with the web, how much better we've made it, how many more much better we've made it, how many more standards browsers have adopted. It's standards browsers have adopted. It's essentially an Apollo project today to essentially an Apollo project today to create a new browser, which is why it create a new browser, which is why it doesn't happen very often, which is why doesn't happen very often, which is why even companies like Microsoft had to even companies like Microsoft had to throw in the towel and say we can't do throw in the towel and say we can't do it. Now, I actually don't think that's it. Now, I actually don't think that's good for the web. There is the danger of good for the web. There is the danger of the monoculture if we just get a single the monoculture if we just get a single browser engine that runs everything. And browser engine that runs everything. And we are in danger of that. I love the we are in danger of that. I love the fact that the Ladybird project, for fact that the Ladybird project, for example, is trying to make a new browser example, is trying to make a new browser engine from scratch. I've supported that engine from scratch. I've supported that project. I would encourage people to project. I would encourage people to look into that. It's really a wonderful look into that. It's really a wonderful &gt;&gt; nice &gt;&gt; nice &gt;&gt; nice &gt;&gt; thing. It's staffed by a bunch of people &gt;&gt; thing. It's staffed by a bunch of people who worked on other browser projects in who worked on other browser projects in the past. the past. the past. &gt;&gt; Truly independent web browser. &gt;&gt; Truly independent web browser. &gt;&gt; We really need that. But I can hold that &gt;&gt; We really need that. But I can hold that thought in my head. At the same time, I thought in my head. At the same time, I hold the thought in my head that hold the thought in my head that Google's Chrome was pivotal to the web Google's Chrome was pivotal to the web surviving as the premier web development surviving as the premier web development platform. If it had not been for Google platform. If it had not been for Google and their entire business depending on a and their entire business depending on a thriving open web, thriving open web, Apple, Microsoft, I think would have Apple, Microsoft, I think would have been just as fine to see the web go away been just as fine to see the web go away to disappear into being something that to disappear into being something that just served native web applica or native just served native web applica or native mobile applications and native desktop mobile applications and native desktop applications that they could completely applications that they could completely control. So I have all sorts of problems control. So I have all sorts of problems with Google, but it's not Chrome. Chrome with Google, but it's not Chrome. Chrome is a complete gift to web developers is a complete gift to web developers everywhere to the web as a development everywhere to the web as a development platform and they deserve an enormous platform and they deserve an enormous amount of credit I think for that even amount of credit I think for that even if it's entangled with their business if it's entangled with their business model and half of Chrome is code that model and half of Chrome is code that spies on you or informs targeted ads and spies on you or informs targeted ads and a bunch of things I'm not a big fan of. a bunch of things I'm not a big fan of. I can divorce that from the fact we need I can divorce that from the fact we need champions in the corner of the web who champions in the corner of the web who have trillions of dollars of market cap have trillions of dollars of market cap value riding on the open web. value riding on the open web. &gt;&gt; We're going to take tangents upon a &gt;&gt; We're going to take tangents upon a tangent upon a tangent. So, let's go to tangent upon a tangent. So, let's go to Chrome. I think Chrome positive impact Chrome. I think Chrome positive impact on humanities is immeasurable for on humanities is immeasurable for reasons that you just described. On the reasons that you just described. On the technology front, the features they technology front, the features they present, the competition they created, present, the competition they created, it's spurred on this wonderful it's spurred on this wonderful flourishing of web technologies. But flourishing of web technologies. But anyway, I have to ask you about the the anyway, I have to ask you about the the recent stuff with the DOJ trying to recent stuff with the DOJ trying to split up Chrome and Google. Do you think split up Chrome and Google. Do you think this is a good idea? Do you think this this is a good idea? Do you think this does harm? Is a disaster? does harm? Is a disaster? And I say that as someone who's been And I say that as someone who's been very sympathetic to the antitrust fight very sympathetic to the antitrust fight because I do think we have antitrust because I do think we have antitrust problems in technology. But the one problems in technology. But the one place where we don't have them by and place where we don't have them by and large is with browsers, is with the large is with browsers, is with the tools we use to access the open web. tools we use to access the open web. First of all, we have Firefox. Now, First of all, we have Firefox. Now, Firefox is not doing all that great and Firefox is not doing all that great and Firefox has been propped up by Google Firefox has been propped up by Google for many years to deter from exactly for many years to deter from exactly what's going on with the DOJ that they what's going on with the DOJ that they were the only game in town. Apple has were the only game in town. Apple has Safari. I have a bunch of problems with Safari. I have a bunch of problems with Apple, too, but I love Safari. I love Apple, too, but I love Safari. I love the fact that we have a premier browser the fact that we have a premier browser running on a premier operating system running on a premier operating system that people can't turn the web into just that people can't turn the web into just a Chrome experience, but I also think a Chrome experience, but I also think that the open web needs this trillion that the open web needs this trillion dollar champion or at least benefits dollar champion or at least benefits from it. Maybe doesn't need it, but it from it. Maybe doesn't need it, but it certainly benefits from it. And of all certainly benefits from it. And of all the things that are wrong with monopoly the things that are wrong with monopoly formation in technology, Chrome is the formation in technology, Chrome is the last thing. And this is why I get so last thing. And this is why I get so frustrated sometimes about the anti- or frustrated sometimes about the anti- or the monopoly fight that there are real the monopoly fight that there are real problems and we should be focusing on problems and we should be focusing on the premier problems first like the toll the premier problems first like the toll booths on our mobile phones. There are booths on our mobile phones. There are far bigger problem. It's not the open far bigger problem. It's not the open web. It's not the tools that we use to web. It's not the tools that we use to access the open web. If I don't want to access the open web. If I don't want to use Chrome, if my customers of my use Chrome, if my customers of my businesses that run on the internet businesses that run on the internet don't want to use Chrome, they don't don't want to use Chrome, they don't have to. We're never forced to go have to. We're never forced to go through it. the open internet is still through it. the open internet is still open. So, I think it's a real shame that open. So, I think it's a real shame that the DOJ has chosen to pursue Google in the DOJ has chosen to pursue Google in this way. I do think there are other this way. I do think there are other things you can nail Google for and their things you can nail Google for and their ad monopoly maybe or the uh shenanigans ad monopoly maybe or the uh shenanigans they've done in controlling both sides they've done in controlling both sides of the ad ledger that they both control of the ad ledger that they both control the supply and the demand. There are the supply and the demand. There are problems. Chrome isn't it. And you end problems. Chrome isn't it. And you end up making the web much worse. And this up making the web much worse. And this is the thing we always got to remember is the thing we always got to remember when we think about legislation, when we when we think about legislation, when we think about um monopoly fights is you think about um monopoly fights is you may not like how things look today and may not like how things look today and you may want to do something about it, you may want to do something about it, but you may also make it worse. The good but you may also make it worse. The good intentions behind the GDPR in Europe intentions behind the GDPR in Europe currently has amounted to what? cookie currently has amounted to what? cookie banners that everyone on the internet banners that everyone on the internet hates that helps no one do anything hates that helps no one do anything better, anything more efficient, that better, anything more efficient, that saves no privacy in any way, shape, or saves no privacy in any way, shape, or form, has been a complete boondoggle, form, has been a complete boondoggle, that has only enriched lawyers and that has only enriched lawyers and accountants and accountants and accountants and bureaucrats. bureaucrats. bureaucrats. &gt;&gt; Yeah. You said that the cookie banner is &gt;&gt; Yeah. You said that the cookie banner is a monument for why Europe is losing is a monument for why Europe is losing is is doing the worst uh of all the regions is doing the worst uh of all the regions in tech. It's it's a monument to good in tech. It's it's a monument to good intentions leading straight to hell. intentions leading straight to hell. &gt;&gt; And the Europe is actually world class &gt;&gt; And the Europe is actually world class &gt;&gt; in good intentions leading straight to &gt;&gt; in good intentions leading straight to hell. hell. hell. &gt;&gt; So hell is the cookie accept button. &gt;&gt; So hell is the cookie accept button. They have to accept all cookies. That's They have to accept all cookies. That's what hell looks like over and over. You what hell looks like over and over. You don't actually ever get to the web page. don't actually ever get to the web page. &gt;&gt; Just on a human scale. Try to imagine &gt;&gt; Just on a human scale. Try to imagine how many hours every day are wasted how many hours every day are wasted clicking that away and how much harm clicking that away and how much harm we've done to the web as a platform that we've done to the web as a platform that people enjoy because of them. The people enjoy because of them. The internet is ugly in part because of internet is ugly in part because of cookie banners. Cookie banners were cookie banners. Cookie banners were supposed to save us from advertisement supposed to save us from advertisement and advertisement can make the web ugly. and advertisement can make the web ugly. There's plenty of examples of that. But There's plenty of examples of that. But cookie banners made the entire internet cookie banners made the entire internet ugly in one fell swoop. And that's a ugly in one fell swoop. And that's a complete tragedy. But what's even worse, complete tragedy. But what's even worse, and this is why I call it out as a and this is why I call it out as a monument to everything the EU gets monument to everything the EU gets wrong, is that we have known this for a wrong, is that we have known this for a decade. No one anywhere who's serious decade. No one anywhere who's serious believes that cookie banners does believes that cookie banners does anything good for anyone. Yet, we've anything good for anyone. Yet, we've been unable to get rid of it. There's been unable to get rid of it. There's this one piece of legislation that's this one piece of legislation that's now, I think, 10 or 12 years old. It's now, I think, 10 or 12 years old. It's complete failure on every conceivable complete failure on every conceivable metric. Everyone hates it universally, metric. Everyone hates it universally, yet we can't seem to do anything about yet we can't seem to do anything about it. it. it. That's a bankruptcy declaration for any That's a bankruptcy declaration for any body of bureaucrats who pretend or body of bureaucrats who pretend or pretend to make things better for not pretend to make things better for not just citizens but people around the just citizens but people around the world. This is the thing that really world. This is the thing that really gets me about cookie banners, too. It's gets me about cookie banners, too. It's not just the EU. It's the entire world. not just the EU. It's the entire world. You can't hide from cookie banners You can't hide from cookie banners anywhere on this planet. If you go to anywhere on this planet. If you go to goddamn Mars on one of Elon's rockets goddamn Mars on one of Elon's rockets and you try to access a web page, you'll and you try to access a web page, you'll still see a cookie banner. No one in the still see a cookie banner. No one in the universe is safe from this nonsense. universe is safe from this nonsense. &gt;&gt; Probably the interface on on the rocket &gt;&gt; Probably the interface on on the rocket &gt;&gt; slower. You have basically &gt;&gt; slower. You have basically 150 second ping time. So it'll take you 150 second ping time. So it'll take you 45 seconds just to get through the 45 seconds just to get through the cookie banners from Mars. cookie banners from Mars. &gt;&gt; Um, all right. Let's walk back up the &gt;&gt; Um, all right. Let's walk back up the stack of this recursive tangents we've stack of this recursive tangents we've been taking. So Chrome, we should say, been taking. So Chrome, we should say, at least in my opinion, is not winning at least in my opinion, is not winning unfairly. It's winning in the fair way unfairly. It's winning in the fair way by just being better. by just being better. &gt;&gt; It is. If I was going to steal man the &gt;&gt; It is. If I was going to steal man the other side just for a half second, other side just for a half second, &gt;&gt; people would say, well, maybe yes, most &gt;&gt; people would say, well, maybe yes, most people do sort of begrudgingly agree people do sort of begrudgingly agree that Chrome is a pretty good browser. that Chrome is a pretty good browser. But then they'll say the reason it got But then they'll say the reason it got dominance was distribution. And the dominance was distribution. And the reason they got distribution was because reason they got distribution was because Google also controls Android and Google also controls Android and therefore can make Chrome the default therefore can make Chrome the default browser on all these phones. Now, I browser on all these phones. Now, I don't buy that. And the reason I don't don't buy that. And the reason I don't buy that is because on Android, you're buy that is because on Android, you're actually allowed to ship a different actually allowed to ship a different browser that has a browser engine that's browser that has a browser engine that's not the same as Chrome. Unlike on iOS not the same as Chrome. Unlike on iOS where if you want to ship a browser, where if you want to ship a browser, Chrome, for example, ships for iOS, but Chrome, for example, ships for iOS, but it's not Chrome. It's Safari wrapped in it's not Chrome. It's Safari wrapped in address. address. address. And every single alternative browser on And every single alternative browser on iOS have to use the Safari web engine. iOS have to use the Safari web engine. That's not competition. That's not what That's not competition. That's not what happened on Android. Again, I think happened on Android. Again, I think there are some nuances to it. But if you there are some nuances to it. But if you zoom out and you look at all the zoom out and you look at all the problems we have with big tech, Chrome problems we have with big tech, Chrome is not it. Chrome won on merits. I is not it. Chrome won on merits. I begrudgingly have switched to Chrome on begrudgingly have switched to Chrome on that realization alone. As a web that realization alone. As a web developer, I just prefer it. I like developer, I just prefer it. I like Firefox in many ways. I like the ethos Firefox in many ways. I like the ethos of it, but Chrome is a better browser of it, but Chrome is a better browser than Firefox. Full stop. And by the way, than Firefox. Full stop. And by the way, we've never mentioned Edge. Edge is also we've never mentioned Edge. Edge is also a good browser a good browser &gt;&gt; because it's also Chrome in address, &gt;&gt; because it's also Chrome in address, &gt;&gt; but it never gets the love. I I don't &gt;&gt; but it never gets the love. I I don't think I've ever used Bing and I'm sure think I've ever used Bing and I'm sure Bing is really nice. Bing is really nice. &gt;&gt; Maybe you have because you know what is &gt;&gt; Maybe you have because you know what is Bing in address? Bing in address? &gt;&gt; What? &gt;&gt; What? &gt;&gt; What? &gt;&gt; Duck.Go, which is actually the search &gt;&gt; Duck.Go, which is actually the search engine that I use. Duck.Go gets its engine that I use. Duck.Go gets its search results from Bing. Or at least it search results from Bing. Or at least it used to. If they changed that, that used to. If they changed that, that would be news to me. would be news to me. &gt;&gt; Well, maybe everything is just a wrap or &gt;&gt; Well, maybe everything is just a wrap or a dress. Everything is wearing a dress. a dress. Everything is wearing a dress. Underneath there's some other turtles. Underneath there's some other turtles. It turtles all the dresses all the way It turtles all the dresses all the way down. Okay. What were we talking about? down. Okay. What were we talking about? We got there from JavaScript and from We got there from JavaScript and from you learning how to program. So you learning how to program. So eventually eventually eventually the big success story is when you built the big success story is when you built a bunch of stuff with PHP a bunch of stuff with PHP and you were like actually shipping and you were like actually shipping things. things. things. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; And that's when the the Ruby story came. &gt;&gt; And that's when the the Ruby story came. So when your big love affair with So when your big love affair with programming began there. So can you take programming began there. So can you take me there? What what is Ruby? Tell the me there? What what is Ruby? Tell the story of Ruby. Explain Ruby to me. PHP story of Ruby. Explain Ruby to me. PHP was what converted me from just being was what converted me from just being able to fondle HTML and turn out some able to fondle HTML and turn out some web pages to actually being able to web pages to actually being able to produce web applications myself. produce web applications myself. So I owe a tremendous gratitude to PHP So I owe a tremendous gratitude to PHP in that regard. But I never thought of in that regard. But I never thought of PHP as a calling. I never thought I'm a PHP as a calling. I never thought I'm a professional programmer who writes PHP. professional programmer who writes PHP. That's who I am and that's what I do. I That's who I am and that's what I do. I thought of PHP as a tool I needed to thought of PHP as a tool I needed to smack the computer with until it smack the computer with until it produced web applications I wanted. It produced web applications I wanted. It was very much a means to an end. I was very much a means to an end. I didn't fall in love with PHP. didn't fall in love with PHP. I'm very grateful that it taught me the I'm very grateful that it taught me the basics of programming and I'm very basics of programming and I'm very grateful that it set the bar for the grateful that it set the bar for the economics. But it really wasn't until economics. But it really wasn't until Ruby that I started thinking of myself Ruby that I started thinking of myself as a programmer. And the way that came as a programmer. And the way that came about was that the first time I ever got about was that the first time I ever got hired as a professional programmer to hired as a professional programmer to write code was actually by Jason write code was actually by Jason Frerieded, my business partner still. Frerieded, my business partner still. All the way back in 2001, All the way back in 2001, I had been working on these gaming I had been working on these gaming websites in PHP for essentially 18 websites in PHP for essentially 18 months at that point. No one had been months at that point. No one had been paying me to do code in that regard. And paying me to do code in that regard. And I connect with Jason Freed over an email I connect with Jason Freed over an email sent from Copenhagen, Denmark to sent from Copenhagen, Denmark to Chicago, Illinois to a person who didn't Chicago, Illinois to a person who didn't know who I was. I was just offering know who I was. I was just offering solicited advice. Jason had asked a solicited advice. Jason had asked a question on the internet and I had sent question on the internet and I had sent him the answer and he was asking in PHP him the answer and he was asking in PHP and I'd sent him the answer to that and I'd sent him the answer to that question and we started talking and then question and we started talking and then we started working which by the way is a we started working which by the way is a miracle of what the internet can allow. miracle of what the internet can allow. How can a kid in Copenhagen who's never How can a kid in Copenhagen who's never met this guy in Chicago connect just met this guy in Chicago connect just over email and start working together over email and start working together and by the way we're still working and by the way we're still working together now 24 years later that's together now 24 years later that's incredible but we started working incredible but we started working together and we started working together together and we started working together on some client projects Jason would do on some client projects Jason would do the design 37 signals would do the the design 37 signals would do the design I would bring the programming PHP design I would bring the programming PHP and after we worked on I think two or and after we worked on I think two or three client projects together in PHP three client projects together in PHP we kept we kept we kept hitting the same problem that whenever hitting the same problem that whenever you work with a client, you start that you work with a client, you start that project off an email. Oh yeah, let's project off an email. Oh yeah, let's work together. Here's what we're work together. Here's what we're building and you start trading more and building and you start trading more and more emails and before a few weeks have more emails and before a few weeks have passed, you got to add someone to the passed, you got to add someone to the project. They don't have the emails. project. They don't have the emails. They don't have the context. You send They don't have the context. You send where's the latest file? Oh, I've where's the latest file? Oh, I've uploaded on the FTP. It's like final uploaded on the FTP. It's like final final V6 2.0, right? That's the one to final V6 2.0, right? That's the one to get. It's just a mess, a beautiful mess. get. It's just a mess, a beautiful mess. in some ways a mess that still runs the in some ways a mess that still runs the vast majority of projects to this day. vast majority of projects to this day. Email is the lowest common denominator. Email is the lowest common denominator. That's wonderful. But we had dropped the That's wonderful. But we had dropped the ball a couple times in serious ways with ball a couple times in serious ways with customers and we thought we can do customers and we thought we can do better. We know how to make web better. We know how to make web applications. Can't we just make a applications. Can't we just make a system that's better than email for system that's better than email for managing projects? It can't be that managing projects? It can't be that hard. We've been doing blogs. We've been hard. We've been doing blogs. We've been doing to-do list. Let's put some of doing to-do list. Let's put some of these things together and just make a these things together and just make a system where everything that anyone system where everything that anyone involved in the project needs is on one involved in the project needs is on one page. And it has to be simple enough page. And it has to be simple enough that I'm not going to run a seminar that I'm not going to run a seminar teaching you how to use the system. I'm teaching you how to use the system. I'm just going to give you the login code. just going to give you the login code. You're going to jump into it. So that's You're going to jump into it. So that's base camp. base camp. base camp. &gt;&gt; And when we started working on base &gt;&gt; And when we started working on base camp, camp, camp, I for the first time in the experience I I for the first time in the experience I had with Jason had the freedom of had with Jason had the freedom of technology choice. There was no client technology choice. There was no client telling me, "Yeah, PHP, that sounds telling me, "Yeah, PHP, that sounds good. We know PHP. Can you build it in good. We know PHP. Can you build it in PHP?" I had free reigns. PHP?" I had free reigns. &gt;&gt; And at that time, I'd been reading uh IE &gt;&gt; And at that time, I'd been reading uh IE magazine magazine magazine &gt;&gt; and a couple of other magazines back &gt;&gt; and a couple of other magazines back from the early 2000s where Dave Thomas from the early 2000s where Dave Thomas and Martin Fowler had been writing about and Martin Fowler had been writing about programming patterns and how to write programming patterns and how to write better code. And these two guys in better code. And these two guys in particular were both using Ruby to particular were both using Ruby to explain their concepts because Ruby explain their concepts because Ruby looked like pseudo code. looked like pseudo code. &gt;&gt; Whether you were programming in C or &gt;&gt; Whether you were programming in C or Java or PHP, all three constituencies Java or PHP, all three constituencies could understand Ruby because it could understand Ruby because it basically just reads lang English. So basically just reads lang English. So these guys were using Ruby to describe these guys were using Ruby to describe the concepts. And first of all, I would the concepts. And first of all, I would read these articles for just the read these articles for just the concepts they were explaining. And I'd concepts they were explaining. And I'd be like, what is this programming be like, what is this programming language? I mean, I I like the concept language? I mean, I I like the concept you're explaining, but I also want to you're explaining, but I also want to see the programming language. see the programming language. Why haven't I heard of this? So, I Why haven't I heard of this? So, I started looking into Ruby. And I started looking into Ruby. And I realized at that time, Ruby might not be realized at that time, Ruby might not be known by anyone, but it's actually been known by anyone, but it's actually been around for a long time. Matts, the around for a long time. Matts, the Japanese creator of Ruby, had started Japanese creator of Ruby, had started working on Ruby back in 93, before the working on Ruby back in 93, before the internet was even a thing. And here I am internet was even a thing. And here I am in 2003, in 2003, in 2003, 10 years later, picking up what seems 10 years later, picking up what seems like this hidden gem that's just laying like this hidden gem that's just laying in obscurity in plain sight. But Dave in obscurity in plain sight. But Dave Thomas and Martin Fowler, I think, Thomas and Martin Fowler, I think, successfully put me and a handful of successfully put me and a handful of other people on the trail of a other people on the trail of a programming language that hadn't been programming language that hadn't been used much in the West, but could be. So used much in the West, but could be. So I picked up Ruby and I thought this is I picked up Ruby and I thought this is this is very different. First of all, this is very different. First of all, where are all the semicolons? where are all the semicolons? &gt;&gt; I'd been programming in PHP in ASP. I'd &gt;&gt; I'd been programming in PHP in ASP. I'd even done some Pascal. I'd looked at even done some Pascal. I'd looked at some C. There are semicolons everywhere. some C. There are semicolons everywhere. And that was the first thing that struck And that was the first thing that struck me is where are the damn semicolons? And me is where are the damn semicolons? And I started thinking actually why do we I started thinking actually why do we have semicolons in programming? there to have semicolons in programming? there to tell the interpreter that there's a new tell the interpreter that there's a new line of instructions, but I don't need line of instructions, but I don't need him as a human. How? Oh, someone is him as a human. How? Oh, someone is looking out for the human here, not for looking out for the human here, not for the machine. So, that really got me the machine. So, that really got me interested. And then I thought to interested. And then I thought to myself, do you know what? I know PHP myself, do you know what? I know PHP quite well. I'm not an amazing quite well. I'm not an amazing programmer. I haven't been working in programmer. I haven't been working in programming for all that long, programming for all that long, but maybe I can figure it out. I'm going but maybe I can figure it out. I'm going to give myself two weeks. I'm going to to give myself two weeks. I'm going to write a proof of concept where I talk to write a proof of concept where I talk to a database. I pull some records. I a database. I pull some records. I format them a bit and I display them on format them a bit and I display them on an HTML page. Can I figure that out in a an HTML page. Can I figure that out in a couple weeks? It took about one weekend couple weeks? It took about one weekend and I was completely mesmerized. I was and I was completely mesmerized. I was completely mind blown because Ruby completely mind blown because Ruby was made for my brain like a perfect was made for my brain like a perfect tailored glove. by someone I'd never tailored glove. by someone I'd never met. Like, how is this even possible? met. Like, how is this even possible? &gt;&gt; We should say maybe like paint a picture &gt;&gt; We should say maybe like paint a picture of the certain qualities that Ruby has. of the certain qualities that Ruby has. Maybe even compared to PHP. We should Maybe even compared to PHP. We should also say that there's a ridiculous thing also say that there's a ridiculous thing that I'm used to that I forget about that I'm used to that I forget about that there's dollar signs everywhere. that there's dollar signs everywhere. PHP PHP PHP &gt;&gt; there's line noise. That's what I like &gt;&gt; there's line noise. That's what I like to call to call to call &gt;&gt; line noise. Line noise. That's such a &gt;&gt; line noise. Line noise. That's such a beautiful phrase. Yeah. So, there's all beautiful phrase. Yeah. So, there's all these things that look like programs. these things that look like programs. And with Ruby, I mean, there's some And with Ruby, I mean, there's some similarities in Python there. Uh, it similarities in Python there. Uh, it just looks kind of like natural just looks kind of like natural language. You can read it normally. language. You can read it normally. &gt;&gt; Here's a while loop that does a five &gt;&gt; Here's a while loop that does a five iterations. You can literally type the iterations. You can literally type the number five dot. Now, I'm calling a number five dot. Now, I'm calling a method on the number five. By the way, method on the number five. By the way, that's one of the beautiful aspects of that's one of the beautiful aspects of Ruby that primitives like integers are Ruby that primitives like integers are also objects. And you can call five dot also objects. And you can call five dot times times times start brackets. Now you're iterating start brackets. Now you're iterating over the code in that bracket five over the code in that bracket five times. That's it. times. That's it. &gt;&gt; Okay, that's nice. &gt;&gt; Okay, that's nice. &gt;&gt; That's not just nice, that's &gt;&gt; That's not just nice, that's exceptional. There is literally no other exceptional. There is literally no other programming language that I know of that programming language that I know of that has managed to boil away the line noise has managed to boil away the line noise that almost every other programming that almost every other programming language would inject into a five time language would inject into a five time iteration over a block of code to that iteration over a block of code to that extent. extent. extent. &gt;&gt; That's a really nice Well, thank you for &gt;&gt; That's a really nice Well, thank you for giving that example. That's a beautiful giving that example. That's a beautiful example. Wow, I don't think I know a example. Wow, I don't think I know a programming language that does that. programming language that does that. That's really nice. That's really nice. &gt;&gt; Ruby is full of that. And there's So, &gt;&gt; Ruby is full of that. And there's So, let me dive into a couple examples let me dive into a couple examples because I really think it helps paint because I really think it helps paint the picture. And let me preface this by the picture. And let me preface this by saying I actually I like the ethos of saying I actually I like the ethos of Python. I think the Ruby and the Python Python. I think the Ruby and the Python community share a lot of similarities. community share a lot of similarities. They're both dynamic interpreted They're both dynamic interpreted languages. They're both focused on languages. They're both focused on immediiacy and productivity and ease of immediiacy and productivity and ease of use in a bunch of ways, but then they're use in a bunch of ways, but then they're also very different in many other ways. also very different in many other ways. And one of the one ways they're very And one of the one ways they're very different is aesthetically. different is aesthetically. Python to me, I hope I don't offend Python to me, I hope I don't offend people too much. I've said this before, people too much. I've said this before, it's just it's ugly. And it's ugly at it it's just it's ugly. And it's ugly at it in its base because it's full of in its base because it's full of superfluous instructions that are superfluous instructions that are necessary for legacy reasons necessary for legacy reasons of when Guido made Python back in ' 87 of when Guido made Python back in ' 87 that are still here in 2025 and my brain that are still here in 2025 and my brain can't cope with that. Let me give you a can't cope with that. Let me give you a basic example. When you make a class in basic example. When you make a class in Python, the initializer method, the Python, the initializer method, the starting method is defaf. Okay, fair starting method is defaf. Okay, fair enough. That's actually the same as Ruby enough. That's actually the same as Ruby def definition of a method. Then it is def definition of a method. Then it is underscore underscore underscore not one underscore two in it underscore not one underscore two in it underscore underscore. underscore. underscore. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Parentheses start self, &gt;&gt; Parentheses start self, and then the first argument. and then the first argument. &gt;&gt; Yeah, the whole self thing. Yeah. &gt;&gt; Yeah, the whole self thing. Yeah. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; I look at that and go, I'm sorry. I'm &gt;&gt; I look at that and go, I'm sorry. I'm out. I can't do it. out. I can't do it. It's just it's everything about it It's just it's everything about it offends my sensibilities to the core. offends my sensibilities to the core. Here you have the most important method Here you have the most important method that all new objects or classes have to that all new objects or classes have to implement and it is one of the most implement and it is one of the most aesthetically offensive ways of typing aesthetically offensive ways of typing initialize that I've ever seen anywhere. initialize that I've ever seen anywhere. And you guys are okay with this? And you guys are okay with this? &gt;&gt; Yeah, you're making me you know where &gt;&gt; Yeah, you're making me you know where you're like talking about my marriage or you're like talking about my marriage or something like this and and I'm now something like this and and I'm now realizing I've been in a toxic realizing I've been in a toxic relationship all along. Yeah, I just get relationship all along. Yeah, I just get used to it. That to me, by the way, was used to it. That to me, by the way, was the magic of Ruby. It opened my eyes to the magic of Ruby. It opened my eyes to how beautiful programs could be. I how beautiful programs could be. I didn't know I'd been working in ASP. I'd didn't know I'd been working in ASP. I'd been working in PHP. I didn't even have been working in PHP. I didn't even have the concept that aesthetics, beautiful the concept that aesthetics, beautiful code, was something we could optimize code, was something we could optimize for, that something we could pursue. And for, that something we could pursue. And even more than that, that we could even more than that, that we could pursue it above other objectives. That pursue it above other objectives. That Ruby is, as beautiful as it is, is not Ruby is, as beautiful as it is, is not an accident and it's not easy. Ruby an accident and it's not easy. Ruby itself is implemented in C. It's very itself is implemented in C. It's very difficult to parse Ruby code because difficult to parse Ruby code because Ruby is written for humans and humans Ruby is written for humans and humans are messy creatures. They like things in are messy creatures. They like things in just the right way. I can't fully just the right way. I can't fully explain why the underscore_initers explain why the underscore_initers make me repulse, but it does. And when I make me repulse, but it does. And when I look at the Ruby alternative, it's look at the Ruby alternative, it's really instructive. So, it's defaf. same really instructive. So, it's defaf. same part df space part df space initialize initialize initialize parenthesis not even parenthesis if you parenthesis not even parenthesis if you don't need to call it within the don't need to call it within the arguments there's not even a parenthesis arguments there's not even a parenthesis that in itself is actually also a major that in itself is actually also a major part if the human doesn't need the part if the human doesn't need the additional characters we're not just additional characters we're not just going to put them in because it'd be going to put them in because it'd be nicer to parse for the computer we're nicer to parse for the computer we're going to get rid of the semicolons we're going to get rid of the semicolons we're going to get rid of the parenthesis going to get rid of the parenthesis we're going to get rid of the we're going to get rid of the underscores we're going to get rid of underscores we're going to get rid of all that ugliness all the line noise and all that ugliness all the line noise and boil it down to its pure essentials boil it down to its pure essentials and at the same time we're not going to and at the same time we're not going to abbreviate. This is a key difference in abbreviate. This is a key difference in the aesthetics between Ruby and Python the aesthetics between Ruby and Python as well. In it is shorter type. It's as well. In it is shorter type. It's only five characters. Initialize is a only five characters. Initialize is a lot longer, but it looks a lot better. lot longer, but it looks a lot better. And you don't type it very often. So, And you don't type it very often. So, you should look at something pretty. If you should look at something pretty. If you don't have to do it all the time, you don't have to do it all the time, it's okay that it's long. Those kinds of it's okay that it's long. Those kinds of aesthetic evaluations are rife all over aesthetic evaluations are rife all over the Ruby language. But let me give you the Ruby language. But let me give you an even better example. The if an even better example. The if conditional, that's the bedrock of all conditional, that's the bedrock of all programming languages. They have the if programming languages. They have the if conditional. If you take most conditional. If you take most programming languages, they all have if. programming languages, they all have if. That's basically the same in almost That's basically the same in almost every language. Space start parenthesis. every language. Space start parenthesis. We all do that. And then you have um We all do that. And then you have um perhaps let's say you're calling a perhaps let's say you're calling a object called uh user object called uh user dot is admin close parenthesis close dot is admin close parenthesis close parenthesis start brackets parenthesis start brackets and here's what we're going to do if the and here's what we're going to do if the user is an admin. Right? That would be a user is an admin. Right? That would be a normal programming language. Ruby normal programming language. Ruby doesn't do it like that. Ruby boils doesn't do it like that. Ruby boils almost all of it away. We start with the almost all of it away. We start with the if. Okay, that's the same. No if. Okay, that's the same. No parenthesis necessary because there's no parenthesis necessary because there's no ambiguity for the human to distinguish ambiguity for the human to distinguish that the next part is just a single that the next part is just a single statement. So you do if space user dot statement. So you do if space user dot admin question mark. admin question mark. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; No open brackets, no parentheses, no &gt;&gt; No open brackets, no parentheses, no nothing. Next open line here's nothing. Next open line here's unconditional. That unconditional. That unconditional. That question mark means nothing to the question mark means nothing to the computer, computer, computer, but it means something to the human. but it means something to the human. Ruby put in the predicate method style Ruby put in the predicate method style purely as a communication tool between purely as a communication tool between humans. It's actually more work for the humans. It's actually more work for the interpreter to be able to see that this interpreter to be able to see that this question mark is there. Why is this question mark is there. Why is this question mark in here? Because it just question mark in here? Because it just reads so nicely. if user admin question reads so nicely. if user admin question mark. That's a very human phrase. But it mark. That's a very human phrase. But it gets better. You can turn this around. gets better. You can turn this around. You can have your statement you want to You can have your statement you want to execute before the conditional. You can execute before the conditional. You can do userupgrade. do userupgrade. do userupgrade. Say you're calling an upgrade method on Say you're calling an upgrade method on a user a user a user space if space user.admin question mark. space if space user.admin question mark. We do the thing if the thing is true. We do the thing if the thing is true. Instead of saying if the thing is true, Instead of saying if the thing is true, do the thing. But it gets even better. do the thing. But it gets even better. This is why I love this example with the This is why I love this example with the conditional because you can keep diving conditional because you can keep diving into it. So let's flip it around. into it. So let's flip it around. &gt;&gt; User.downgrade &gt;&gt; User.downgrade &gt;&gt; User.downgrade if exclamation point not if exclamation point not user.admin. Right? That'd be a typical user.admin. Right? That'd be a typical way of writing it. Ruby goes, that way of writing it. Ruby goes, that exclamation point is light noise. Why do exclamation point is light noise. Why do we have if and then an exclamation we have if and then an exclamation point? That's ugly. We could do point? That's ugly. We could do user.downgrade user.downgrade user.downgrade unless unless unless useradmin useradmin useradmin question mark. That to me is an question mark. That to me is an encapsulation of the incredible encapsulation of the incredible beauty that Ruby affords the programmer beauty that Ruby affords the programmer through ambiguity through ambiguity through ambiguity that is only to serve the human reader that is only to serve the human reader and writer. All of these statements and writer. All of these statements we've just discussed, they're the same we've just discussed, they're the same for the computer. It'll compile down to for the computer. It'll compile down to the same C code. They'll compile down to the same C code. They'll compile down to the same assembly code, it makes no the same assembly code, it makes no difference whatsoever. In fact, it just difference whatsoever. In fact, it just makes it harder to write an interpreter. makes it harder to write an interpreter. But for the human who gets to choose But for the human who gets to choose whether the statement comes before the whether the statement comes before the conditional or the predicate method has, conditional or the predicate method has, it's just incredible. It reads like it's just incredible. It reads like poetry at some point. It's it's also poetry at some point. It's it's also incredible that you know, one language incredible that you know, one language designer is creating that. you know, designer is creating that. you know, Guido and Ross also it's like one person Guido and Ross also it's like one person gets to make these extremely difficult gets to make these extremely difficult decision because it's you have to think decision because it's you have to think about how does that all get parsed and about how does that all get parsed and you have to think about the thousands if you have to think about the thousands if it's a popular language the millions of it's a popular language the millions of people that end up using this and what people that end up using this and what they feel with that question mark on the they feel with that question mark on the for the if statement what what does that for the if statement what what does that feel like for feel like for &gt;&gt; that's what Matt's thought about because &gt;&gt; that's what Matt's thought about because he started his entire mission off a he started his entire mission off a different premise and almost every different premise and almost every programming language designer that I'd programming language designer that I'd heard at least articulate their vision. heard at least articulate their vision. That his number one goal was programmer That his number one goal was programmer happiness. That his number one goal was happiness. That his number one goal was the affordances that would allow the affordances that would allow programmers to articulate code in ways programmers to articulate code in ways that not just executed correctly, that not just executed correctly, but were a joy to write and were a joy but were a joy to write and were a joy to read. And that vision is based on a to read. And that vision is based on a fundamentally different view of fundamentally different view of humanity. There's no greater contrast humanity. There's no greater contrast between Matts and James Gosling, the between Matts and James Gosling, the designer of Java. I once listened to designer of Java. I once listened to James talk about the design of Java. Why James talk about the design of Java. Why was it the way it was? Why was it so was it the way it was? Why was it so rigid? And he was very blunt about it, rigid? And he was very blunt about it, which I, by the way, I really which I, by the way, I really appreciate. And I think Gotham has done appreciate. And I think Gotham has done a tremendous job with Java. But his view a tremendous job with Java. But his view of humanity is rather dark. His view of of humanity is rather dark. His view of humanity was programmers at the average humanity was programmers at the average are stupid creatures. are stupid creatures. They cannot be trusted They cannot be trusted with sophisticated programming languages with sophisticated programming languages because they're going to shoot their because they're going to shoot their foot off or their hand off. And that foot off or their hand off. And that would be kind of inconvenient to the would be kind of inconvenient to the regional development office of a regional development office of a mid-tier insurance company writing code mid-tier insurance company writing code that has to last for 20 years. that has to last for 20 years. Now, it's actually a very Thomas Saul Now, it's actually a very Thomas Saul view of constrained capacity in humans view of constrained capacity in humans that I've come to appreciate much later that I've come to appreciate much later in life. But it's also a very depressing in life. But it's also a very depressing view of programmers that there are just view of programmers that there are just certain programmers who are too dumb to certain programmers who are too dumb to appreciate appreciate appreciate code poetry. They're too ignorant to code poetry. They're too ignorant to learn how to write it. Well, we need to learn how to write it. Well, we need to give them a sandbox where they just give them a sandbox where they just won't hurt themselves too much. won't hurt themselves too much. &gt;&gt; Matt's went the complete opposite &gt;&gt; Matt's went the complete opposite direction. He believes in humanity. He direction. He believes in humanity. He believes in the unlimited capacity of believes in the unlimited capacity of programmers to learn and become better. programmers to learn and become better. So much so So much so that he's willing to put the stranger at that he's willing to put the stranger at his own level. This is the second part I his own level. This is the second part I truly appreciate about Ruby. Ruby allows truly appreciate about Ruby. Ruby allows you to extend base classes. You know how you to extend base classes. You know how we just talked about five dot times is a we just talked about five dot times is a way to iterate over um a statement five way to iterate over um a statement five times. That five is obviously a base times. That five is obviously a base class. It's a number. Do you know what class. It's a number. Do you know what you can add your own methods to that? I you can add your own methods to that? I did extensively in Rails. We have did extensively in Rails. We have something called active support which is something called active support which is essentially my dialect of Ruby for essentially my dialect of Ruby for programming web applications. programming web applications. And I'll give you one example. I've And I'll give you one example. I've added a method called days to the added a method called days to the number. So if you do 5 days, you get number. So if you do 5 days, you get five days in seconds because seconds is five days in seconds because seconds is the way we set cash expiration times and the way we set cash expiration times and other things like that. So you can say other things like that. So you can say cash expires in 5 days. cash expires in 5 days. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; And you're going to get whatever 5* &gt;&gt; And you're going to get whatever 5* 24 * 60 * 60 is or whatever the math is, 24 * 60 * 60 is or whatever the math is, right? very humanly readable. In a novel right? very humanly readable. In a novel programming language, you would type out programming language, you would type out the seconds and then you would have a the seconds and then you would have a little comment above it saying this little comment above it saying this represent five days. In Ruby, you get to represent five days. In Ruby, you get to write five days. But even better than write five days. But even better than that, Matts didn't come up with it. that, Matts didn't come up with it. Matts didn't need the five days. I Matts didn't need the five days. I needed that because I needed to expire needed that because I needed to expire caches. I was allowed by Matts to extend caches. I was allowed by Matts to extend his story with my own chapters his story with my own chapters on equal footing such that a reader of on equal footing such that a reader of Ruby could not tell the difference Ruby could not tell the difference between the code Mattz wrote and the between the code Mattz wrote and the code that I wrote. He trusted me as a code that I wrote. He trusted me as a complete stranger from Denmark who had complete stranger from Denmark who had never met to mess with his beautiful never met to mess with his beautiful story. That level of trust is story. That level of trust is essentially unheard of. I know there are essentially unheard of. I know there are other programming languages that allow other programming languages that allow things with macros and so forth, but things with macros and so forth, but none do it in a way like Ruby does it. none do it in a way like Ruby does it. None does it with an articulated vision None does it with an articulated vision of humanity, a trust in humanity like of humanity, a trust in humanity like Matts does. Matts does. Matts does. That is the opposite end of the spectrum That is the opposite end of the spectrum of Java. of Java. of Java. &gt;&gt; Yeah. I mean, for my aesthetic &gt;&gt; Yeah. I mean, for my aesthetic sensibilities, just the way you describe sensibilities, just the way you describe five days, that's really pleasant to me. five days, that's really pleasant to me. like I could see myself sitting alone like I could see myself sitting alone sleepdeprived and just writing that it's sleepdeprived and just writing that it's just is an easy thing you can write it just is an easy thing you can write it in a long way with a comment you can you in a long way with a comment you can you can write a multiple lines you could do can write a multiple lines you could do and now with AI I'm sure it's going to and now with AI I'm sure it's going to generate it correctly but there's generate it correctly but there's something really pleasant about the something really pleasant about the simplicity of that I'm not sure what simplicity of that I'm not sure what that is but you're right there is a good that is but you're right there is a good feeling there feeling there feeling there and I'm sure we'll talk about happiness and I'm sure we'll talk about happiness from all kinds of philosophical angles from all kinds of philosophical angles but you know that is what happiness is but you know that is what happiness is made of. That little made of. That little &gt;&gt; exactly &gt;&gt; exactly &gt;&gt; exactly &gt;&gt; good feeling there. &gt;&gt; good feeling there. &gt;&gt; It's the good feeling that come out of a &gt;&gt; It's the good feeling that come out of a concept compressed to its pure essence. concept compressed to its pure essence. There's nothing you can take away from There's nothing you can take away from that statement that's superfluous. that statement that's superfluous. &gt;&gt; But see, I I also want to push back a &gt;&gt; But see, I I also want to push back a little bit because it's not cuz I also little bit because it's not cuz I also program in Pearl a bunch just just to be program in Pearl a bunch just just to be cool. Um so like it's not all about cool. Um so like it's not all about compression. No, you can compress it too compression. No, you can compress it too far. Pearl Gulf is a thing where you can far. Pearl Gulf is a thing where you can turn programs into something that's turn programs into something that's unreadable for humans. Now, the great unreadable for humans. Now, the great thing about Pearl was that it came out thing about Pearl was that it came out before Ruby. Mattz was a great student before Ruby. Mattz was a great student of Wall, was a great student of Pearl, of Wall, was a great student of Pearl, was a great student of Python and Small was a great student of Python and Small Talk and Lisp. He took inspiration from Talk and Lisp. He took inspiration from all of these prior attempts at creating all of these prior attempts at creating good programming languages and really good programming languages and really edited down the very best bits into edited down the very best bits into this. So he was able to learn from his this. So he was able to learn from his lessons. But what I found incredible lessons. But what I found incredible about Ruby is that here we are 2025. about Ruby is that here we are 2025. Ruby has been worked on for over 30 Ruby has been worked on for over 30 years and essentially the first draft is years and essentially the first draft is 90% of what we're still using. There was 90% of what we're still using. There was almost a sense of divine inspiration almost a sense of divine inspiration possible in wherever Matts was writing possible in wherever Matts was writing that initial version of Ruby that that initial version of Ruby that transcended time to such a degree that transcended time to such a degree that no one has still even begun to reach it. no one has still even begun to reach it. This is the other thing I always find This is the other thing I always find fascinating. I generally believe in the fascinating. I generally believe in the efficient market theory that if someone efficient market theory that if someone comes up with a better mousetrap or comes up with a better mousetrap or better idea, others will eventually copy better idea, others will eventually copy them to such an extent that perhaps the them to such an extent that perhaps the original mousetrap is no longer even original mousetrap is no longer even remembered. No one has been able to copy remembered. No one has been able to copy that essence of Ruby. They borrowed that essence of Ruby. They borrowed elements and that's totally fine, but elements and that's totally fine, but Ruby still stands taller than everyone Ruby still stands taller than everyone else on these metrics on this trust in else on these metrics on this trust in humanity and programmers. humanity and programmers. &gt;&gt; And we should also say like you know uh &gt;&gt; And we should also say like you know uh maybe the perfect programming language maybe the perfect programming language that that metric and then there's the that that metric and then there's the successful language and those are often successful language and those are often different. There there's something different. There there's something wonderful about the Brendan Ike story of wonderful about the Brendan Ike story of creating JavaScript. creating JavaScript. creating JavaScript. &gt;&gt; Yes. of of there's something truly &gt;&gt; Yes. of of there's something truly beautiful uh about the way JavaScript beautiful uh about the way JavaScript took over the world. I've uh recently took over the world. I've uh recently got to visit the Amazon jungle and just got to visit the Amazon jungle and just one of my favorite things to do is just one of my favorite things to do is just to watch the ants take over anything to watch the ants take over anything everything and it's just like it's a everything and it's just like it's a nice distributed system. It's a messy nice distributed system. It's a messy thing that doesn't seem to be order but thing that doesn't seem to be order but it just works and the machinery of it it just works and the machinery of it &gt;&gt; worse is better. I mean that's actually &gt;&gt; worse is better. I mean that's actually the name of a pattern for in in software the name of a pattern for in in software development and other ways of how do is development and other ways of how do is the pattern of Linux. Linux was the pattern of Linux. Linux was quantifiably worse than I think it was quantifiably worse than I think it was minix at the time. Other ways of it that minix at the time. Other ways of it that were more cathedral were more cathedral &gt;&gt; less bizarre and is still one that &gt;&gt; less bizarre and is still one that there's something to it that the there's something to it that the imperfections can help something go imperfections can help something go forward. It's actually a trick I've forward. It's actually a trick I've studied to the degree that I now studied to the degree that I now incorporate it in almost all open source incorporate it in almost all open source that I do. I make sure that when I that I do. I make sure that when I release the first version of any new release the first version of any new thing I work on, it's a little broken. thing I work on, it's a little broken. &gt;&gt; It's a little busted in ways that invite &gt;&gt; It's a little busted in ways that invite people to come in and help me cuz people to come in and help me cuz there's no easier way to get the there's no easier way to get the collaboration of other programmers than collaboration of other programmers than to put something out that they know how to put something out that they know how to fix and improve. to fix and improve. &gt;&gt; Yeah, that's awesome. But Ruby is &gt;&gt; Yeah, that's awesome. But Ruby is somehow or was at least a little bit somehow or was at least a little bit different in that regard. Not in all different in that regard. Not in all regards. Matt's got the ethos of the regards. Matt's got the ethos of the language, the design of the language language, the design of the language just right. But the first versions of just right. But the first versions of Ruby were terribly slow. It's taken, I Ruby were terribly slow. It's taken, I mean, hundreds of man years to get Ruby mean, hundreds of man years to get Ruby to be both this beautiful yet also to be both this beautiful yet also highly efficient and really fast. And we highly efficient and really fast. And we should say that the thing that made you should say that the thing that made you fall in love with this particular fall in love with this particular programming language is meta programming language is meta programming. programming. programming. &gt;&gt; Yes. So that takes all of these elements &gt;&gt; Yes. So that takes all of these elements we've just talked about and turned them we've just talked about and turned them up to 11. I'll explain metaroming real up to 11. I'll explain metaroming real soon. soon. soon. &gt;&gt; Metar programming is essentially a &gt;&gt; Metar programming is essentially a version of the five days. You get to add version of the five days. You get to add keywords to the language. keywords to the language. &gt;&gt; Active record is the part of Rails that &gt;&gt; Active record is the part of Rails that communicates with the database. This is communicates with the database. This is a system where every table in the a system where every table in the database is represented by a class. So database is represented by a class. So if we take the user example again you do if we take the user example again you do class user class user class user um descends from active record base and um descends from active record base and then the first line you can write is then the first line you can write is this I want my users to have many posts this I want my users to have many posts or have many comments. Let's do that. or have many comments. Let's do that. We're making some system where users can We're making some system where users can make comments. The very next line is has make comments. The very next line is has underscore many space underscore many space colon comments. Now you've set up a colon comments. Now you've set up a dependency between users and comments dependency between users and comments that will give you a whole host of that will give you a whole host of access and factory methods for users to access and factory methods for users to be able to own comments, to create be able to own comments, to create comments, to update comments. In that comments, to update comments. In that line alone has many looks like a line alone has many looks like a keyword. It looks like it's part of the keyword. It looks like it's part of the Ruby language. That's metaroming. when Ruby language. That's metaroming. when Rails is able to add these elements to Rails is able to add these elements to how you define a class and then that how you define a class and then that runs code that adds a bunch of methods runs code that adds a bunch of methods to the user class. That's metaroming. to the user class. That's metaroming. And when metaroming is used in this way, And when metaroming is used in this way, we call it domain specific languages. we call it domain specific languages. You take a generic language like Ruby You take a generic language like Ruby and you tailor it to a certain domain and you tailor it to a certain domain like describing like describing like describing relationships in a database at a object relationships in a database at a object level. And this is one of those early level. And this is one of those early examples where you can do um user has examples where you can do um user has many comments belongs_2 many comments belongs_2 space colon account. Now you've set up a space colon account. Now you've set up a uh onetoone relationship. Before we had uh onetoone relationship. Before we had a one to many relationship. Rails is a one to many relationship. Rails is rife with all these kinds of domain rife with all these kinds of domain specific languages where at sometimes it specific languages where at sometimes it doesn't even look like Ruby. You can't doesn't even look like Ruby. You can't identify Ruby keywords. You can just identify Ruby keywords. You can just identify what looks like keywords in its identify what looks like keywords in its own programming language. Now again, I own programming language. Now again, I know that lisp and others also do this know that lisp and others also do this stuff. They just do it with the maximum stuff. They just do it with the maximum amount of line noise that can ever be amount of line noise that can ever be crammed in to a programming language. crammed in to a programming language. And Ruby does it at a level where you And Ruby does it at a level where you cannot tell my metarogramming from cannot tell my metarogramming from Matt's keywords and with zero line Matt's keywords and with zero line noise. noise. noise. &gt;&gt; Yeah, I should say that my first love &gt;&gt; Yeah, I should say that my first love was lisp. So there's a slow tear that was lisp. So there's a slow tear that you can't see. you can't see. &gt;&gt; I've actually never written any real &gt;&gt; I've actually never written any real lisp myself. lisp myself. lisp myself. &gt;&gt; Well, how can you judge it so harshly &gt;&gt; Well, how can you judge it so harshly then? then? then? &gt;&gt; Because I have two eyes and I can look &gt;&gt; Because I have two eyes and I can look at code and my aesthetic sensibilities at code and my aesthetic sensibilities forbid me to even go much further, which forbid me to even go much further, which is a limitation. I know I should is a limitation. I know I should actually dive into Lisp because I found actually dive into Lisp because I found that I've learned a lot just diving into that I've learned a lot just diving into maybe I'm insulting Lisp again here but maybe I'm insulting Lisp again here but the past of programming languages with the past of programming languages with small talk for example I think small small talk for example I think small talk is a incredible talk is a incredible experiment that also worked but isn't experiment that also worked but isn't suitable for today's programming suitable for today's programming environments. environments. environments. &gt;&gt; I love that we're talking about Ruby so &gt;&gt; I love that we're talking about Ruby so much and what beautiful code is what a much and what beautiful code is what a beautiful programming language is. So beautiful programming language is. So one of the things one of the things that is I think implied maybe you made that is I think implied maybe you made explicit in your descriptions there is explicit in your descriptions there is that uh Ruby is dynamic typing versus that uh Ruby is dynamic typing versus strict typing and you have been not just strict typing and you have been not just saying that it's a nice thing but that saying that it's a nice thing but that you will defend dynamic typing to the you will defend dynamic typing to the death like that freedom is a powerful death like that freedom is a powerful freedom to preserve it's the essence of freedom to preserve it's the essence of what makes Ruby Ruby this is why I don't what makes Ruby Ruby this is why I don't fully understand when people call for fully understand when people call for Ruby to static typing because to me is Ruby to static typing because to me is the bedrock of what this is. Why would the bedrock of what this is. Why would you want to turn one of the most you want to turn one of the most beautiful languages into something far beautiful languages into something far uglier? This is one of my primary uglier? This is one of my primary objections to static typing. It's not objections to static typing. It's not just that it limits you in certain ways. just that it limits you in certain ways. It makes metaroming harder. I write a It makes metaroming harder. I write a bunch of meta programming. I've seen bunch of meta programming. I've seen what it takes to do meta programming in what it takes to do meta programming in Typescript. That was actually one of the Typescript. That was actually one of the things that just really sent me on a things that just really sent me on a tear of getting meta or getting tear of getting meta or getting Typescript out of some of the projects Typescript out of some of the projects that I'm involved with. We pulled that I'm involved with. We pulled TypeScript out of um Turbo, one of the TypeScript out of um Turbo, one of the front-end frameworks that we have front-end frameworks that we have because I tried to write some meta because I tried to write some meta programming in Typescript and I was just programming in Typescript and I was just infuriated. I don't want that infuriated. I don't want that experience, experience, experience, but I also don't want it from an but I also don't want it from an aesthetic point of view. I hate aesthetic point of view. I hate repetition. We've just talked about how repetition. We've just talked about how much I love that Ruby boils all of these much I love that Ruby boils all of these expressions down to its essence. You expressions down to its essence. You can't remove one dot. You can't remove can't remove one dot. You can't remove one character without losing something. one character without losing something. This moment you go for static typing This moment you go for static typing that you declare at least I know there that you declare at least I know there are ways to do implied typing and so are ways to do implied typing and so forth. But let's just take the forth. But let's just take the stereotypical case of the of a example. stereotypical case of the of a example. For example, um, capital U user. I'm For example, um, capital U user. I'm declaring the type of the variable declaring the type of the variable lowerase user. I'm now naming my lowerase user. I'm now naming my variable equals uppercase user or new variable equals uppercase user or new uppercase user. I've repeated user three uppercase user. I've repeated user three times. I don't have time for this. I times. I don't have time for this. I don't have sensibilities for this. I don't have sensibilities for this. I don't want my Ruby polluted with this. don't want my Ruby polluted with this. Now, I understand all the arguments for Now, I understand all the arguments for why people like static typing. One of why people like static typing. One of the primary arguments is that it makes the primary arguments is that it makes tooling easier. It makes it easier to do tooling easier. It makes it easier to do autocomplete in editors, for example. It autocomplete in editors, for example. It makes it easier to find certain kinds of makes it easier to find certain kinds of bugs because maybe you're calling bugs because maybe you're calling methods that don't exist on an object methods that don't exist on an object and the editor can actually catch that and the editor can actually catch that bug before you even run it. I don't bug before you even run it. I don't care. First of all, I don't write code care. First of all, I don't write code with tools. I write them with text with tools. I write them with text editors. I chisel them out of the screen editors. I chisel them out of the screen with my bare hands. I don't with my bare hands. I don't autocomplete. And this is why I love autocomplete. And this is why I love Ruby so much. And this is why I continue Ruby so much. And this is why I continue to be in love with the text editor to be in love with the text editor rather than the IDE. rather than the IDE. &gt;&gt; I don't want an IDE. I want my fingers &gt;&gt; I don't want an IDE. I want my fingers to have to individually type out every to have to individually type out every element of it because it will force me element of it because it will force me &gt;&gt; to stay in the world where Ruby is &gt;&gt; to stay in the world where Ruby is beautiful. Because as soon as it gets beautiful. Because as soon as it gets easy to type a lot of boilerplate, well, easy to type a lot of boilerplate, well, guess what? You're gonna have a lot of guess what? You're gonna have a lot of boilerplate. Every single language boilerplate. Every single language basically that has great tooling support basically that has great tooling support has a much higher tolerance for boiler has a much higher tolerance for boiler plate because the thinking is, well, plate because the thinking is, well, you're not typing it anyway. You're just you're not typing it anyway. You're just autocompleting it. I don't want that at autocompleting it. I don't want that at all. I want something where all. I want something where the fabric I'm working in is just a text the fabric I'm working in is just a text file. There's nothing else to it. So, file. There's nothing else to it. So, these things play together. There's the these things play together. There's the aesthetic part, there's the tooling aesthetic part, there's the tooling part, there's the meta programming part, part, there's the meta programming part, there's the fact that Ruby's there's the fact that Ruby's ethos of duck typing, I don't know if ethos of duck typing, I don't know if you've heard that term before, you've heard that term before, &gt;&gt; it's essentially not about can I call &gt;&gt; it's essentially not about can I call this method if a object is of a certain this method if a object is of a certain class. It is can I call this method if class. It is can I call this method if the method responds. It's very out of the method responds. It's very out of small talk in that regard. you don't small talk in that regard. you don't actually check of whether that class has actually check of whether that class has the method which allows you to the method which allows you to dynamically add methods at runtime and dynamically add methods at runtime and do all sorts of really interesting do all sorts of really interesting things that underpin all the beautiful things that underpin all the beautiful meta programming that we do in Ruby. I meta programming that we do in Ruby. I don't want to lose any of that and I don't want to lose any of that and I don't care for the benefits. One of the don't care for the benefits. One of the benefits I've se touted over and over benefits I've se touted over and over again is that it's much easier to write again is that it's much easier to write correct software. You're going to have correct software. You're going to have fewer bugs. You're going to have less fewer bugs. You're going to have less null pointer exceptions. and less all of null pointer exceptions. and less all of this stuff. Yeah, I don't have any of this stuff. Yeah, I don't have any of that. It is just not something that that. It is just not something that occurs in my standard mode of operation. occurs in my standard mode of operation. I'm not saying I don't have bugs. Of I'm not saying I don't have bugs. Of course I do. But I catch those bugs with course I do. But I catch those bugs with unit testing, with integration testing. unit testing, with integration testing. Those are the kinds of Those are the kinds of precautions that'll catch logical bugs, precautions that'll catch logical bugs, things that compile but are wrong along things that compile but are wrong along with the uncompilable stuff. So, I've with the uncompilable stuff. So, I've never been drawn into this world. And never been drawn into this world. And part of it is because I work on a part of it is because I work on a certain class of systems. I fully accept certain class of systems. I fully accept that. If you're writing systems that that. If you're writing systems that have 5, 10, 50 million lines of code have 5, 10, 50 million lines of code with hundreds, thousands, or tens of with hundreds, thousands, or tens of thousands of programmers, I fully accept thousands of programmers, I fully accept that you need different methods. What I that you need different methods. What I object to is the idea that what's right object to is the idea that what's right for a code base of 10 million lines of for a code base of 10 million lines of code with a 100,000 programmers working code with a 100,000 programmers working on it is also the same thing I should be on it is also the same thing I should be using in my bedroom to create base camp using in my bedroom to create base camp because I'm just a single individual. because I'm just a single individual. That's complete nonsense. In the real That's complete nonsense. In the real world, we would know that that makes no world, we would know that that makes no sense at all. That you don't, I don't sense at all. That you don't, I don't know, use your Pagani to go pick up know, use your Pagani to go pick up groceries at Costco. It's a bad vehicle groceries at Costco. It's a bad vehicle for that. It just doesn't have the for that. It just doesn't have the space. You don't want to muddy the space. You don't want to muddy the beautiful seats. You don't want to do beautiful seats. You don't want to do any of those things. We know that any of those things. We know that certain things that are very good in certain things that are very good in certain domains don't apply to all in certain domains don't apply to all in programming languages. It seems like we programming languages. It seems like we forget that. Now, to be fair, I also had forget that. Now, to be fair, I also had a little bit perhaps of a reputation of a little bit perhaps of a reputation of forgetting that. When I first learned forgetting that. When I first learned Ruby, I was so head over heels in love Ruby, I was so head over heels in love with this programming language that I with this programming language that I almost found it unconceivable that almost found it unconceivable that anyone would choose any other anyone would choose any other programming language at all to write web programming language at all to write web applications. And I kind of engaged the applications. And I kind of engaged the evangelism of Ruby on Rails in that evangelism of Ruby on Rails in that spirit as a crusade as I just need to spirit as a crusade as I just need to teach you the gospel. I just need to teach you the gospel. I just need to show you this conditional code that we show you this conditional code that we just talked about and you will convert just talked about and you will convert at the point of a sharp argument. Now I at the point of a sharp argument. Now I learned that's not the way. And part of learned that's not the way. And part of the reason it's not the way is that the reason it's not the way is that programmers think differently. Our programmers think differently. Our brains are configured differently. My brains are configured differently. My brain is configured perfectly for Ruby, brain is configured perfectly for Ruby, perfectly for a dynamically perfectly for a dynamically ducttyped language that I can chisel ducttyped language that I can chisel code out of a text editor with. And code out of a text editor with. And other people need the security of an other people need the security of an IDE. They want the security of classes IDE. They want the security of classes that won't compile unless you call the that won't compile unless you call the methods on it. I have come to accept methods on it. I have come to accept that, but most programmers don't. that, but most programmers don't. they're still stuck in essentially I they're still stuck in essentially I like static typing therefore static like static typing therefore static typing is the only way to create typing is the only way to create reliable correct systems which is just reliable correct systems which is just such a mindblowing such a mindblowing to be blunt idiotic thing to say in the to be blunt idiotic thing to say in the face of evidence mountains of evidence face of evidence mountains of evidence to the contrary this is one of the to the contrary this is one of the reasons I'm so in love with Shopify as reasons I'm so in love with Shopify as the flagship application for Ruby and the flagship application for Ruby and Rails Shopify exists at a scale that Rails Shopify exists at a scale that most programmers will never touch. On most programmers will never touch. On Black Friday, I think Shopify did 1 Black Friday, I think Shopify did 1 million requests per second. That's not million requests per second. That's not 1 million requests of images. That's of 1 million requests of images. That's of dynamic requests that are funneling dynamic requests that are funneling through the pipeline of commerce. I through the pipeline of commerce. I mean, Shopify runs something like 30% of mean, Shopify runs something like 30% of all e-commerce stores on the damn all e-commerce stores on the damn internet. internet. internet. A huge portion of all commerce in total A huge portion of all commerce in total runs through Shopify. and that runs on runs through Shopify. and that runs on Ruby and Rails. So Ruby and Rails is Ruby and Rails. So Ruby and Rails is able to scale up to that level without able to scale up to that level without using using using static typing in all of what it does. static typing in all of what it does. Now I know they've done certain Now I know they've done certain experiments in certain ways because they experiments in certain ways because they are hitting some of the limits that you are hitting some of the limits that you will hit with dynamic typing and some of will hit with dynamic typing and some of those limits you hit with dynamic typing those limits you hit with dynamic typing are actually by the way just limits you are actually by the way just limits you hit when you write 5 million lines of hit when you write 5 million lines of code. I think the Shopify monolith is code. I think the Shopify monolith is about 5 million lines of code. At that about 5 million lines of code. At that scale, everything breaks because you're scale, everything breaks because you're at the frontier of what humans are at the frontier of what humans are capable of doing with programming capable of doing with programming languages. The difference in part is languages. The difference in part is that Ruby is such a succinct language that Ruby is such a succinct language that those 5 million if they had been that those 5 million if they had been written in let's just say Go or Java written in let's just say Go or Java would have been 50 or 25. Now that might would have been 50 or 25. Now that might have uh alleviated some of the problems have uh alleviated some of the problems that you have when you work on huge that you have when you work on huge systems with many programmers, but it systems with many programmers, but it certainly would also have compounded certainly would also have compounded them. trying to understand 25 million them. trying to understand 25 million lines of code. lines of code. &gt;&gt; So, the thing does scale. That's a &gt;&gt; So, the thing does scale. That's a persistent myth that it doesn't scale. persistent myth that it doesn't scale. Uh Shopify and and others, but Shopify, Uh Shopify and and others, but Shopify, I think, is a great example. Uh, by the I think, is a great example. Uh, by the way, I love Shopify and I love Toby. way, I love Shopify and I love Toby. &gt;&gt; You got to have Toby on. Yeah. This &gt;&gt; You got to have Toby on. Yeah. This morning morning morning &gt;&gt; for sure. He's a brilliant I I got to &gt;&gt; for sure. He's a brilliant I I got to hang out with him in the desert hang out with him in the desert somewhere. I forget in Utah. He's just a somewhere. I forget in Utah. He's just a brilliant human. Um, and uh, and brilliant human. Um, and uh, and Shopify, Shopify.comlux has been Shopify, Shopify.comlux has been supporting this podcast for the longest supporting this podcast for the longest time. I don't I don't think actually time. I don't I don't think actually Toby knows that they sponsor this Toby knows that they sponsor this podcast. I mean, it's a big company, podcast. I mean, it's a big company, right? right? right? &gt;&gt; It's a huge company. I think uh, just &gt;&gt; It's a huge company. I think uh, just under 10,000 employees, market cap of under 10,000 employees, market cap of 120 billion, 120 billion, 120 billion, uh, GMV of a quarter of a trillion every uh, GMV of a quarter of a trillion every quarter, quarter, quarter, &gt;&gt; and he's involved with the details &gt;&gt; and he's involved with the details still. still. still. &gt;&gt; He is very much so. A funny story about &gt;&gt; He is very much so. A funny story about Toby. Toby was on the Rails core team Toby. Toby was on the Rails core team back in the mid 2000s. Toby himself back in the mid 2000s. Toby himself wrote active merchant which is one of wrote active merchant which is one of the frameworks for creating shops. He the frameworks for creating shops. He wrote the liquid templating language wrote the liquid templating language that Shopify still uses to this day. He that Shopify still uses to this day. He has a huge list of contributions to the has a huge list of contributions to the Rails ecosystem and he's the CEO of the Rails ecosystem and he's the CEO of the company. I think it's just it's very company. I think it's just it's very inspiring to me because it's such at the inspiring to me because it's such at the opposite end of what I like to do. I opposite end of what I like to do. I like to chisel code with my own hands like to chisel code with my own hands most of the day. most of the day. &gt;&gt; He runs a company of almost 10,000 &gt;&gt; He runs a company of almost 10,000 people that is literally like world people that is literally like world commerce depends on it. A level of commerce depends on it. A level of criticality I can't even begin to criticality I can't even begin to understand. And yet we can see eye to understand. And yet we can see eye to eye on so many of these fundamental eye on so many of these fundamental questions in computer science and questions in computer science and program development. program development. program development. That is a dynamic range. That is a dynamic range. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; To be able to encompass Rails being a &gt;&gt; To be able to encompass Rails being a great tool for the one developer who's great tool for the one developer who's just starting out with an idea, who just starting out with an idea, who don't even fully know everything, who is don't even fully know everything, who is right at the level where PHP would have right at the level where PHP would have been a good fit in those late 90s been a good fit in those late 90s because yeah, I could probably upload because yeah, I could probably upload something to an FTP server and so on. something to an FTP server and so on. Rails does have more complexity than Rails does have more complexity than that, but it also has so much longer that, but it also has so much longer runway. The runway goes all the way to runway. The runway goes all the way to goddamn Shopify. That is about the most goddamn Shopify. That is about the most convincing argument I can make for sort convincing argument I can make for sort of dynamic range that we can do a lot of of dynamic range that we can do a lot of it. And even having said that, Shopify it. And even having said that, Shopify is the outlier. Of course, I don't think is the outlier. Of course, I don't think about Shopify as the primary target when about Shopify as the primary target when I write Rails. I think of the single I write Rails. I think of the single developer. Actually, I do think about developer. Actually, I do think about Shopify, but I don't think about Shopify Shopify, but I don't think about Shopify now. I think of Shopify when Toby was now. I think of Shopify when Toby was writing Snowevil, which was the first writing Snowevil, which was the first e-commerce store to sell snowboards that e-commerce store to sell snowboards that he created. There was the prehopify he created. There was the prehopify Shopify he created all by himself. And Shopify he created all by himself. And that was possible because Ruby and Rails that was possible because Ruby and Rails isn't just about beautiful code. It's isn't just about beautiful code. It's just as much about productivity. It's just as much about productivity. It's just as much about the impact that an just as much about the impact that an individual programmer is able to have individual programmer is able to have that they can build system where they that they can build system where they can keep the whole thing in their head can keep the whole thing in their head and be able to move it forward such that and be able to move it forward such that you can go from one developer sitting you can go from one developer sitting and working on something and that and working on something and that something is Shopify and it turns into something is Shopify and it turns into what it is today. When we talk about what it is today. When we talk about programming languages and we compare programming languages and we compare them, we often compare them at a very them, we often compare them at a very late stage like what is the better late stage like what is the better programming language for let's say programming language for let's say Twitter in 2009 when it's already a huge Twitter in 2009 when it's already a huge success. Twitter was started on Ruby and success. Twitter was started on Ruby and Rails. They then hit some scaling Rails. They then hit some scaling problems. It was a big debacle at the problems. It was a big debacle at the time. They end up then I think writing time. They end up then I think writing it in some other language which by the it in some other language which by the way I think is the best advertisement way I think is the best advertisement ever for Ruby and Rails because nothing ever for Ruby and Rails because nothing fucking happened for 10 years after they fucking happened for 10 years after they switched over right essentially zero switched over right essentially zero innovation. Some of that was because innovation. Some of that was because they were doing a long conversion and they were doing a long conversion and all of the early success in part came all of the early success in part came because they had the agility to quickly because they had the agility to quickly change and adopt and so forth. That's change and adopt and so forth. That's what startups needs. That's what Shopify what startups needs. That's what Shopify needed. That's what Twitter needed. needed. That's what Twitter needed. That's what everyone needs and that's That's what everyone needs and that's the number one priority for Ruby and the number one priority for Ruby and Rails to make sure that we don't lose Rails to make sure that we don't lose that because what happens so often when that because what happens so often when development tools and programming development tools and programming language are driven by huge companies is language are driven by huge companies is that they mirror their orc chart. React that they mirror their orc chart. React and everything else needed to use that and everything else needed to use that is in some ways a reflection of how Meta is in some ways a reflection of how Meta builds Facebook because of course it is builds Facebook because of course it is because of course it's a distraction of because of course it's a distraction of that. I'm not saying React isn't a great that. I'm not saying React isn't a great tool and that can't be used by smaller tool and that can't be used by smaller teams. Of course, it can. But it's born teams. Of course, it can. But it's born in a very different context than in a very different context than something like Ruby and Rails. something like Ruby and Rails. &gt;&gt; Uh let me say as a small aside because I &gt;&gt; Uh let me say as a small aside because I think we might return to Shopify and think we might return to Shopify and celebrate it often. Just a sort of celebrate it often. Just a sort of personal note, uh this particular personal note, uh this particular podcast has way more sponsors and podcast has way more sponsors and sponsors that want to be sponsors than I sponsors that want to be sponsors than I could possibly ever have. And it's could possibly ever have. And it's really really important for me to not really really important for me to not give a shit and to be able to celebrate give a shit and to be able to celebrate people like I celebrate people. I people like I celebrate people. I celebrate companies and has I don't care celebrate companies and has I don't care that they're sponsoring. I really don't that they're sponsoring. I really don't care. I just want to make that very care. I just want to make that very explicit cuz we're going to continue explicit cuz we're going to continue saying positive things about Shopify. I saying positive things about Shopify. I don't care. Stop sponsoring. It doesn't don't care. Stop sponsoring. It doesn't really matter to me. But yeah, I just really matter to me. But yeah, I just want to make that explicit. So, but to want to make that explicit. So, but to linger on the scaling thing with the linger on the scaling thing with the Twitter and the Shopify, uh can you just Twitter and the Shopify, uh can you just explain to me what Shopify is doing with explain to me what Shopify is doing with uh with the Jet? What did they have to uh with the Jet? What did they have to try to do to scale this thing? Because try to do to scale this thing? Because that's kind of an incredible story, that's kind of an incredible story, right? right? right? &gt;&gt; Yeah. So, one of the great contributions &gt;&gt; Yeah. So, one of the great contributions that Shopify has made to the entire Ruby that Shopify has made to the entire Ruby ecosystem, not just Rails, but in ecosystem, not just Rails, but in particular Rails is YJet. So, Yid is particular Rails is YJet. So, Yid is their compiler for for Ruby that just their compiler for for Ruby that just makes everything a lot more efficient makes everything a lot more efficient and at Shopify scale eking out even a 5 and at Shopify scale eking out even a 5 10% improvement in Ruby's overhead and 10% improvement in Ruby's overhead and execution time is a huge deal. Now, execution time is a huge deal. Now, Shopify didn't need YJ. Shopify was Shopify didn't need YJ. Shopify was already running on the initial version already running on the initial version of Ruby that was I think 10 times slower of Ruby that was I think 10 times slower than what we have today. If you look than what we have today. If you look back upon the Ruby 186 that Topi back upon the Ruby 186 that Topi probably started on just as I started on probably started on just as I started on and that was enough to propel Shopify to and that was enough to propel Shopify to the scale that it has today. A lot of the scale that it has today. A lot of the scaling conversation in is lost in a the scaling conversation in is lost in a failure to distinguish two things. failure to distinguish two things. Scale is kind of one package we talk Scale is kind of one package we talk about when there are really multiple about when there are really multiple packages inside of it. One is runtime packages inside of it. One is runtime performance latency. How fast can you performance latency. How fast can you execute a single request? Can it happen execute a single request? Can it happen fast enough that the user will not fast enough that the user will not notice? If your Rails request takes a notice? If your Rails request takes a second and a half to execute, the user second and a half to execute, the user is going to notice. Your app is going to is going to notice. Your app is going to feel slow and sluggish. You have to get feel slow and sluggish. You have to get that response time down below, let's that response time down below, let's say, at least 300 milliseconds. I like say, at least 300 milliseconds. I like to target 100 milliseconds as my to target 100 milliseconds as my latency. That's kind of performance. How latency. That's kind of performance. How much performance of that kind of latency much performance of that kind of latency can you squeeze out of a single CPU can you squeeze out of a single CPU core? That tells you something about core? That tells you something about what the price of a single request will what the price of a single request will be. But then whether you can deal with 1 be. But then whether you can deal with 1 million requests a second like Shopify million requests a second like Shopify is doing right now. If you have one box is doing right now. If you have one box that can do a thousand requests a that can do a thousand requests a second, you just need X boxes to get up second, you just need X boxes to get up to a million. And what you'll actually to a million. And what you'll actually find is that when it comes to find is that when it comes to programming languages, they're all the programming languages, they're all the same in this way. They all scale largely same in this way. They all scale largely beautifully horizontally. You just add beautifully horizontally. You just add more boxes. The hard parts of scaling a more boxes. The hard parts of scaling a Shopify is typically not the programming Shopify is typically not the programming language. It's the database. And that's language. It's the database. And that's actually one of the actually one of the um challenges that Shopify has now is um challenges that Shopify has now is how do you deal with MySQL at the scale how do you deal with MySQL at the scale that they're operating at? When do you that they're operating at? When do you need to move to other databases to get need to move to other databases to get worldwide performance? All of these worldwide performance? All of these things. The questions about scaling Ruby things. The questions about scaling Ruby are economic questions. If we're are economic questions. If we're spending so and so much on application spending so and so much on application servers, if we can get just 5% more servers, if we can get just 5% more performance out of Ruby, well, we could performance out of Ruby, well, we could save 5% of those servers and that could save 5% of those servers and that could filter down into the budget. Now, that filter down into the budget. Now, that analysis concludes into basically one analysis concludes into basically one thing. Ruby is a luxury language. thing. Ruby is a luxury language. It's a luxury, the highest luxury in my It's a luxury, the highest luxury in my opinion. It is the Koko Chanel of opinion. It is the Koko Chanel of programming languages. Something that programming languages. Something that not everyone can afford. And I mean this not everyone can afford. And I mean this in the best possible way. There are some in the best possible way. There are some applications on the internet where each applications on the internet where each request has so little value you can't request has so little value you can't afford to use a luxurious language like afford to use a luxurious language like Ruby to program in it. You simply have Ruby to program in it. You simply have to slum it with a C or a Go or some to slum it with a C or a Go or some other low-level language or Rust. Talk other low-level language or Rust. Talk about line noise there for a hot second. about line noise there for a hot second. &gt;&gt; The thrift store of languages. &gt;&gt; The thrift store of languages. &gt;&gt; Exactly. where you need kind of just you &gt;&gt; Exactly. where you need kind of just you need a very low level to do it. You need a very low level to do it. You can't afford to use a luxury language to can't afford to use a luxury language to you to to build it with. That's not true you to to build it with. That's not true of Shopify. It wasn't true of Base Camp. of Shopify. It wasn't true of Base Camp. Even back in 2004, it's not been true of Even back in 2004, it's not been true of 99% of all web applications ever 99% of all web applications ever created. Because the main cost component created. Because the main cost component of 99% of web applications, it's not CPU of 99% of web applications, it's not CPU cores. It's wet cores. It's human cores. cores. It's wet cores. It's human capacity to understand and It's human capacity to understand and involve systems. It's their personal involve systems. It's their personal productivity. I did a calculation once productivity. I did a calculation once when someone had for the 400th time said when someone had for the 400th time said that oh if you switch from Ruby to some that oh if you switch from Ruby to some faster language you could save a bunch faster language you could save a bunch of money and I calculated it out that at of money and I calculated it out that at the time and I think the last time I did the time and I think the last time I did this calculation was almost a decade ago this calculation was almost a decade ago we were spending about 15% of our we were spending about 15% of our operating budget on Ruby application operating budget on Ruby application servers. So for me to improve my cost servers. So for me to improve my cost profile of the business um by seven profile of the business um by seven percentage points, I'd have to pick percentage points, I'd have to pick something twice as fast. That's quite something twice as fast. That's quite hard. Versus if Ruby and Ruby and Rails hard. Versus if Ruby and Ruby and Rails was even 10% more productive than was even 10% more productive than something else, I would move the needle something else, I would move the needle far more because making individual far more because making individual programmers more productive actually programmers more productive actually matters a lot more. This is why people matters a lot more. This is why people are so excited about AI. This is why are so excited about AI. This is why they're freaking out over the fact that they're freaking out over the fact that a single programmer in Silicon Valley a single programmer in Silicon Valley who makes $300,000 a year can now do the who makes $300,000 a year can now do the work of three or five at least in work of three or five at least in theory. I haven't actually seen that theory. I haven't actually seen that fully in practice, but let's just assume fully in practice, but let's just assume the theory is correct. If not now, then the theory is correct. If not now, then in 6 months, that's a huge deal. That in 6 months, that's a huge deal. That matters so much more than whether you matters so much more than whether you can squeeze a few more cycles out of the can squeeze a few more cycles out of the CPU when it comes to these kinds of CPU when it comes to these kinds of business applications. If you're making business applications. If you're making Unreal Engine rendering stuff like Tim Unreal Engine rendering stuff like Tim Sweeney you had on, Sweeney you had on, &gt;&gt; yeah, he needs to really sweat all those &gt;&gt; yeah, he needs to really sweat all those details. The Nanite engine can't run on details. The Nanite engine can't run on Ruby. It It's never going to. It was not Ruby. It It's never going to. It was not meant for that. Fine. These kinds of meant for that. Fine. These kinds of business applications absolutely can. business applications absolutely can. And everything that people are excited And everything that people are excited about AI for right now, that extra about AI for right now, that extra capacity to just do more, that was why capacity to just do more, that was why we were excited about Ruby back in the we were excited about Ruby back in the early 2000s. That was be because I saw early 2000s. That was be because I saw that if we could even squeeze out a 10% that if we could even squeeze out a 10% improvement of the human programmer, improvement of the human programmer, we'd be able to do so much more for so we'd be able to do so much more for so much less. much less. much less. &gt;&gt; Probably argue about this, but I really &gt;&gt; Probably argue about this, but I really like working together with AI, like working together with AI, collaborating with AI, and I would argue collaborating with AI, and I would argue that the kind of code you want AI to that the kind of code you want AI to generate is human readable, human generate is human readable, human interpretable. interpretable. interpretable. &gt;&gt; Yes. If it's generating pearl golf code, &gt;&gt; Yes. If it's generating pearl golf code, it's just it's not a collaboration. So, it's just it's not a collaboration. So, it has to be speaking the human. It's it has to be speaking the human. It's not just you're writing the prompts in not just you're writing the prompts in English. You also want to read the English. You also want to read the responses in the human interpretable responses in the human interpretable language like Ruby, right? So it's language like Ruby, right? So it's that's actually is beneficial for AI too that's actually is beneficial for AI too cuz you've kind of said that for you the cuz you've kind of said that for you the sculptor the sort of the elitist Coco sculptor the sort of the elitist Coco Chanel sculptor you want to on your Chanel sculptor you want to on your fancy keyboard to type every single fancy keyboard to type every single letter yourself with your own fingers letter yourself with your own fingers but it's also uh that uh the benefit of but it's also uh that uh the benefit of Ruby also applies in when some of that Ruby also applies in when some of that is written by AI and you're actually is written by AI and you're actually doing with your own fingers the editing doing with your own fingers the editing part. part. part. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Because you can interact with it because &gt;&gt; Because you can interact with it because it's human interpretable. The paradigm I it's human interpretable. The paradigm I really love with this was something Elon really love with this was something Elon actually said on one of your shows when actually said on one of your shows when you guys were talking about Neurolink. you guys were talking about Neurolink. That Neurolink allows the bandwidth That Neurolink allows the bandwidth between you and the machine to increase. between you and the machine to increase. That language either spoken or written That language either spoken or written is very low bandwidth. If you are to is very low bandwidth. If you are to calculate just how many bits we can calculate just how many bits we can exchange as we're sitting here, it's exchange as we're sitting here, it's very slow. very slow. very slow. Ruby Ruby Ruby has a much higher bandwidth of has a much higher bandwidth of communication, communication, communication, reveals, conveys so much more concept reveals, conveys so much more concept per character than most other per character than most other programming languages do. So when you programming languages do. So when you are collaborating with AI, you want are collaborating with AI, you want really high bandwidth. You want it to be really high bandwidth. You want it to be able to produce programs with you, able to produce programs with you, whether you're letting it write the code whether you're letting it write the code or not, that both of you can actually or not, that both of you can actually understand really quickly and that you understand really quickly and that you can compress a grand comp or a grand can compress a grand comp or a grand concept, a grand system into far fewer concept, a grand system into far fewer parts that both of you can understand. parts that both of you can understand. Now, I actually love collaborating with Now, I actually love collaborating with AI, too. I love chiseling my code, and AI, too. I love chiseling my code, and the way I use AI is in a separate the way I use AI is in a separate window. I don't let it drive my code. window. I don't let it drive my code. I've tried that. I've tried the cursors I've tried that. I've tried the cursors and the wind serves and I don't enjoy and the wind serves and I don't enjoy that way of writing. And one of the that way of writing. And one of the reasons I don't enjoy that way of reasons I don't enjoy that way of writing is I can literally feel writing is I can literally feel competence draining out of my fingers competence draining out of my fingers like that level of immediacy with the like that level of immediacy with the material disappears. And the where I material disappears. And the where I felt this the most was I did this um felt this the most was I did this um remix of Ubuntu called amacube when I remix of Ubuntu called amacube when I switched to Linux switched to Linux &gt;&gt; and it's all written in bash. I'd never &gt;&gt; and it's all written in bash. I'd never written any serious amount of code in written any serious amount of code in bash before. So I was using AI to bash before. So I was using AI to collaborate to write a bunch of bash collaborate to write a bunch of bash with me because I needed all this. I with me because I needed all this. I knew what I wanted. I could express it knew what I wanted. I could express it in Ruby, but I thought it was an in Ruby, but I thought it was an interesting challenge to filter through interesting challenge to filter through Bash because what I was doing was Bash because what I was doing was setting up a Linux machine. That's setting up a Linux machine. That's basically what Bash was designed for. basically what Bash was designed for. It's a great constraint. But what I It's a great constraint. But what I found myself doing was asking AI for the found myself doing was asking AI for the same way of expressing a conditional, same way of expressing a conditional, for example, in Bash over and over for example, in Bash over and over again. That by not typing it, I wasn't again. That by not typing it, I wasn't learning it. I was using it. I was learning it. I was using it. I was getting the expression I wanted, but I getting the expression I wanted, but I wasn't learning it. And I got a little wasn't learning it. And I got a little scared. I got a little scared like, is scared. I got a little scared like, is this the end of learning? Am I no longer this the end of learning? Am I no longer learning if I'm not typing? And the way learning if I'm not typing? And the way I for me recast that was I don't want to I for me recast that was I don't want to give up on the AI. It is such a better give up on the AI. It is such a better experience as a programmer to look up experience as a programmer to look up APIs, to get a second opinion on APIs, to get a second opinion on something, to do a draft, but I have to something, to do a draft, but I have to do the typing myself because you learn do the typing myself because you learn with your fingers. If you're learning with your fingers. If you're learning how to play the guitar, you can watch as how to play the guitar, you can watch as many YouTube videos as you want. You're many YouTube videos as you want. You're not going to learn the guitar. You have not going to learn the guitar. You have to put your fingers on the strings to to put your fingers on the strings to actually learn the motions. And I think actually learn the motions. And I think there is a parallel here to programming there is a parallel here to programming where programming has to be learned in where programming has to be learned in part by the actual typing. I'm just part by the actual typing. I'm just really this is this is fascinating. really this is this is fascinating. Listen, part of my brain agrees with you Listen, part of my brain agrees with you 100%, part doesn't. 100%, part doesn't. I think AI should be in the loop of I think AI should be in the loop of learning. Now current systems don't do learning. Now current systems don't do that but I think it's very possible for that but I think it's very possible for cursor to say cursor to say to basically force you to type certain to basically force you to type certain things. So like if you set the mode of things. So like if you set the mode of learning I just I don't want to be this learning I just I don't want to be this uh sort of give up on AI. I really I uh sort of give up on AI. I really I think I think vibe coding is a skill. So think I think vibe coding is a skill. So uh for an experienced programmer it's uh for an experienced programmer it's too easy to dismiss vibe coding as a too easy to dismiss vibe coding as a thing. thing. thing. &gt;&gt; I agree. I wouldn't dismiss it, &gt;&gt; I agree. I wouldn't dismiss it, &gt;&gt; but I think you need to start building &gt;&gt; but I think you need to start building that skill and start to figure out how that skill and start to figure out how do you prevent the competency from do you prevent the competency from slipping away from your fingers and slipping away from your fingers and brain. Like how do you develop that brain. Like how do you develop that skill in parallel to the other to the skill in parallel to the other skill? I don't know. I just it's I other skill? I don't know. I just it's I think it's a fascinating puzzle though. think it's a fascinating puzzle though. I know too many really strong I know too many really strong programmers that just kind of avoid AI programmers that just kind of avoid AI because it's currently a little too because it's currently a little too dumb. dumb. dumb. &gt;&gt; Yes, it's a little too slow is actually &gt;&gt; Yes, it's a little too slow is actually my main problem. It's a little too dumb my main problem. It's a little too dumb in some ways, but it's a little too slow in some ways, but it's a little too slow in other ways. When I use uh Claude's in other ways. When I use uh Claude's code, code, code, the terminal version of uh Claude, which the terminal version of uh Claude, which is actually my preferred way of using is actually my preferred way of using it, I just I get too impatient. It feels it, I just I get too impatient. It feels like I'm going back to a time where code like I'm going back to a time where code had to compile and I had to go do had to compile and I had to go do something else or boil some tea while something else or boil some tea while the code is compiling. Well, I've been the code is compiling. Well, I've been working in Ruby for 20 years. I don't working in Ruby for 20 years. I don't have compile weight in me anymore. So have compile weight in me anymore. So there's that aspect of it. But I think there's that aspect of it. But I think the more crucial aspect for me is I the more crucial aspect for me is I really care about the competence. And really care about the competence. And I've seen what happens to even great I've seen what happens to even great programmers the moment they put away the programmers the moment they put away the keyboard. Because even before AI, this keyboard. Because even before AI, this would happen as soon as people would get would happen as soon as people would get promoted. Most great programmers who promoted. Most great programmers who work in large businesses stop writing work in large businesses stop writing code on a daily basis because they code on a daily basis because they simply have too many meetings to attend simply have too many meetings to attend to. They have too many other things to to. They have too many other things to do and invariably they lose touch with do and invariably they lose touch with programming. That doesn't mean they programming. That doesn't mean they forget everything. But if you don't have forget everything. But if you don't have your fingers in the sauce, the source, your fingers in the sauce, the source, you are going to lose touch with it. you are going to lose touch with it. There's just no other way. I don't want There's just no other way. I don't want that because I enjoy it too much. This that because I enjoy it too much. This is not just about outcomes. This is is not just about outcomes. This is what's crucial to understand. what's crucial to understand. Programming for programmers who like to Programming for programmers who like to code is not just about the programs they code is not just about the programs they get out of it. That may be the economic get out of it. That may be the economic value. It's not the only human value. value. It's not the only human value. The human value is just smudge in the The human value is just smudge in the expression. expression. expression. When someone who sits down on a guitar When someone who sits down on a guitar and plays Stairways to Heaven, there's a and plays Stairways to Heaven, there's a perfect recording of that that will last perfect recording of that that will last in eternity. You can just put it on in eternity. You can just put it on Spotify. You don't actually need to do Spotify. You don't actually need to do it. The joy is to command the guitar it. The joy is to command the guitar yourself. The joy of a programmer of me yourself. The joy of a programmer of me as a programmer is to type the code as a programmer is to type the code myself. If I elevate, if I promote myself. If I elevate, if I promote myself out of programming, I turned myself out of programming, I turned myself into a project manager, a project myself into a project manager, a project manager of uh murder of AI crows, as I manager of uh murder of AI crows, as I wrote the other day. I could have become wrote the other day. I could have become a project manager my whole career. I a project manager my whole career. I could have become a project manager 20 could have become a project manager 20 years ago if I didn't care to write code years ago if I didn't care to write code myself. And I just wanted outcomes. myself. And I just wanted outcomes. That's how I got started in programming. That's how I got started in programming. I just wanted outcomes. Then I fell in I just wanted outcomes. Then I fell in love with programming and now I'd rather love with programming and now I'd rather retire than give it up. Now that doesn't retire than give it up. Now that doesn't mean you can't have your cake and eat it mean you can't have your cake and eat it too. I've done some vibe coding where I too. I've done some vibe coding where I didn't care that I wasn't playing didn't care that I wasn't playing myself. I just wanted to see something. myself. I just wanted to see something. There was an idea in my head. I wanted There was an idea in my head. I wanted to see something. That's fine. I also to see something. That's fine. I also use AI all day long. In fact, I'm use AI all day long. In fact, I'm already at the point where if you took already at the point where if you took it away from me, I'd be like, "Oh my it away from me, I'd be like, "Oh my god, how do we even look things up on god, how do we even look things up on the internet anymore?" Is is Stack the internet anymore?" Is is Stack Overflow still around? Are forums still Overflow still around? Are forums still a thing? Like, how do I even find a thing? Like, how do I even find answers to some of these questions I answers to some of these questions I have all day long? I don't want to give have all day long? I don't want to give up AI. In fact, I'd say the way I like up AI. In fact, I'd say the way I like to use AI, I'm getting smarter every day to use AI, I'm getting smarter every day because of AI. Because I'm using AI because of AI. Because I'm using AI to have it explain things to me, even to have it explain things to me, even stupid questions. I would be a little stupid questions. I would be a little embarrassed to even enter into Google. embarrassed to even enter into Google. AI is perfectly willing to give me the AI is perfectly willing to give me the ELI5 explanation of some Unix command I ELI5 explanation of some Unix command I should have known already, but I don't. should have known already, but I don't. I'm sorry. Can you just explain it to I'm sorry. Can you just explain it to me? And now I know the thing. So, at the me? And now I know the thing. So, at the end of the day of me working with AI all end of the day of me working with AI all day long, I'm a little bit smarter, like day long, I'm a little bit smarter, like 5%. Sorry, not 5%, half a percent maybe. 5%. Sorry, not 5%, half a percent maybe. That compounds over time. But what I've That compounds over time. But what I've also seen when I worked on the OMAKU also seen when I worked on the OMAKU project and I tried to let AI drive for project and I tried to let AI drive for me, I felt I was maybe half a percent me, I felt I was maybe half a percent dumber at the end of the day. dumber at the end of the day. &gt;&gt; Okay, you said a lot of interesting &gt;&gt; Okay, you said a lot of interesting things. First of all, let's just start things. First of all, let's just start with the very fact that uh asking dumb with the very fact that uh asking dumb questions. If you go to Stack Overflow questions. If you go to Stack Overflow and ask a dumb question or read somebody and ask a dumb question or read somebody else's dumb question and the answer to else's dumb question and the answer to it, there's a lot of judgment there. it, there's a lot of judgment there. &gt;&gt; Yes, &gt;&gt; Yes, &gt;&gt; Yes, &gt;&gt; AI sometimes to an excessive degree has &gt;&gt; AI sometimes to an excessive degree has no judgment. It usually says, "Oh, no judgment. It usually says, "Oh, that's a great question to a fault." that's a great question to a fault." &gt;&gt; Yeah. Oh, that's wonderful. &gt;&gt; Yeah. Oh, that's wonderful. Yeah. I I mean, it's it's such a it's so Yeah. I I mean, it's it's such a it's so conducive to learning. It's such a conducive to learning. It's such a wonderful tool for learning and I would wonderful tool for learning and I would I too would miss it. And it's a great I too would miss it. And it's a great basically search engine into all kinds basically search engine into all kinds of nuances of a particular programming of nuances of a particular programming language, especially if you don't know language, especially if you don't know it that well or like APIs you can load it that well or like APIs you can load in documentation. It's just so great for in documentation. It's just so great for learning. I for me personally it learning. I for me personally it I mean on the happiness scale it makes I mean on the happiness scale it makes me more excited to program. me more excited to program. I don't know what that is exactly. Part I don't know what that is exactly. Part of that is the I'm really sorry Stack of that is the I'm really sorry Stack Overflow is an incredible website but Overflow is an incredible website but there is a negativity there. Yes, there is a negativity there. Yes, &gt;&gt; there's a judgment there. There's it's &gt;&gt; there's a judgment there. There's it's just exciting to be like a with a hype just exciting to be like a with a hype man next to me just like saying yeah man next to me just like saying yeah that's a great idea and I'll say no that's a great idea and I'll say no that's wrong. I'll I'll correct the AI that's wrong. I'll I'll correct the AI and the and the AI will say, "You're and the and the AI will say, "You're absolutely right. How did I not think absolutely right. How did I not think about that?" He'll rewrite the code. I'm about that?" He'll rewrite the code. I'm like, "Holy shit, I'm having it's like a like, "Holy shit, I'm having it's like a buddy that's like really being positive buddy that's like really being positive and is very smart and is challenging me and is very smart and is challenging me to think and even if I never use the to think and even if I never use the code it generates, I'm already a better code it generates, I'm already a better programmer." But actually, the deeper programmer." But actually, the deeper thing is for some reason I'm having more thing is for some reason I'm having more fun. That's a really really important fun. That's a really really important thing. thing. thing. &gt;&gt; I like to think of it as a pair &gt;&gt; I like to think of it as a pair programmer. for exactly that reason. programmer. for exactly that reason. &gt;&gt; Pair programming came vogue in like the &gt;&gt; Pair programming came vogue in like the 2000s where you'd have two programmers 2000s where you'd have two programmers in front of one machine and you'd push in front of one machine and you'd push the keyboard between you. One program the keyboard between you. One program would be driving, they'd be typing in. would be driving, they'd be typing in. The other programmer would essentially The other programmer would essentially sit and watch the code, suggest sit and watch the code, suggest improvements, look something up. That improvements, look something up. That was a really interesting dynamic. Now, was a really interesting dynamic. Now, unfortunately, I'm an introvert, so I unfortunately, I'm an introvert, so I can do that for about five minutes can do that for about five minutes before I want to jump off a bridge. So, before I want to jump off a bridge. So, it doesn't work for me as a full-time it doesn't work for me as a full-time occupation, but AI allows me to have all occupation, but AI allows me to have all the best of that experience all the the best of that experience all the time. Now, I think what's really time. Now, I think what's really interesting what you said about it makes interesting what you said about it makes it more fun. I hadn't actually thought it more fun. I hadn't actually thought about that, but about that, but what it's made more fun to me is to be a what it's made more fun to me is to be a beginner again. It's made me it made it beginner again. It's made me it made it more fun to learn Bash successfully for more fun to learn Bash successfully for the first time. Now, I had to do the the first time. Now, I had to do the detour where I let it write all the code detour where I let it write all the code for me and I realized I wasn't learning for me and I realized I wasn't learning nearly as much as I hoped I would. and nearly as much as I hoped I would. and that I started doing once I typed it out that I started doing once I typed it out myself. But it gave me the confidence myself. But it gave me the confidence that you know what if I need to do some that you know what if I need to do some iOS programming myself. I haven't done iOS programming myself. I haven't done that in probably 6 years was the last that in probably 6 years was the last time I dabbled in it. I never really time I dabbled in it. I never really built anything for real. I feel highly built anything for real. I feel highly confident now that I could sit down with confident now that I could sit down with AI and I could have something in the app AI and I could have something in the app store by the end of the week. I would store by the end of the week. I would not have that confidence unless I had a not have that confidence unless I had a pair programming body like AI. I don't pair programming body like AI. I don't actually use it very much for Ruby code. actually use it very much for Ruby code. I'm occasionally impressed whenever I I'm occasionally impressed whenever I try it. They're like, "Oh, it got this try it. They're like, "Oh, it got this one thing right. That is truly one thing right. That is truly remarkable and it's actually pretty remarkable and it's actually pretty good." And then I'll ask you two more good." And then I'll ask you two more questions and I go like, "Oh, yeah. questions and I go like, "Oh, yeah. Okay. If you were my junior programmer, Okay. If you were my junior programmer, I'd start tapping my fingers and going I'd start tapping my fingers and going like, you got to you got to shape up." like, you got to shape up." Now, the great thing, of course, is we Now, the great thing, of course, is we can just wait five minutes. Um, the can just wait five minutes. Um, the entropic CEO seems to think that 90% of entropic CEO seems to think that 90% of all code by the end of the year is going all code by the end of the year is going to be written by AI. I'm more than a to be written by AI. I'm more than a little bit skeptical about that. But I'm little bit skeptical about that. But I'm open-minded about the prospect that open-minded about the prospect that programming potentially will turn into a programming potentially will turn into a horse when done manually, something we horse when done manually, something we do recreationally. It's no longer a mode do recreationally. It's no longer a mode of transportation to get around LA. of transportation to get around LA. You're not going to saddle up and go to You're not going to saddle up and go to the grocery store and pick up stuff from the grocery store and pick up stuff from Whole Foods in your saddle bags. That's Whole Foods in your saddle bags. That's just not a thing anymore. That could be just not a thing anymore. That could be the future for programming, for manual the future for programming, for manual programming. Entirely possible. I also programming. Entirely possible. I also don't care like even though we have don't care like even though we have great renditions of all the best songs great renditions of all the best songs as I said there are millions of people as I said there are millions of people who love to play the guitar it may no who love to play the guitar it may no longer have as much economic value as it longer have as much economic value as it once did I think that I'm quite once did I think that I'm quite convinced is true that we perhaps have convinced is true that we perhaps have seen the peak now I understand the seen the peak now I understand the paradox when the price of something goes paradox when the price of something goes down actually the you overall usage goes down actually the you overall usage goes up and total spend on that activity goes up and total spend on that activity goes up that could also happen maybe but what up that could also happen maybe but what we're seeing right now is that a lot of we're seeing right now is that a lot of the big shops, a lot of the big the big shops, a lot of the big companies are not hiring like they were companies are not hiring like they were 5 years ago. They're not anticipating 5 years ago. They're not anticipating they're going to need tons more they're going to need tons more programmers. Controversially, Toby programmers. Controversially, Toby actually put out a memo inside of actually put out a memo inside of Shopify asking everyone who's Shopify asking everyone who's considering hiring someone to ask the considering hiring someone to ask the question, could this be done by AI? Now, question, could this be done by AI? Now, he's further ahead on this question than he's further ahead on this question than I am. I look at some of the coding I am. I look at some of the coding trenches and I go like, I'd love to use trenches and I go like, I'd love to use AI more and I see how it's making us AI more and I see how it's making us more productive, but it's not yet at the more productive, but it's not yet at the level where I just go like, "Oh, we have level where I just go like, "Oh, we have this project. Let me just give it to the this project. Let me just give it to the AI agent and it's going to go off and do AI agent and it's going to go off and do it." it." it." &gt;&gt; But let's just let's just be honest. &gt;&gt; But let's just let's just be honest. You're like a Clint Eastwood type You're like a Clint Eastwood type character, cowboy on a horse, seeing uh character, cowboy on a horse, seeing uh seeing cars going around and you're seeing cars going around and you're like, well, like, well, like, well, &gt;&gt; that's part of it. And I think that's it &gt;&gt; that's part of it. And I think that's it is important to have that humility that is important to have that humility that what you are good at may no longer be what you are good at may no longer be what society values. This has happened a what society values. This has happened a million times in history that you could million times in history that you could have been exceptionally good at saddlem have been exceptionally good at saddlem for example. That's something that a lot for example. That's something that a lot of people used to care about because of people used to care about because everyone rode a horse and then suddenly everyone rode a horse and then suddenly riding a horse became this niche hobby riding a horse became this niche hobby that there's some people care about it that there's some people care about it but not nearly as many. That's okay. Now but not nearly as many. That's okay. Now the other thing of this is I've been had the other thing of this is I've been had the good fortune to have been a the good fortune to have been a programmer for nearly 30 years. That was programmer for nearly 30 years. That was a great run. I try to look at life in a great run. I try to look at life in this way that I've already been blessed this way that I've already been blessed with decades of economically viable, with decades of economically viable, highly highly highly valuable ways of translating what I like valuable ways of translating what I like best in the working world to write Ruby best in the working world to write Ruby code that that was so valuable that I code that that was so valuable that I could make millions and millions of could make millions and millions of dollars doing it. And if that's over dollars doing it. And if that's over tomorrow, I shouldn't look at that with tomorrow, I shouldn't look at that with regret. I should look at it with regret. I should look at it with gratitude. But you're also a highly gratitude. But you're also a highly experienced, brilliant, and opinionated experienced, brilliant, and opinionated human being. So, it's really interesting human being. So, it's really interesting to get your opinion on the future of the to get your opinion on the future of the horse because it, you know, there's a horse because it, you know, there's a lot of young people listening to this lot of young people listening to this who love programming or who are excited who love programming or who are excited by the possibility of building stuff by the possibility of building stuff with software uh with a Ruby with Ruby with software uh with a Ruby with Ruby with Ruby on Rails that kind of language with Ruby on Rails that kind of language this and now the possibility. this and now the possibility. &gt;&gt; Is it a career? &gt;&gt; Is it a career? And &gt;&gt; Is it a career? And how if indeed a single person can build how if indeed a single person can build more and more and more with the help of more and more and more with the help of AI like how do they learn that skill? Is AI like how do they learn that skill? Is this a good skill to learn? I mean that this a good skill to learn? I mean that to me is the real mystery here because I to me is the real mystery here because I think it's still absolutely true that think it's still absolutely true that you have to learn how to program from you have to learn how to program from scratch currently. scratch currently. scratch currently. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; But how do you balance those two skills? &gt;&gt; But how do you balance those two skills? Because I too as I'm thinking now there Because I too as I'm thinking now there is a scary slipping away of skill that is a scary slipping away of skill that happens in a matter of like really happens in a matter of like really minutes on a particular piece of code. minutes on a particular piece of code. It just it's it's it's scary. Not the It just it's it's it's scary. Not the way way way driving, you know, when you have a car driving, you know, when you have a car drive for you, it doesn't quite slip drive for you, it doesn't quite slip away that fast. away that fast. So that really scares me. So when when So that really scares me. So when when somebody comes up to me and asks me somebody comes up to me and asks me like, "How do I learn to program?" I like, "How do I learn to program?" I don't know what the advice is because I don't know what the advice is because I think it's not enough to just use cursor think it's not enough to just use cursor or copilot to generate code. or copilot to generate code. &gt;&gt; It's absolutely not enough. Not if you &gt;&gt; It's absolutely not enough. Not if you want to learn. None of you want to want to learn. None of you want to become better at it. If you just become become better at it. If you just become a tap monkey, maybe you're productive in a tap monkey, maybe you're productive in a second, but then you have to realize, a second, but then you have to realize, well, can anyone just tap if that's all well, can anyone just tap if that's all we're doing is just sitting around all we're doing is just sitting around all day long tapping? Yes. Yes. Yes. Yes. day long tapping? Yes. Yes. Yes. Yes. Yes. That's not a marketable skill. Now, Yes. That's not a marketable skill. Now, I always preface this both to myself and I always preface this both to myself and when I speak to others about it is rule when I speak to others about it is rule number one, nobody fucking knows number one, nobody fucking knows anything. No one can predict even 6 anything. No one can predict even 6 months ahead. Right now, we're probably months ahead. Right now, we're probably at peak AI future hype because we see at peak AI future hype because we see all the promise because so much of it is all the promise because so much of it is real and so many people have experienced real and so many people have experienced it themselves. this mind-boggling it themselves. this mind-boggling thing that the silicon is thinking in thing that the silicon is thinking in some way that feels eerily reminiscent some way that feels eerily reminiscent of humans. I'd actually say the big of humans. I'd actually say the big thing for me wasn't even chat GBT. It thing for me wasn't even chat GBT. It wasn't even Claude. It was DeepSeek. wasn't even Claude. It was DeepSeek. Running Deepseek locally and seeing the Running Deepseek locally and seeing the think box where it converses with itself think box where it converses with itself about how to formulate the response. about how to formulate the response. I almost wanted to think is this a I almost wanted to think is this a gimmick? Is it doing this as a gimmick? Is it doing this as a performance for my benefit? But that's performance for my benefit? But that's not actually how it thinks. If this is not actually how it thinks. If this is how it actually thinks, okay, I'm a how it actually thinks, okay, I'm a little scared. little scared. little scared. &gt;&gt; Yeah, &gt;&gt; Yeah, &gt;&gt; Yeah, &gt;&gt; this is incredibly human how it thinks &gt;&gt; this is incredibly human how it thinks in this way. in this way. &gt;&gt; But where does that go? So &gt;&gt; But where does that go? So &gt;&gt; in 95, one of my favorite movies, one of &gt;&gt; in 95, one of my favorite movies, one of my favorite bee movies came out. The my favorite bee movies came out. The Lawn Mower Man. Lawn Mower Man. &gt;&gt; Great movie. &gt;&gt; Great movie. &gt;&gt; Incredible movie about virtual reality &gt;&gt; Incredible movie about virtual reality being an Avatar and living in VR. Like being an Avatar and living in VR. Like the story was a mess, but the the story was a mess, but the aesthetics, the world that built up was aesthetics, the world that built up was incredible. And I thought, we're 5 years incredible. And I thought, we're 5 years away. I'm going to be living in VR now. away. I'm going to be living in VR now. I'm just going to be floating around. I'm just going to be floating around. I'm going to be an avatar. This is where I'm going to be an avatar. This is where most humans can spend most of their day. most humans can spend most of their day. That didn't happen. We're 30 years That didn't happen. We're 30 years later. VR is still not here. It's here later. VR is still not here. It's here for gaming. It's here for some for gaming. It's here for some specialized applications. My oldest specialized applications. My oldest loves playing Gorilla Tag. I don't know loves playing Gorilla Tag. I don't know if you've tried that. That's basically if you've tried that. That's basically the hottest VR game. Wonderful. That's the hottest VR game. Wonderful. That's great. It's really hard to predict the great. It's really hard to predict the future because we just don't know. And future because we just don't know. And then when you factor in AI and you have then when you factor in AI and you have even the smartest people go like I don't even the smartest people go like I don't think we fully understand how this think we fully understand how this works. But then on the flip side you works. But then on the flip side you have Moore's law that seems to have have Moore's law that seems to have worked for many many many years in uh worked for many many many years in uh decreasing the size of transistor for decreasing the size of transistor for example. So like example. So like &gt;&gt; you know uh flash didn't take over the &gt;&gt; you know uh flash didn't take over the internet but Moors law worked. So we internet but Moors law worked. So we don't know which one AI is don't know which one AI is &gt;&gt; what it is and this is what I find so &gt;&gt; what it is and this is what I find so fascinating too. I forget who did this fascinating too. I forget who did this presentation but someone in the web presentation but someone in the web community did this great presentation on community did this great presentation on the history of the airplane. So you go the history of the airplane. So you go from the Wright brothers flying in what from the Wright brothers flying in what was 1903 or something like that and 40 was 1903 or something like that and 40 years later you have jet flight just an years later you have jet flight just an unbelievable amount of progress in four unbelievable amount of progress in four decades. Then in 56 I think it was the decades. Then in 56 I think it was the halt design for the Boeing 747 halt design for the Boeing 747 essentially precursor was designed and essentially precursor was designed and basically nothing has happened since. basically nothing has happened since. Just minor tweaks and improvements on Just minor tweaks and improvements on the flying experience since the 50s the flying experience since the 50s somehow if you were to predict where somehow if you were to predict where flying was going to go and you were flying was going to go and you were sitting in 42 and you'd seen you sitting in 42 and you'd seen you remember the Wright brothers flying in ' remember the Wright brothers flying in ' 03 and you were seeing that jet engines 03 and you were seeing that jet engines coming. You're like, "We're going to fly coming. You're like, "We're going to fly the to the stars in another two decades. the to the stars in another two decades. We're going to invent super mega We're going to invent super mega hypersonic flights that's going to hypersonic flights that's going to traverse the earth in in two hours." And traverse the earth in in two hours." And then that didn't happen. It tapped out. then that didn't happen. It tapped out. This is what's so hard of predicting This is what's so hard of predicting about predicting the future. We can be about predicting the future. We can be so excited in the moment because we're so excited in the moment because we're drawing a line through early dots on a drawing a line through early dots on a chart and it looks like those early dots chart and it looks like those early dots are just going up and to the right and are just going up and to the right and sometimes they just flatten out. This is sometimes they just flatten out. This is also one of those things where we have also one of those things where we have so much critical infrastructure. for so much critical infrastructure. for example, that still runs on cobalt that example, that still runs on cobalt that about five humans around the world about five humans around the world really understand truly deeply that really understand truly deeply that there's a it's possible for society to there's a it's possible for society to lose a competence it still needs because lose a competence it still needs because it's chasing the future. Copalt is still it's chasing the future. Copalt is still with us. This is one of the things I with us. This is one of the things I think about with with programming. Ruby think about with with programming. Ruby and Rails is at such a level now that in and Rails is at such a level now that in 50 years from now, it's exceedingly 50 years from now, it's exceedingly likely that there's still a ton of Ruby likely that there's still a ton of Ruby and Rail systems running around. Now, and Rail systems running around. Now, very hard to predict what that exact very hard to predict what that exact world is going to be like, but world is going to be like, but yesterday's weather tells us that if yesterday's weather tells us that if there's still cobalt code from the 70s there's still cobalt code from the 70s operating social security today, and we operating social security today, and we haven't figured out a clean way to haven't figured out a clean way to convert that, let alone understand it. convert that, let alone understand it. Um, we should certainly be humble about Um, we should certainly be humble about predicting the future. I don't think any predicting the future. I don't think any of the programmers who wrote that cobalt of the programmers who wrote that cobalt code back in the 70s had any damn idea code back in the 70s had any damn idea that in 2025 checks were still being cut that in 2025 checks were still being cut off the business logic that they had off the business logic that they had encoded back then. But that just brings encoded back then. But that just brings me to the conclusion on the question for me to the conclusion on the question for what should a young programmer do? what should a young programmer do? You're not going to be able to predict You're not going to be able to predict the future. No one's going to be able to the future. No one's going to be able to predict the future. If you like predict the future. If you like programming, you should learn programming, you should learn programming. Now, is that going to be a programming. Now, is that going to be a career forever? I don't know. But what's career forever? I don't know. But what's going to be a career forever? Who knows? going to be a career forever? Who knows? Like a second ago, we thought that it Like a second ago, we thought that it was the blue collar labor that was going was the blue collar labor that was going to be abstracted first. It was the to be abstracted first. It was the robots that were going to take over. robots that were going to take over. Then Gen AI comes out and then all the Then Gen AI comes out and then all the artists suddenly look like, "Holy shit, artists suddenly look like, "Holy shit, is this going to do all animation now? is this going to do all animation now? It's going to do all music now." They It's going to do all music now." They get real scared. And now I see the get real scared. And now I see the latest Tesla robot going like, "Oh, latest Tesla robot going like, "Oh, maybe we're back now to blue collar maybe we're back now to blue collar being in trouble because if it can dance being in trouble because if it can dance like that, it can probably fix a like that, it can probably fix a toilet." So no one knows anything and toilet." So no one knows anything and you have to then position yourself for you have to then position yourself for the future in such a way that the future in such a way that it doesn't matter that you pick a it doesn't matter that you pick a profession or path where if it turns out profession or path where if it turns out that you have to retool and reskill, that you have to retool and reskill, you're not going to regret the path you you're not going to regret the path you took. That's a general life principle took. That's a general life principle for me. How I look at all endeavors I for me. How I look at all endeavors I involve myself in is I want to be involve myself in is I want to be content with all outcomes. When we start content with all outcomes. When we start working on a new product at 37 signals, working on a new product at 37 signals, I set up my mental model for its I set up my mental model for its success. And I go, do you know what? If success. And I go, do you know what? If no one wants this, I will have had no one wants this, I will have had another opportunity to write beautiful another opportunity to write beautiful Ruby code, to explore a green field Ruby code, to explore a green field domain, to learn something new, to build domain, to learn something new, to build a system I want, even if no one else a system I want, even if no one else wants it. What a blessing. What a wants it. What a blessing. What a privilege. If a bunch of people want it, privilege. If a bunch of people want it, that's great. We can pay some salaries. that's great. We can pay some salaries. we can keep the business running and if we can keep the business running and if it's a blowway success, wonderful, I get it's a blowway success, wonderful, I get to impact a bunch of people. to impact a bunch of people. &gt;&gt; I think one of the big open questions to &gt;&gt; I think one of the big open questions to me is uh how far you can get with vibe me is uh how far you can get with vibe coding, whether an approach for a young coding, whether an approach for a young developer to invest most of their time developer to invest most of their time into vibe coding or into writing code into vibe coding or into writing code from scratch. from scratch. from scratch. So vibe coding meaning so I'm I'm So vibe coding meaning so I'm I'm leaning into the meme a little bit but leaning into the meme a little bit but the vibe coding meaning you generate the vibe coding meaning you generate code you have the this idea of a thing code you have the this idea of a thing you want to create you generate the code you want to create you generate the code and then you fix it with both natural and then you fix it with both natural language through the prompts and language through the prompts and manually you learn enough to manually manually you learn enough to manually fix it. So that's the learning process, fix it. So that's the learning process, how you fix code that's generated or you how you fix code that's generated or you you write code from scratch and have the you write code from scratch and have the LLM's kind of uh tab tab tab tab add LLM's kind of uh tab tab tab tab add extra code like which part do you lean extra code like which part do you lean on? I think to be safe, you should find on? I think to be safe, you should find the the beauty and the the artistry and the the beauty and the the artistry and the skill in both. Right from scratch, the skill in both. Right from scratch, like there should be some percent of like there should be some percent of your time just writing from scratch and your time just writing from scratch and some percent by coding. There should be some percent by coding. There should be more of the time writing from scratch. more of the time writing from scratch. If you are interested in learning how to If you are interested in learning how to program, unfortunately, you're not going program, unfortunately, you're not going to get fit by watching fitness videos. to get fit by watching fitness videos. You're not going to learn how to play You're not going to learn how to play the guitar by watching YouTube guitar the guitar by watching YouTube guitar videos. You have to actually play videos. You have to actually play yourself. You have to do the sit-ups. yourself. You have to do the sit-ups. Programming understanding learning Programming understanding learning almost anything requires you to do. almost anything requires you to do. Humans are not built to absorb Humans are not built to absorb information in a way that transforms information in a way that transforms into skills by just watching others from into skills by just watching others from afar. Now, ironically, it seems AI is afar. Now, ironically, it seems AI is actually quite good at that. But humans actually quite good at that. But humans are not. If you want to learn how to are not. If you want to learn how to become a competent programmer, become a competent programmer, you have to program. It's really not you have to program. It's really not that difficult to understand. Now, I that difficult to understand. Now, I understand the temptation and the understand the temptation and the temptation is there because vibe coding temptation is there because vibe coding can produce things perhaps in this can produce things perhaps in this moment, especially in a new domain moment, especially in a new domain you're not familiar with with tools you you're not familiar with with tools you don't know perfectly well that's better don't know perfectly well that's better than what you could do or that you would than what you could do or that you would take much longer to get at, but you're take much longer to get at, but you're not going to learn anything. You're not going to learn anything. You're going to learn in this superficial way going to learn in this superficial way that feels like learning but is that feels like learning but is completely empty calories. And secondly, completely empty calories. And secondly, if you can just vibe code it, you're not if you can just vibe code it, you're not a programmer. Then anyone could do it. a programmer. Then anyone could do it. which may be wonderful. That's which may be wonderful. That's essentially what happened with the essentially what happened with the Access database. That's what happened Access database. That's what happened with Excel. It took the capacity of with Excel. It took the capacity of accountants to become software accountants to become software developers because the tools became so developers because the tools became so accessible to them that they could build accessible to them that they could build a model for how the business was going a model for how the business was going to do next week. That required a to do next week. That required a programmer prior to Excel. Now, it programmer prior to Excel. Now, it didn't because they could do it didn't because they could do it themselves. Vive coding enables themselves. Vive coding enables non-programmers to explore their ideas non-programmers to explore their ideas in a way that I find absolutely in a way that I find absolutely wonderful but it doesn't make you a wonderful but it doesn't make you a programmer. I agree with you but I want programmer. I agree with you but I want to allow for room for both of us be to allow for room for both of us be wrong. For example, there could be vibe wrong. For example, there could be vibe coding could actually be a skill that if coding could actually be a skill that if you train it and by vibe coding let's you train it and by vibe coding let's include the the the step of correction include the the the step of correction the iterative correction. It's possible the iterative correction. It's possible if you get really good at that that if you get really good at that that you're outperforming the people that you're outperforming the people that write from scratch that you can come up write from scratch that you can come up with truly innovative things, especially with truly innovative things, especially at this moment in history while the LLMs at this moment in history while the LLMs are a little bit too dumb to create are a little bit too dumb to create super novel things and a complete super novel things and a complete product, but they're starting to creep product, but they're starting to creep close to that. So, if you're investing close to that. So, if you're investing time now into becoming a really good time now into becoming a really good vibe coder, maybe this is the right vibe coder, maybe this is the right thing to do uh as if it's indeed a thing to do uh as if it's indeed a skill. We kind of meme about vibe coding skill. We kind of meme about vibe coding just like sitting back and in the it's just like sitting back and in the it's in the name. But if you treat it in the name. But if you treat it seriously, a competitive vibe coder and seriously, a competitive vibe coder and get good at riding the wave of AI and get good at riding the wave of AI and get good at the skill of editing get good at the skill of editing code versus writing code from scratch. code versus writing code from scratch. It's possible It's possible It's possible that you can actually get farther in the that you can actually get farther in the long term. Maybe editing is a long term. Maybe editing is a fundamentally different task than fundamentally different task than writing from scratch if you take that writing from scratch if you take that seriously as a skill that you develop. I seriously as a skill that you develop. I see. I don't to me that's an open see. I don't to me that's an open question. I just think I'm I personally question. I just think I'm I personally and now you're on another level, but and now you're on another level, but just me just just personally just me just just personally I'm not as good at editing I'm not as good at editing the code that I didn't write. That's a the code that I didn't write. That's a different different different &gt;&gt; no one is of this generation. &gt;&gt; no one is of this generation. But but maybe that's a skill. Maybe if But but maybe that's a skill. Maybe if you get on the same page as the AI you get on the same page as the AI because there's a consistency to the AI. because there's a consistency to the AI. It's like um it really is a pair It's like um it really is a pair programmer with a consistent style and programmer with a consistent style and structure and so on. Plus with your own structure and so on. Plus with your own prompting you can control the kind of prompting you can control the kind of code you write. I mean it could code you write. I mean it could legitimately be a skill. Like legitimately be a skill. Like &gt;&gt; that's the dream of the prompt engineer. &gt;&gt; that's the dream of the prompt engineer. I think it's complete pipe dream. I I think it's complete pipe dream. I don't think editors don't think editors exist that aren't good at writing. I've exist that aren't good at writing. I've written a number of books. I've had a written a number of books. I've had a number of professional editors. Not all number of professional editors. Not all of them wrote their own great books, but of them wrote their own great books, but all of them were great writers in some all of them were great writers in some regard. You cannot give someone pointers regard. You cannot give someone pointers if you don't know how to do it. It's if you don't know how to do it. It's very difficult for an editor to be able very difficult for an editor to be able to spot what's wrong with a problem if to spot what's wrong with a problem if they couldn't make the solution they couldn't make the solution themselves. Editing in my opinion is the themselves. Editing in my opinion is the reward. The capacity to be a good editor reward. The capacity to be a good editor is the reward you get from being a good is the reward you get from being a good doer. You have to be a doer first. Now doer. You have to be a doer first. Now that's not the same as saying that that's not the same as saying that vibe coding prompt engineering won't be vibe coding prompt engineering won't be able to produce fully formed amazing able to produce fully formed amazing systems even shortly. I think that's systems even shortly. I think that's entirely possible. But then there's no entirely possible. But then there's no skill left which maybe is the greatest skill left which maybe is the greatest payoff at all. Wasn't that the whole payoff at all. Wasn't that the whole promise of AI anyway? that it was just promise of AI anyway? that it was just all natural language that even my clumsy all natural language that even my clumsy way of formulating a question could way of formulating a question could result in a beautiful succinct answer. result in a beautiful succinct answer. That actually to me is a much more That actually to me is a much more appealing vision that there's going to appealing vision that there's going to be these special prompt engineering be these special prompt engineering wizards who know how to tickle the AI wizards who know how to tickle the AI just right to produce what they want. just right to produce what they want. The beauty of AI is to think that The beauty of AI is to think that someone who doesn't know the first thing someone who doesn't know the first thing about how AI actually works is able to about how AI actually works is able to formulate their idea and their formulate their idea and their aspirations for what they want and the aspirations for what they want and the AI could somehow take that messy clump AI could somehow take that messy clump of ideas and produce something that of ideas and produce something that someone wants. That's actually what someone wants. That's actually what programming has always been. There's programming has always been. There's very often been people who didn't know very often been people who didn't know how to program, who wanted programs, who how to program, who wanted programs, who then hired programmers who gave them then hired programmers who gave them messy descriptions of what they wanted messy descriptions of what they wanted and then when the programmers delivered and then when the programmers delivered that back said, "Oh, no, actually that's that back said, "Oh, no, actually that's not what I meant. I want something not what I meant. I want something else." AI may be able to provide that else." AI may be able to provide that cycle. If that happens to the fullest cycle. If that happens to the fullest extent of it, yeah, there's not going to extent of it, yeah, there's not going to be as many programmers around, right? be as many programmers around, right? But hopefully presumably someone still But hopefully presumably someone still at least for the foreseeable future have at least for the foreseeable future have to understand whether what the AI is to understand whether what the AI is producing actually works or not. As a producing actually works or not. As a interesting case study maybe a thought interesting case study maybe a thought experiment if I wanted to vibe code uh experiment if I wanted to vibe code uh base camp or or hey and some of the some base camp or or hey and some of the products you you've built like of the products you you've built like what would be the bottlenecks? What what would be the bottlenecks? What where would I fail along the way? What where would I fail along the way? What I've seen when I've been trying to do I've seen when I've been trying to do this, trying to use vibe coding to build this, trying to use vibe coding to build something real is you actually fail something real is you actually fail really early, uh, the vibe coding is really early, uh, the vibe coding is able to build a veneer at the current able to build a veneer at the current present moment of something that looks present moment of something that looks like it works, like it works, &gt;&gt; but it's flawed in all sorts of ways. &gt;&gt; but it's flawed in all sorts of ways. There are the obvious ways, the meme There are the obvious ways, the meme ways that it's leaking all your API ways that it's leaking all your API keys, it's storing your password in keys, it's storing your password in plain text. I think that's ultimately plain text. I think that's ultimately solvable. Like, it's going to figure solvable. Like, it's going to figure that out or at least it's going to get that out or at least it's going to get better at that. But its capacity to get better at that. But its capacity to get lost in its own labyrinth is very great lost in its own labyrinth is very great right now. You let it code something and right now. You let it code something and then you want to change something and it then you want to change something and it becomes a game of whack-a-ole real becomes a game of whack-a-ole real quick. Peter levels who've been doing quick. Peter levels who've been doing this wonderful flight simulator was this wonderful flight simulator was talking to that where at a certain scale talking to that where at a certain scale the thing just keeps biting its own the thing just keeps biting its own tail. You want to fix something and it tail. You want to fix something and it breaks five other things which I think breaks five other things which I think is actually uniquely human because is actually uniquely human because that's how most bad programmers are at a that's how most bad programmers are at a certain level of complexity with the certain level of complexity with the domain. They can't fix one thing without domain. They can't fix one thing without breaking three other things. So in that breaking three other things. So in that way, I'm actually in some ways almost a way, I'm actually in some ways almost a positive signal for that the AI is going positive signal for that the AI is going to figure this out because it's on an to figure this out because it's on an extremely human trajectory right now. extremely human trajectory right now. The kind of mistakes it's making are the The kind of mistakes it's making are the kind of mistakes that junior programmers kind of mistakes that junior programmers make all the time. make all the time. &gt;&gt; Yeah. Uh can we zoom out and look at the &gt;&gt; Yeah. Uh can we zoom out and look at the vision, the manifesto, the doctrine of vision, the manifesto, the doctrine of Rails? What are some of the things that Rails? What are some of the things that make a programming language, a framework make a programming language, a framework great, especially for web development? great, especially for web development? So, we talked about happiness. So, we talked about happiness. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; The underlying objective of Ruby. Uh, &gt;&gt; The underlying objective of Ruby. Uh, what else? what else? what else? &gt;&gt; So, you're looking at the nine points I &gt;&gt; So, you're looking at the nine points I wrote out in I think 2012. And first wrote out in I think 2012. And first before we dive into them, I want to say before we dive into them, I want to say the reason I wrote it down is that if the reason I wrote it down is that if you want a community to endure, you have you want a community to endure, you have to record its values and you have to to record its values and you have to record its practices. If you don't, record its practices. If you don't, eventually you're going to get enough eventually you're going to get enough new people come in who have their own new people come in who have their own ideas of where this thing should go. And ideas of where this thing should go. And if we don't have a a guiding light if we don't have a a guiding light helping us to make decisions, we're helping us to make decisions, we're going to start flailing. We're going to going to start flailing. We're going to start actually falling apart. I think start actually falling apart. I think this is one of the key reasons that this is one of the key reasons that institutions of all kinds start falling institutions of all kinds start falling apart. We forget why Chesterton's fence apart. We forget why Chesterton's fence is there. We just go like, why is that is there. We just go like, why is that fence there? Let's yank it out. Oh, it fence there? Let's yank it out. Oh, it was to keep the wolves out. Now we're was to keep the wolves out. Now we're all dead. Oops. So, I wanted to write all dead. Oops. So, I wanted to write these things down. And if we just take these things down. And if we just take them quick one by one, you talked about them quick one by one, you talked about optimizing for programmer happiness. I optimizing for programmer happiness. I put that at number one in homage of put that at number one in homage of Matts. And that's a lot about accepting Matts. And that's a lot about accepting that there is occasionally a trade-off that there is occasionally a trade-off between writing beautiful code and other between writing beautiful code and other things we want out of systems. There can things we want out of systems. There can be a runtime trade-off. There can be a be a runtime trade-off. There can be a performance trade-off, but we're going performance trade-off, but we're going to do it nonetheless. We're also going to do it nonetheless. We're also going to allow ambiguity in a way that many to allow ambiguity in a way that many programmers by default are uncomfortable programmers by default are uncomfortable with. I give the example actually here with. I give the example actually here of in the interactive Ruby shell where of in the interactive Ruby shell where you can play with the language or even you can play with the language or even interact with your domain model. You can interact with your domain model. You can quit it in two ways at least that I quit it in two ways at least that I found. You can write exit, boom, you're found. You can write exit, boom, you're out of the program. You can write quit, out of the program. You can write quit, boom, you're out of the program. They do boom, you're out of the program. They do it the same thing. We just wrote both it the same thing. We just wrote both exit or the people who built that wrote exit or the people who built that wrote both exit and quit because they knew both exit and quit because they knew humans were likely to pick one or the humans were likely to pick one or the other. Python is the perfect other. Python is the perfect contrast to this. In the Python contrast to this. In the Python interactive protocol, if you write exit, interactive protocol, if you write exit, it won't exit. It'll give you a fucking it won't exit. It'll give you a fucking lesson. It'll basically tell you to read lesson. It'll basically tell you to read the fucking manual. It says use exit the fucking manual. It says use exit parentheses or control D, i.e. end of parentheses or control D, i.e. end of file to exit. I'm like, one is very file to exit. I'm like, one is very human and another is very engineer. And human and another is very engineer. And I mean that both of them in the best I mean that both of them in the best possible way. possible way. possible way. &gt;&gt; Python is pedantic. Python's &gt;&gt; Python is pedantic. Python's the value from the start stated is that the value from the start stated is that there should be preferably one and only there should be preferably one and only one way to do a certain thing. Ruby goes one way to do a certain thing. Ruby goes the complete opposite. No, we want the the complete opposite. No, we want the full expression that fits different full expression that fits different human brains such that it seems like the human brains such that it seems like the language is guessing just what they language is guessing just what they want. And uh part of that is also you want. And uh part of that is also you described the principle of least described the principle of least surprise which is a difficult thing to surprise which is a difficult thing to engineer into a language because you engineer into a language because you have to kind of it's a subjective thing have to kind of it's a subjective thing what is what is what is &gt;&gt; which is why you can't do it in one way &gt;&gt; which is why you can't do it in one way which is why I use the example of both which is why I use the example of both exit and quit the principle of least exit and quit the principle of least surprise for some people would be like surprise for some people would be like oh exit that's how I get out of the oh exit that's how I get out of the prompt for other people it would be quit prompt for other people it would be quit why don't we just do both why don't we just do both &gt;&gt; okay so what's the convention over &gt;&gt; okay so what's the convention over configuration that's a big one configuration that's a big one &gt;&gt; that's a big one that's a huge one and &gt;&gt; that's a big one that's a huge one and it was born out of a frustration I had it was born out of a frustration I had in the early days with especially Java in the early days with especially Java frameworks where when you were setting frameworks where when you were setting up a web application framework for Java up a web application framework for Java back in the day, it was not uncommon to back in the day, it was not uncommon to literally write hundreds if not literally write hundreds if not thousands of lines of XML configuration thousands of lines of XML configuration files. Oh, I need this. I want um the files. Oh, I need this. I want um the database to use the foreign keys as post database to use the foreign keys as post ID. No, no, no. I want it as post ID. No, no, no. I want it as post capital I D. Oh, no, no, no. you have to capital I D. Oh, no, no, no. you have to do a capital P ID. There are all these do a capital P ID. There are all these ways where you can configure how foreign ways where you can configure how foreign relation keys should work in a database relation keys should work in a database and none of them matter. We just need to and none of them matter. We just need to pick one and then that's fine. And if we pick one and then that's fine. And if we pick one and we can depend on it, it pick one and we can depend on it, it becomes a convention. And if it's a becomes a convention. And if it's a convention, we don't have to configure convention, we don't have to configure it. And if we don't have to configure it. And if we don't have to configure it, you can get started with you it, you can get started with you actually care about much quicker. So actually care about much quicker. So convention over configuration is convention over configuration is essentially to take that idea that the essentially to take that idea that the system should come preassembled. I'm not system should come preassembled. I'm not just handing you a box of fucking Legos just handing you a box of fucking Legos and asking you to build the Millennium and asking you to build the Millennium Falcon. I'm giving you a finished toy. Falcon. I'm giving you a finished toy. You can ed you can change it. It's still You can ed you can change it. It's still built out of Legos. You can still take built out of Legos. You can still take some pieces off and put in some other some pieces off and put in some other pieces, but I'm giving you the final pieces, but I'm giving you the final product. And this cuts against the grain product. And this cuts against the grain of what most programmers love. They love of what most programmers love. They love a box of Legos. They love to put a box of Legos. They love to put everything together from scratch. They everything together from scratch. They love to make all these detailed little love to make all these detailed little decisions that just don't matter at all. decisions that just don't matter at all. And I want to elevate that up such that And I want to elevate that up such that hey, I'm not trying to take the hey, I'm not trying to take the decisions away from you. I just want you decisions away from you. I just want you to focus on decisions that actually to focus on decisions that actually matter that you truly care about. No one matter that you truly care about. No one cares about whether it's postc ID or cares about whether it's postc ID or post ID or pit. Yeah. Great defaults. post ID or pit. Yeah. Great defaults. Yeah. It's just a wonderful thing. You Yeah. It's just a wonderful thing. You have all these aspirations. They're have all these aspirations. They're going to do some kind of custom most going to do some kind of custom most beautiful Legos castle that nobody's beautiful Legos castle that nobody's ever built from these pieces. But in ever built from these pieces. But in reality to be productive in most reality to be productive in most situations you just need to build the situations you just need to build the basic thing and and then on top of that basic thing and and then on top of that is where your creativity comes. is where your creativity comes. &gt;&gt; Absolutely. And I think this is one of &gt;&gt; Absolutely. And I think this is one of those part of the doctrine that a lot of those part of the doctrine that a lot of programmers who get to use Ruby and programmers who get to use Ruby and Rails begrudgingly will acknowledge is a Rails begrudgingly will acknowledge is a nice thing even if they don't really nice thing even if they don't really like it. Like it's hard to beat the like it. Like it's hard to beat the sort of attraction to building with sort of attraction to building with Legos from scratch out of programmers. Legos from scratch out of programmers. That's just what we like. This is why That's just what we like. This is why we're programmers in the first place we're programmers in the first place because we like to put these little because we like to put these little pieces together. But we can direct that pieces together. But we can direct that instinct towards a more productive end instinct towards a more productive end of the stack. of the stack. &gt;&gt; Okay. What are some of the other ones? &gt;&gt; Okay. What are some of the other ones? &gt;&gt; The menu is amacasa. It actually comes &gt;&gt; The menu is amacasa. It actually comes out of the same principle that great out of the same principle that great defaults really matter. If you look at defaults really matter. If you look at everything that's wrong with the everything that's wrong with the JavaScript ecosystem right now, for JavaScript ecosystem right now, for example, it is that no one is in charge example, it is that no one is in charge of the menu. There are a billion of the menu. There are a billion different dishes and you can configure different dishes and you can configure just your tailored specific just your tailored specific configuration of it, but no one done the configuration of it, but no one done the work to make sure it all fits together. work to make sure it all fits together. So you have all these unique problems in So you have all these unique problems in the JavaScript ecosystem. For example, the JavaScript ecosystem. For example, there's probably 25 major ways of just there's probably 25 major ways of just doing the controller layer and then as doing the controller layer and then as many of how to talk to the database. So many of how to talk to the database. So you get this permutation of n * n * n of you get this permutation of n * n * n of no one is using the same thing and if no one is using the same thing and if they are using the same thing they're they are using the same thing they're only using the same thing for about 5 only using the same thing for about 5 minutes. So we have no retained wisdom. minutes. So we have no retained wisdom. We build up no durable skills. Rails We build up no durable skills. Rails goes the complete opposite way of saying goes the complete opposite way of saying do you know what Rails is not just a web do you know what Rails is not just a web framework. It is a complete attempt at framework. It is a complete attempt at solving the web problem. is complete solving the web problem. is complete attempt at solving everything you need attempt at solving everything you need to build a great web application. And to build a great web application. And every piece of that puzzle should every piece of that puzzle should ideally be in the box, preconfigured, ideally be in the box, preconfigured, pre-assembled. If you want to change pre-assembled. If you want to change some of those pieces later, that's some of those pieces later, that's wonderful. But on day one, you'll get a wonderful. But on day one, you'll get a full menu designed by a chef who really full menu designed by a chef who really cared about every piece of the cared about every piece of the ingredient, and you're going to enjoy ingredient, and you're going to enjoy it. it. it. And that's again one of those things And that's again one of those things where many programmers think like I know where many programmers think like I know better and they do in some hyper local better and they do in some hyper local sense of it. Every programmer knows sense of it. Every programmer knows better. This is what Ruby is built on better. This is what Ruby is built on that every programmer knows better in that every programmer knows better in their specific situation. Maybe they can their specific situation. Maybe they can do something dangerous. do something dangerous. Maybe they think they know better and Maybe they think they know better and then they blow their foot off and then then they blow their foot off and then they truly will know better because they truly will know better because they've blown their foot off once and they've blown their foot off once and won't do it again. But the the menu is won't do it again. But the the menu is that. So you in general see the value in that. So you in general see the value in the in the monolith. the in the monolith. &gt;&gt; Yes. The integrated system. &gt;&gt; Yes. The integrated system. &gt;&gt; Integrated. &gt;&gt; Integrated. &gt;&gt; Integrated. &gt;&gt; Someone thought of the whole problem. &gt;&gt; Someone thought of the whole problem. This is one of the reasons why I've been This is one of the reasons why I've been on a crusade against microservices since on a crusade against microservices since the term was coined. Microservices was the term was coined. Microservices was born out of essentially a good idea. born out of essentially a good idea. What do you do at Netflix scale when you What do you do at Netflix scale when you have thousands of engineers working on have thousands of engineers working on millions of lines of code? No one can millions of lines of code? No one can keep that entire system in their head at keep that entire system in their head at one time. You have to break it down. one time. You have to break it down. Microservices can be a reasonable way to Microservices can be a reasonable way to do that when you're at Netflix scale. do that when you're at Netflix scale. When you apply that pattern to a team of When you apply that pattern to a team of 20 programmers working on a codebase of 20 programmers working on a codebase of half a million lines of code, you're an half a million lines of code, you're an idiot. You just don't need to turn idiot. You just don't need to turn method invocations into network calls. method invocations into network calls. It is the first rule of distributed It is the first rule of distributed programming. Do not distribute your programming. Do not distribute your programming. It is makes everything programming. It is makes everything harder. all the failure conditions you harder. all the failure conditions you have to consider as a programmer just have to consider as a programmer just becomes infinitely harder when there's a becomes infinitely harder when there's a network cable involved. So I hate the network cable involved. So I hate the idea of premature decomposition and idea of premature decomposition and microservices is exactly that. The microservices is exactly that. The monolith says let's try to focus on monolith says let's try to focus on building a whole system that a single building a whole system that a single human can actually understand and push human can actually understand and push that paradigm as far as possible by that paradigm as far as possible by compressing all the concepts such that compressing all the concepts such that more of it will fit into memory of a more of it will fit into memory of a single operating human and then we can single operating human and then we can have a system where I can actually have a system where I can actually understand all of basecap I can actually understand all of basecap I can actually understand all of hey both of those understand all of hey both of those systems are just over 100,000 lines of systems are just over 100,000 lines of code I've seen people do this at maybe code I've seen people do this at maybe twice maybe three times that scale and twice maybe three times that scale and then it starts breaking down once you then it starts breaking down once you get north of certainly half a million in get north of certainly half a million in lines of code. No individual human can lines of code. No individual human can do it. And that's when you get into do it. And that's when you get into maybe some degree of microservices can maybe some degree of microservices can make sense. make sense. make sense. &gt;&gt; Base Camp and Hay are both 100,000 &gt;&gt; Base Camp and Hay are both 100,000 &gt;&gt; 100,000 lines of code. &gt;&gt; 100,000 lines of code. &gt;&gt; Oh, that's small. &gt;&gt; Oh, that's small. &gt;&gt; It is considering the fact that Basec &gt;&gt; It is considering the fact that Basec Camp I think has something like 420 Camp I think has something like 420 screens, different ways and screens, different ways and configurations. configurations. configurations. &gt;&gt; Uh do you include the front end in that? &gt;&gt; Uh do you include the front end in that? &gt;&gt; No, that's the Ruby code. Well, it's &gt;&gt; No, that's the Ruby code. Well, it's front end in the sense that some of that front end in the sense that some of that Ruby code is beneficial to the to the Ruby code is beneficial to the to the front, but it's not JavaScript, for front, but it's not JavaScript, for example. Now the other thing we might example. Now the other thing we might talk about later is we write very little talk about later is we write very little JavaScript actually for all of our JavaScript actually for all of our applications. Hey which is a Gmail applications. Hey which is a Gmail competitor. Gmail ships I think 28 competitor. Gmail ships I think 28 megabytes of uncompressed JavaScript. If megabytes of uncompressed JavaScript. If you compress it I think it's about 6 you compress it I think it's about 6 megabytes. 28 megabytes. Think about how megabytes. 28 megabytes. Think about how many lines of code that is. When hey many lines of code that is. When hey launched we shipped 40 kilobytes. launched we shipped 40 kilobytes. &gt;&gt; It's trying to solve the same problem. &gt;&gt; It's trying to solve the same problem. You can solve the email client problem You can solve the email client problem with either 28 megabytes of uncompressed with either 28 megabytes of uncompressed JavaScript or with 40 kilobytes if you JavaScript or with 40 kilobytes if you do things differently. do things differently. &gt;&gt; But that comes to the same problem &gt;&gt; But that comes to the same problem essentially. This is why I have fiercely essentially. This is why I have fiercely fought splitting front end and back end fought splitting front end and back end apart. that in my opinion this was one apart. that in my opinion this was one of the great crimes against web of the great crimes against web development development development &gt;&gt; that we are still atoning for that we &gt;&gt; that we are still atoning for that we separated and divided what was and separated and divided what was and should be a unified problem-solving should be a unified problem-solving mechanism when you are working both on mechanism when you are working both on front end and back end you understand front end and back end you understand the whole system and you're not going to the whole system and you're not going to get into these camps that decompose and get into these camps that decompose and eventually you end up with shit like eventually you end up with shit like GraphQL GraphQL GraphQL &gt;&gt; okay &gt;&gt; okay &gt;&gt; okay uh let's fly through the rest of the uh let's fly through the rest of the doctrine. No one paradigm. doctrine. No one paradigm. &gt;&gt; No one paradigm goes to the fact that &gt;&gt; No one paradigm goes to the fact that Ruby is a fiercely object-oriented Ruby is a fiercely object-oriented programming language at its core, but programming language at its core, but it's also a functional programming it's also a functional programming language. This five times I told you language. This five times I told you about you can essentially do these uh about you can essentially do these uh anonymous function calls and you can anonymous function calls and you can chain them together very much in the chain them together very much in the spirit of how true functional spirit of how true functional programming languages work. Ruby has programming languages work. Ruby has even moved closer towards the functional even moved closer towards the functional programming end of the scale by making programming end of the scale by making strings immutable. strings immutable. strings immutable. Um there are ideas from all different Um there are ideas from all different disciplines of and all different disciplines of and all different paradigms of software development that paradigms of software development that can fit together. can fit together. Small talk for example was only Small talk for example was only object-oriented and that was just it. object-oriented and that was just it. Ruby tries to be mainly object-oriented Ruby tries to be mainly object-oriented but borrow a little bit of functional but borrow a little bit of functional programming a little bit of imperative programming a little bit of imperative programming be able to do all of that. programming be able to do all of that. Rails tries to do the same thing. We're Rails tries to do the same thing. We're not just going to pick one paradigm and not just going to pick one paradigm and run it through everything. Object run it through everything. Object orientation is at the center of it, but orientation is at the center of it, but it's okay to invite all these other it's okay to invite all these other disciplines in. It's okay to be disciplines in. It's okay to be inspired. It's okay to remix it. I inspired. It's okay to remix it. I actually think one of the main benefits actually think one of the main benefits of Rails is that it's a remix. I didn't of Rails is that it's a remix. I didn't invent all these ideas. I didn't come up invent all these ideas. I didn't come up with active record. I didn't come up with active record. I didn't come up with the MVC way of dividing an with the MVC way of dividing an application. I took all the great ideas application. I took all the great ideas that I had learned and picked up from that I had learned and picked up from every different um camp and I put it every different um camp and I put it together. Not because there was going to together. Not because there was going to be just one single overarching theory of be just one single overarching theory of everything, but I was going to have a everything, but I was going to have a cohesive unit that incorporated the best cohesive unit that incorporated the best from everywhere. from everywhere. from everywhere. &gt;&gt; Is that idea a bit at tension with the &gt;&gt; Is that idea a bit at tension with the beauty of the monolith system? I think beauty of the monolith system? I think the monolith the monolith the monolith can be thought of as quite roomy, quite can be thought of as quite roomy, quite as a big tent. That the monolith needs as a big tent. That the monolith needs actually to borrow a little bit of actually to borrow a little bit of functional programming for the kinds of functional programming for the kinds of problems that that excels that problems that that excels that discipline excels at solving or that discipline excels at solving or that paradigm excels at solving if you also paradigm excels at solving if you also want object orientation as its core. I want object orientation as its core. I actually think when I've looked at actually think when I've looked at functional programming languages, functional programming languages, there's a lot to love. And then I see there's a lot to love. And then I see some of the crazy contortions they have some of the crazy contortions they have to go through when part of the problem to go through when part of the problem they're solving calls for mutating they're solving calls for mutating something. And you go like, "Holy shit, something. And you go like, "Holy shit, this is a great paradigm for 90% of the this is a great paradigm for 90% of the problem." And then you're twisting problem." And then you're twisting yourself completely out of shape when yourself completely out of shape when you try to solve the last 10. you try to solve the last 10. &gt;&gt; Oo, exalt beautiful code is the next &gt;&gt; Oo, exalt beautiful code is the next one. one. one. &gt;&gt; We've talked about that at length. Then &gt;&gt; We've talked about that at length. Then here's a great example that really here's a great example that really summarizes the domain specific language summarizes the domain specific language quality of Ruby and Rails that you can quality of Ruby and Rails that you can make code actually pleasant to write and make code actually pleasant to write and read which is really funny to me because read which is really funny to me because as we talked about when I started as we talked about when I started learning programming it wasn't even a learning programming it wasn't even a consideration. I didn't even know that consideration. I didn't even know that that could be part of the premise that that could be part of the premise that that could be part of the solution that that could be part of the solution that writing code could feel as good as writing code could feel as good as writing a poem. Class project writing a poem. Class project application record belongs to account application record belongs to account has many participants class name person has many participants class name person validates presence of name. validates presence of name. &gt;&gt; See you could read it out. You didn't &gt;&gt; See you could read it out. You didn't even change anything. even change anything. &gt;&gt; It's a haiku or something, &gt;&gt; It's a haiku or something, &gt;&gt; right? Isn't that beautiful? &gt;&gt; right? Isn't that beautiful? &gt;&gt; Yeah, it's nice. It's really it's really &gt;&gt; Yeah, it's nice. It's really it's really it's really nice. There's a there's an it's really nice. There's a there's an intuitive nature to it. Okay. So, I have intuitive nature to it. Okay. So, I have specific questions there. I mean, active specific questions there. I mean, active record, just to take that tangent, that record, just to take that tangent, that has to be your favorite feature. has to be your favorite feature. &gt;&gt; It's the crown jewel of Rails. It really &gt;&gt; It's the crown jewel of Rails. It really is. It is the defining characteristic of is. It is the defining characteristic of how to work with Ruby and Rails. how to work with Ruby and Rails. &gt;&gt; And it's born in an interesting level of &gt;&gt; And it's born in an interesting level of controversy because it actually uses a controversy because it actually uses a pattern that had been described by pattern that had been described by Martin Fowler in the patterns of Martin Fowler in the patterns of enterprise application architecture. one enterprise application architecture. one of the greatest books for anyone working of the greatest books for anyone working on business systems and if you had not on business systems and if you had not read it you must pick it up immediately. read it you must pick it up immediately. Patterns of enterprise application Patterns of enterprise application architecture I think it was published in architecture I think it was published in 2001. It is one of the very few 2001. It is one of the very few programming books that I have read many programming books that I have read many times over. It's incredible. In it times over. It's incredible. In it Martin describes a bunch of different Martin describes a bunch of different patterns of how to build business patterns of how to build business systems essentially. And active record systems essentially. And active record is a little bit of a footnote in there. is a little bit of a footnote in there. The pattern is literally called active The pattern is literally called active record. You can look it up in it's record. You can look it up in it's called active erot. I wasn't even called active erot. I wasn't even creative enough to come up with a name creative enough to come up with a name of my own, of my own, &gt;&gt; but it allows the creation the marriage &gt;&gt; but it allows the creation the marriage of database and object orientation in a of database and object orientation in a way that a lot of programmers find a way that a lot of programmers find a little um off-putting. little um off-putting. &gt;&gt; They don't actually want to pollute the &gt;&gt; They don't actually want to pollute the beautiful object-oriented nature of that beautiful object-oriented nature of that kind of programming with SQL. There was kind of programming with SQL. There was a rant by Uncle Bob the other day about a rant by Uncle Bob the other day about how SQL is the worst thing ever. Blah how SQL is the worst thing ever. Blah blah. Okay, fine. Whatever. I don't blah. Okay, fine. Whatever. I don't care. This is practical. care. This is practical. &gt;&gt; We are making CRUD applications. You're &gt;&gt; We are making CRUD applications. You're taking things out of an HTML form and taking things out of an HTML form and you're sticking them into a damn you're sticking them into a damn database. It's not more complicated than database. It's not more complicated than that. The more abstractions you put in that. The more abstractions you put in between those two ends of the spectrum, between those two ends of the spectrum, the more you're just fooling yourself. the more you're just fooling yourself. This is what we're doing. We're talking This is what we're doing. We're talking to SQL databases. By the way, quick to SQL databases. By the way, quick aside, SQL was one of those things that aside, SQL was one of those things that have endured the onslaught of NoSQL have endured the onslaught of NoSQL databases, structured list data for a databases, structured list data for a better part of a decade and still reign better part of a decade and still reign supreme. SQL was a good thing to invest supreme. SQL was a good thing to invest your time in learning. Every programmer your time in learning. Every programmer working with the web should know SQL to working with the web should know SQL to a fair degree. Even if they're working a fair degree. Even if they're working with an ORM, an object relational mapper with an ORM, an object relational mapper as active record, you still need to as active record, you still need to understand SQL. What active record does understand SQL. What active record does is not so much try to abstract the SQL is not so much try to abstract the SQL away behind a different kind of paradigm away behind a different kind of paradigm as just making it less cumbersome to as just making it less cumbersome to write. Making it more amenable to build write. Making it more amenable to build domain models on top of other domain domain models on top of other domain models in a way since you don't have to models in a way since you don't have to write every damn SQL statement by hand. write every damn SQL statement by hand. &gt;&gt; We just say that active record is an OM &gt;&gt; We just say that active record is an OM which is a layer that makes it intuitive which is a layer that makes it intuitive and human interpretable to communicate and human interpretable to communicate with a database. Even simpler than that, with a database. Even simpler than that, it turns tables into classes and rows it turns tables into classes and rows into objects. I actually think SQL is into objects. I actually think SQL is very easy to understand. Most of it, you very easy to understand. Most of it, you can write some SQL golf, too. That's can write some SQL golf, too. That's very hard to understand. But SQL at its very hard to understand. But SQL at its base and much of the criticism against base and much of the criticism against SQL was it was written for human SQL was it was written for human consumption. It's actually quite rebose, consumption. It's actually quite rebose, especially if you're doing things like especially if you're doing things like inserts over and over again. It's quite inserts over and over again. It's quite ribbos. Insert into table parenthesis, ribbos. Insert into table parenthesis, enumerate every column. You want to enumerate every column. You want to insert values, parentheses, every value insert values, parentheses, every value that fits with that column. It gets that fits with that column. It gets tedious to write SQL by hand, but it's tedious to write SQL by hand, but it's actually very humanly readable. actually very humanly readable. Active record just takes that Active record just takes that tediousness away. It makes it possible tediousness away. It makes it possible to combine things in a way that a to combine things in a way that a humanly describable language just humanly describable language just doesn't. It composes things into methods doesn't. It composes things into methods and you can combine these methods and and you can combine these methods and you can build structures around them. you can build structures around them. So, I don't dislike SQL. I dislike a lot So, I don't dislike SQL. I dislike a lot of things in programming. try to get rid of things in programming. try to get rid of them. SQL wasn't really one of them. of them. SQL wasn't really one of them. It was just a sense of I don't want to It was just a sense of I don't want to write the same thing over and over write the same thing over and over again. It was a can we be a little more again. It was a can we be a little more succinct? Can we match it just slightly succinct? Can we match it just slightly better to the object orientation without better to the object orientation without trying to hide away the fact that we're trying to hide away the fact that we're persisting these objects into a persisting these objects into a database? That's where I think a lot of database? That's where I think a lot of OM went wrong. They tried to live in the OM went wrong. They tried to live in the pure world of objects, never to consider pure world of objects, never to consider that those objects had to be consistent that those objects had to be consistent into a SQL database. And then they came into a SQL database. And then they came up with convoluted way of translating up with convoluted way of translating back and forth. Active record says, do back and forth. Active record says, do you know what? Just accept it. This you know what? Just accept it. This record, this object is not going to get record, this object is not going to get saved into some NoSQL database. It's not saved into some NoSQL database. It's not going to be it's going to be saved into going to be it's going to be saved into a SQL database. So just structure the a SQL database. So just structure the whole thing around that. It's going to whole thing around that. It's going to have attributes. Those attributes are have attributes. Those attributes are going to respond to columns in the going to respond to columns in the database. It's not more complicated than database. It's not more complicated than that. Stop making it. So that. Stop making it. So &gt;&gt; yeah, but I I should say so I personally &gt;&gt; yeah, but I I should say so I personally love SQL because I'm an algorithms love SQL because I'm an algorithms person and so I love optimization. I person and so I love optimization. I love to know how the databases actually love to know how the databases actually work so I can match the SQL queries and work so I can match the SQL queries and the design of the tables such that there the design of the tables such that there is is is you know optimal squeeze the optimal you know optimal squeeze the optimal performance out of the table okay based performance out of the table okay based on the actual way that that table is on the actual way that that table is used. So I mean I I think that pushes to used. So I mean I I think that pushes to the point that like there is value in the point that like there is value in learning and understanding SQL. learning and understanding SQL. I I wonder because I I started looking I I wonder because I I started looking at active record and it looks really at active record and it looks really awesome. Does that make you lazy? Not awesome. Does that make you lazy? Not you, but uh a person that rolls in and you, but uh a person that rolls in and starts using Rails, starts using Rails, you can probably get away with never you can probably get away with never really learning SQL, right? really learning SQL, right? &gt;&gt; As long as you want to stay at the entry &gt;&gt; As long as you want to stay at the entry level of competence. And this is level of competence. And this is actually my overarching mission with actually my overarching mission with Rails is to lower the barrier of entry Rails is to lower the barrier of entry so far down that someone can start so far down that someone can start seeing stuff on the browser without seeing stuff on the browser without basically understanding anything. basically understanding anything. &gt;&gt; They can run Rails new blog, run a &gt;&gt; They can run Rails new blog, run a couple of generators, they have a whole couple of generators, they have a whole system, they don't understand anything, system, they don't understand anything, but it's an invitation to learn more. but it's an invitation to learn more. Where I get fired up, and this ties back Where I get fired up, and this ties back to the AI discussion, is when that's to the AI discussion, is when that's turned into this meme that programmers turned into this meme that programmers no longer have to be competent. They can no longer have to be competent. They can just I mean, the AI is going to figure just I mean, the AI is going to figure it out. The generators is going to it out. The generators is going to figure it out. I don't need to know SQL. figure it out. I don't need to know SQL. Active record is going to abstract it Active record is going to abstract it away from me. No, no, no, dude. Hold up. away from me. No, no, no, dude. Hold up. The path here is competence. I'm trying The path here is competence. I'm trying to teach you things. I understand I to teach you things. I understand I can't teach you everything in five can't teach you everything in five minutes. No one who's ever become good minutes. No one who's ever become good at anything worthwhile could be taught at anything worthwhile could be taught everything in five minutes. If you want everything in five minutes. If you want to be a fully well-rounded web to be a fully well-rounded web application developer, that takes years, application developer, that takes years, but you can actually become somewhat but you can actually become somewhat productive in a few days. You can have productive in a few days. You can have fun in a few days for sure. You can have fun in a few days for sure. You can have fun in a a few minutes, and a few hours. fun in a a few minutes, and a few hours. And over time, I can teach you a little And over time, I can teach you a little more. Active record says like, "Yeah, more. Active record says like, "Yeah, yeah, all right. Start here and then yeah, all right. Start here and then like uh next week we'll do a class on like uh next week we'll do a class on SQL." Uh, and actually you have this SQL." Uh, and actually you have this beautiful expression that I love that a beautiful expression that I love that a great programming language like Ruby has great programming language like Ruby has a soft ramp go the ramp goes to a soft ramp go the ramp goes to infinity. infinity. infinity. &gt;&gt; That's exactly right. &gt;&gt; That's exactly right. &gt;&gt; So yeah, it's super accessible, super &gt;&gt; So yeah, it's super accessible, super easy to get started easy to get started &gt;&gt; and it never stops. &gt;&gt; and it never stops. &gt;&gt; Yeah, &gt;&gt; Yeah, &gt;&gt; Yeah, &gt;&gt; it never there's always more to learn. &gt;&gt; it never there's always more to learn. This is one of the reasons I'm still This is one of the reasons I'm still having fun programming that I'm still having fun programming that I'm still learning new things. I can still learning new things. I can still incorporate new things. The web is deep incorporate new things. The web is deep enough as a domain. You're never going enough as a domain. You're never going to learn all of it. to learn all of it. &gt;&gt; Provide sharp knives. This is a good one &gt;&gt; Provide sharp knives. This is a good one because another way of saying this, the because another way of saying this, the opposite way of saying this, the Java opposite way of saying this, the Java way of saying is do not provide foot way of saying is do not provide foot guns, right? I don't want to give you guns, right? I don't want to give you sharp knives. You're a child. You can't sharp knives. You're a child. You can't handle a sharp knife. Here's a dull handle a sharp knife. Here's a dull butter knife. Cut your damn steak, butter knife. Cut your damn steak, right? That's a very frustrating right? That's a very frustrating experience. You want a sharp knife even experience. You want a sharp knife even though you might be able to cut though you might be able to cut yourself. I trust humans in the same way yourself. I trust humans in the same way that Matts trusts humans. Maybe you cut that Matts trusts humans. Maybe you cut off a finger. All right, you're not off a finger. All right, you're not going to do that again. Thankfully, it going to do that again. Thankfully, it was a virtual thing finger. It's going was a virtual thing finger. It's going to grow back out. Your competence is to grow back out. Your competence is going to grow. It's more fun to work going to grow. It's more fun to work with sharp tools with sharp tools &gt;&gt; and that actually contributes to the the &gt;&gt; and that actually contributes to the the ramp that goes to infinity ramp that goes to infinity &gt;&gt; to the learning &gt;&gt; to the learning &gt;&gt; value integrated systems. &gt;&gt; value integrated systems. &gt;&gt; We kind of hit on that one. This is &gt;&gt; We kind of hit on that one. This is Rails is trying to solve the whole Rails is trying to solve the whole problem of the web, not just one little problem of the web, not just one little component. It's not leaving you a bunch component. It's not leaving you a bunch of pieces you have to put together of pieces you have to put together yourself. Progress over stability. You yourself. Progress over stability. You know what? If there's one that's dated, know what? If there's one that's dated, it's probably that one. At this stage, it's probably that one. At this stage, Rails has been incredibly stable over Rails has been incredibly stable over many, many generations. The last major many, many generations. The last major release, Rails 8, was basically a no release, Rails 8, was basically a no upgrade for anyone running Rails 7. Rail upgrade for anyone running Rails 7. Rail 7 was almost a no-up upgrade for anyone 7 was almost a no-up upgrade for anyone running Rails 6. I used to think it running Rails 6. I used to think it required more churn to get progress to required more churn to get progress to stay on the leading edge of new stuff. stay on the leading edge of new stuff. And I wrote this before I experienced And I wrote this before I experienced the indignity of the 2010s in the the indignity of the 2010s in the JavaScript community where it seemed JavaScript community where it seemed like stability was not just unvalued, it like stability was not just unvalued, it was actually despised. That churn in and was actually despised. That churn in and of itself was a value we should be of itself was a value we should be pursuing that if you were still working pursuing that if you were still working with the same framework 3 months later, with the same framework 3 months later, you were an idiot. And I saw that and I you were an idiot. And I saw that and I actually recoiled and if I was going to actually recoiled and if I was going to write the doctrine today, I'd write that write the doctrine today, I'd write that differently. I wouldn't say progress differently. I wouldn't say progress over stability. Well, maybe that it'd be over stability. Well, maybe that it'd be a function of the the age of the a function of the the age of the programming language also programming language also &gt;&gt; maybe or a deeper understanding of the &gt;&gt; maybe or a deeper understanding of the problem. I think part of what's so problem. I think part of what's so fascinating about technology is that we fascinating about technology is that we have this perception that everything have this perception that everything constantly moves so fast. No, it constantly moves so fast. No, it doesn't. Everything moves at a glacial doesn't. Everything moves at a glacial pace. There is occasionally a paradigm pace. There is occasionally a paradigm shift like what's happening with AI shift like what's happening with AI right now. like what h happened with the right now. like what h happened with the introduction of the iPhone in 2007 like introduction of the iPhone in 2007 like what happened with the internet in '95 what happened with the internet in '95 that's basically the total sum of my that's basically the total sum of my career three things changed everything career three things changed everything else in between was incremental small else in between was incremental small improvements you can recognize a Rails improvements you can recognize a Rails application written in 2003 I know application written in 2003 I know because the base camp I wrote back then because the base camp I wrote back then is still operating making millions of is still operating making millions of dollars in ARR serveing customers on the dollars in ARR serveing customers on the initial version that was launched back initial version that was launched back then and it looks like the Rails code if then and it looks like the Rails code if I squint a little that I would write I squint a little that I would write today. So most things don't change even today. So most things don't change even in computing and that's actually a good in computing and that's actually a good thing. We saw with the JavaScript thing. We saw with the JavaScript ecosystem what happens when everyone ecosystem what happens when everyone gets just mad about constant churn. gets just mad about constant churn. Things don't change that often. Things don't change that often. &gt;&gt; By the way, on that small tangent, you &gt;&gt; By the way, on that small tangent, you just sort of visibly verbally changed just sort of visibly verbally changed your mind with the you of 15 years ago. your mind with the you of 15 years ago. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; That's interesting. Have you have you &gt;&gt; That's interesting. Have you have you noticed yourself changing your mind noticed yourself changing your mind quite a bit over the years? quite a bit over the years? &gt;&gt; I would say oh yes and then also oh no &gt;&gt; I would say oh yes and then also oh no in the sense that there are absolutely in the sense that there are absolutely fundamental things both about human fundamental things both about human nature about institutions about nature about institutions about programming about business that I've programming about business that I've changed my mind on. And then I've also changed my mind on. And then I've also had experiences that are almost even had experiences that are almost even more interesting where I thought I had more interesting where I thought I had changed my mind and I tried it a new way changed my mind and I tried it a new way realized why I had the original opinion realized why I had the original opinion in the first place and then gone back to in the first place and then gone back to it. So it happens both ways. The an it. So it happens both ways. The an example of the later part for example example of the later part for example was um managers at 37 signals. For the was um managers at 37 signals. For the longest time I would rail against longest time I would rail against engineering managers as an unnecessary engineering managers as an unnecessary burden on a small or even mediumsized burden on a small or even mediumsized company. And at one point, I actually company. And at one point, I actually started doubting myself a little bit. I started doubting myself a little bit. I started thinking like, you know what, started thinking like, you know what, maybe all programmers do need a maybe all programmers do need a one-on-one therapy session every week one-on-one therapy session every week with their engineering manager to be a with their engineering manager to be a whole individual. So, we tried that for whole individual. So, we tried that for a couple years where we hired some very a couple years where we hired some very good engineering managers who did good engineering managers who did engineering management the way you're engineering management the way you're supposed to do it, the way it's done all supposed to do it, the way it's done all over the place. And after that, I over the place. And after that, I thought like, no, no, I was right. This thought like, no, no, I was right. This was correct. We should not have had was correct. We should not have had managers. Um, not every programmer needs managers. Um, not every programmer needs a therapy session with an engineering a therapy session with an engineering manager every week. We don't need these manager every week. We don't need these endlessly scheduled huddles. We don't endlessly scheduled huddles. We don't need all these meetings. We just need to need all these meetings. We just need to leave people the hell alone to work on leave people the hell alone to work on problems that they enjoy for long problems that they enjoy for long stretches of uninterrupted time. That is stretches of uninterrupted time. That is where happiness is found. That's where where happiness is found. That's where productivity is found. And if you can productivity is found. And if you can get away with it, you absolutely should. get away with it, you absolutely should. Engineering management is a necessary Engineering management is a necessary evil when that breaks down. What's the evil when that breaks down. What's the case for managers then? case for managers then? &gt;&gt; The case for managers is that if you do &gt;&gt; The case for managers is that if you do have a lot of people, there's a bunch of have a lot of people, there's a bunch of work that kind of just crops up. The work that kind of just crops up. The one-on-one is one example that one-on-one is one example that programmers need someone to check in programmers need someone to check in with. There's another idealized version with. There's another idealized version that someone needs to guide the career that someone needs to guide the career of juniors, for example, to give them of juniors, for example, to give them redirecting feedback and all this other redirecting feedback and all this other stuff. And it's not that in the abstract stuff. And it's not that in the abstract I don't agree with some of those things, I don't agree with some of those things, but in practice I've found that they but in practice I've found that they often create more problems that they often create more problems that they solve. And a good example here is can solve. And a good example here is can you get feedback from someone who's not you get feedback from someone who's not better at your job than you are? You can better at your job than you are? You can get some feedback. You can get feedback get some feedback. You can get feedback on how you show up at work. Are you on how you show up at work. Are you being courteous to others? Are you being being courteous to others? Are you being a good communicator? Okay. Yes. But you a good communicator? Okay. Yes. But you can't get feedback on your work. And can't get feedback on your work. And that's more important. It's more that's more important. It's more important that you work under and with important that you work under and with someone who's better at your job than someone who's better at your job than you are if you wish to progress in your you are if you wish to progress in your career. And every single programmer I've career. And every single programmer I've ever worked with was far more interested ever worked with was far more interested in progressing in their career on that in progressing in their career on that metric, getting better at their craft, metric, getting better at their craft, than they were in picking up pointers than they were in picking up pointers that a middle manager could teach them. that a middle manager could teach them. That's not saying that there isn't value That's not saying that there isn't value in it. It's not saying there isn't value in it. It's not saying there isn't value in being a better person or a better in being a better person or a better communicator. Of course, there is all communicator. Of course, there is all those things. But if I have to choose those things. But if I have to choose one or the other, I value competence one or the other, I value competence higher. Right? That's again, I cavit higher. Right? That's again, I cavit this a million times because I know what this a million times because I know what people sometimes hear. They hear the people sometimes hear. They hear the genius asshole is just fine and that's genius asshole is just fine and that's great and you should excuse all sorts of great and you should excuse all sorts of malicious behavior. Someone just really malicious behavior. Someone just really good at what they do. I'm not saying good at what they do. I'm not saying that at all. What I am saying is that that at all. What I am saying is that the history of competence is a history the history of competence is a history of learning from people who are better of learning from people who are better than you. And that relationship should than you. And that relationship should take precedence over all else. And that take precedence over all else. And that relationship gets put aside a bit when relationship gets put aside a bit when engineering managers introduced. Now the engineering managers introduced. Now the funny thing is this conversation ties funny thing is this conversation ties back to the earlier things we were back to the earlier things we were talking about. Most engineering managers talking about. Most engineering managers are actually former programmers. They at are actually former programmers. They at least know programming to some extent. least know programming to some extent. But what I've seen time and again is But what I've seen time and again is that they lose their touch, their feel that they lose their touch, their feel with it very very quickly and turn into with it very very quickly and turn into pointy-haired bosses very very quickly pointy-haired bosses very very quickly who are really good at checking for who are really good at checking for updates just seeing where we are on uh updates just seeing where we are on uh project A here if you need anything or project A here if you need anything or we ready to deliver to okay yes and also we ready to deliver to okay yes and also no just shut up leave me the hell alone no just shut up leave me the hell alone let me program and then I'll come up for let me program and then I'll come up for air I'll talk with other programmers who air I'll talk with other programmers who I can spar that we can learn something I can spar that we can learn something with, I can turn the problems over with with, I can turn the problems over with and we can move forward. If you look and we can move forward. If you look back on the history of computer back on the history of computer industry, all the great innovation industry, all the great innovation that's happened, it's all been done by that's happened, it's all been done by tiny teams with no engineering managers, tiny teams with no engineering managers, just full of highly skilled individuals. just full of highly skilled individuals. You've had uh John Karmag on here. You've had uh John Karmag on here. I used to look up to its software so I used to look up to its software so much, not just because I loved Quick, much, not just because I loved Quick, not just because I loved what they were not just because I loved what they were doing, but because he shared a bit about doing, but because he shared a bit about how the company worked. There were no how the company worked. There were no managers, or maybe they had one business managers, or maybe they had one business guy doing some business stuff, but that guy doing some business stuff, but that was just to get paid. Everything else was just to get paid. Everything else was basically just designers and was basically just designers and programmers, and there were about eight programmers, and there were about eight of them, and they created a goddamn of them, and they created a goddamn Quake, too. So, why do you need all Quake, too. So, why do you need all these people again? Why do you need all these people again? Why do you need all these managers again? Um, I think again these managers again? Um, I think again at a certain scale, it does break down. at a certain scale, it does break down. It's hard to just have 100 thousand It's hard to just have 100 thousand programmers running around wild without programmers running around wild without any product mommies or daddies telling any product mommies or daddies telling them what to do. I understand that. And them what to do. I understand that. And then even as I say that, I also don't then even as I say that, I also don't understand it because if you look at understand it because if you look at something like Gmail, for example, there something like Gmail, for example, there was like a side project done by Busher U was like a side project done by Busher U at Google at the time. So much of the at Google at the time. So much of the enduring long-term value of even all enduring long-term value of even all these huge companies were created by these huge companies were created by people who didn't have a goddamn people who didn't have a goddamn manager. And that's not an accident. manager. And that's not an accident. That's a direct cause and effect. So, That's a direct cause and effect. So, I've turned in some way even more I've turned in some way even more militant over the years against this militant over the years against this notion of management, at least for notion of management, at least for myself and knowing who I am and how I myself and knowing who I am and how I want to work because the other part of want to work because the other part of this is I don't want to be a manager. this is I don't want to be a manager. And maybe this is just me projecting the And maybe this is just me projecting the fact that I'm an introvert who don't fact that I'm an introvert who don't like to talk to people in one-on-one like to talk to people in one-on-one calls every week. But it also calls every week. But it also encapsulates how I was able to progress encapsulates how I was able to progress my career. I did not really go to the my career. I did not really go to the next level with Ruby or otherwise until next level with Ruby or otherwise until I had a door I could close and no one I had a door I could close and no one could bother me for six hours straight. could bother me for six hours straight. So in companies probably one of the So in companies probably one of the reasons is it's very easy to hire reasons is it's very easy to hire managers managers managers and uh managers also and uh managers also delegate responsibility from you. delegate responsibility from you. So if if you just have a bunch of So if if you just have a bunch of programmers running around you're kind programmers running around you're kind of respons like you it's it's it's work. of respons like you it's it's it's work. It's intellectual work to have to deal It's intellectual work to have to deal with the the first principles of every with the the first principles of every problem that's going on. problem that's going on. &gt;&gt; So managers like &gt;&gt; So managers like &gt;&gt; you can like relax. Oh be taken care of. &gt;&gt; you can like relax. Oh be taken care of. uh but they then hire their own managers uh but they then hire their own managers and it just multiplies and multiplies and it just multiplies and multiplies and multiplies. I would love it if some and multiplies. I would love it if some of the great companies we have uh in the of the great companies we have uh in the United States if there was like an extra United States if there was like an extra side branch that we could always run side branch that we could always run maybe physicists can come up how to maybe physicists can come up how to split the simulation to where just all split the simulation to where just all the managers are removed also just with the managers are removed also just with it just just in that branch just the PR it just just in that branch just the PR and the comm's people also and even the and the comm's people also and even the lawyers just engineers and let's just lawyers just engineers and let's just see and then we merge it back see and then we merge it back &gt;&gt; I've essentially run that branch at 37 &gt;&gt; I've essentially run that branch at 37 signals for 20 years and I've signals for 20 years and I've experimented with forking back on the experimented with forking back on the other side. I've experimented with other side. I've experimented with having a full-time lawyer on staff. I've having a full-time lawyer on staff. I've experimented with having engineering experimented with having engineering managers. And I can tell you life is managers. And I can tell you life is much better at 50 60 people when none of much better at 50 60 people when none of those individuals or none of those those individuals or none of those roles. It's never about the individuals. roles. It's never about the individuals. It's about the roles. None of those It's about the roles. None of those roles are in your organization roles are in your organization full-time. Occasionally, you need a full-time. Occasionally, you need a manager. Occasionally, you need a manager. Occasionally, you need a lawyer. I can play the role of manager. lawyer. I can play the role of manager. occasionally occasionally occasionally fine and then I can set it back down to fine and then I can set it back down to zero. It's almost like the like a cloud zero. It's almost like the like a cloud service. I want a manager service I can service. I want a manager service I can call on for seven hours this week and call on for seven hours this week and then I want to take it down to zero for then I want to take it down to zero for the next 3 months. the next 3 months. &gt;&gt; Yeah, I read I don't know if this is &gt;&gt; Yeah, I read I don't know if this is still the case that Base Camp is an LLC still the case that Base Camp is an LLC and doesn't have a CFO like a full-time and doesn't have a CFO like a full-time accountant. Is that accountant. Is that &gt;&gt; what's funny is these days we do have a &gt;&gt; what's funny is these days we do have a head of finance. We did not for the head of finance. We did not for the first first first 19 years of life I think. Um we got away 19 years of life I think. Um we got away with basically just having an accountant with basically just having an accountant do our books in the same way you do a do our books in the same way you do a small ice cream shop except we would small ice cream shop except we would over the times have done hundreds of over the times have done hundreds of millions of dollars in revenue. The millions of dollars in revenue. The scale seemed quirky and at some point scale seemed quirky and at some point you can also fall in love with your own you can also fall in love with your own quirkiness to a degree that isn't quirkiness to a degree that isn't actually healthy. And I've certainly actually healthy. And I've certainly done that over time. And we should have done that over time. And we should have had someone mount or count the beans a had someone mount or count the beans a little more diligently, a little little more diligently, a little earlier, which was part of a blessing of earlier, which was part of a blessing of just being wildly profitable and selling just being wildly profitable and selling software that can have infinite margins. software that can have infinite margins. Basically, that you kind of can get away Basically, that you kind of can get away with a bunch of stuff that you perhaps with a bunch of stuff that you perhaps shouldn't. What partially taught me this shouldn't. What partially taught me this lesson was when we realized we had not lesson was when we realized we had not been collecting sales tax in different been collecting sales tax in different US states where we had nexus. And it US states where we had nexus. And it took us about two years and $5 million took us about two years and $5 million in settlements and cleanups to get out in settlements and cleanups to get out of that mess. And after that, I went of that mess. And after that, I went like, "Okay, fine. We can hire a finance like, "Okay, fine. We can hire a finance person." person." person." &gt;&gt; Okay. &gt;&gt; Okay. &gt;&gt; Okay. &gt;&gt; And we now have a wonderful finance &gt;&gt; And we now have a wonderful finance person, Ron, who actually ended up person, Ron, who actually ended up replacing something else we used to replacing something else we used to have. We used to have a full-time data have. We used to have a full-time data analytics person who would do all sorts analytics person who would do all sorts of insight mining for why are people of insight mining for why are people signing up for this thing. We ran that signing up for this thing. We ran that for 10 years and realized, you know for 10 years and realized, you know what, if I can have either a data what, if I can have either a data analytics person or an accountant, I'm analytics person or an accountant, I'm picking the accountant. I love this so picking the accountant. I love this so much on so many levels. Can we just much on so many levels. Can we just linger on that advice that you've given linger on that advice that you've given that small teams are better? that small teams are better? I think that's really less less is is is I think that's really less less is is is more. What did you say before worse is more. What did you say before worse is better. better. better. &gt;&gt; Okay. I'm sorry. &gt;&gt; Okay. I'm sorry. &gt;&gt; Worse is better on adoption with &gt;&gt; Worse is better on adoption with technology a lot of times. Yeah. technology a lot of times. Yeah. &gt;&gt; And I think actually comes out of the &gt;&gt; And I think actually comes out of the same thing. It comes out of the fact same thing. It comes out of the fact that many of the great breakthroughs are that many of the great breakthroughs are created by not even just tiny teams but created by not even just tiny teams but individuals. Individuals writing individuals. Individuals writing something and an individual writing something and an individual writing something on some parameter what they do something on some parameter what they do is worse. Of course it's worse when one is worse. Of course it's worse when one person has to make something that a huge person has to make something that a huge company have hundreds if not thousands company have hundreds if not thousands of developers that they can have work on of developers that they can have work on that problem. But in so many other that problem. But in so many other parameters that worseness is the value. parameters that worseness is the value. That less is the value. In getting real, That less is the value. In getting real, which we wrote back in 2006, we talk which we wrote back in 2006, we talk about this notion of less software. When about this notion of less software. When we first got started with Base Camp back we first got started with Base Camp back in 2004, people would ask us all the in 2004, people would ask us all the time, "Aren't you petrified of time, "Aren't you petrified of Microsoft? They have so many more Microsoft? They have so many more resources. They have so many more resources. They have so many more programmers. What if they take a liking programmers. What if they take a liking to your little niche here and they show to your little niche here and they show up and they just throw a thousand up and they just throw a thousand programmers at the problem? And my programmers at the problem? And my answer, perhaps partly because I was answer, perhaps partly because I was like 24, was first of all, no, no care like 24, was first of all, no, no care in the world. But the real answer was, in the world. But the real answer was, they're not going to produce the same they're not going to produce the same thing. You cannot produce the kind of thing. You cannot produce the kind of software that Base Camp is with a team software that Base Camp is with a team of a thousand people. You will build the of a thousand people. You will build the kind of software that a thousand people kind of software that a thousand people build. And that's not the same thing at build. And that's not the same thing at all. So so much of the main breakthrough all. So so much of the main breakthrough in both end user systems but also in in both end user systems but also in open source systems in fundamental open source systems in fundamental system they're done by individuals or system they're done by individuals or very small teams even all these very small teams even all these classical histories of Apple has always classical histories of Apple has always been like well it was a big organization been like well it was a big organization but then you had the team that was but then you had the team that was actually working on the breakthrough it actually working on the breakthrough it was four people it was eight people it was four people it was eight people it was never 200 was never 200 &gt;&gt; and large team seems to slow things down &gt;&gt; and large team seems to slow things down &gt;&gt; yes &gt;&gt; yes &gt;&gt; yes &gt;&gt; it's it's so fascinating thing and part &gt;&gt; it's it's so fascinating thing and part of it is the manager thing of it is the manager thing &gt;&gt; cuz humans don't scale. Communication &gt;&gt; cuz humans don't scale. Communication between humans certainly don't scale. between humans certainly don't scale. You basically get the network cost You basically get the network cost effect. Every time you add a new node, effect. Every time you add a new node, it goes up exponentially. it goes up exponentially. This is perhaps the key thing of why I This is perhaps the key thing of why I get to be so fond of having no managers get to be so fond of having no managers at base camp because our default team at base camp because our default team size is two. size is two. &gt;&gt; One programmer, one designer, one &gt;&gt; One programmer, one designer, one feature. When you're operating at that feature. When you're operating at that level of scale, you don't need level of scale, you don't need sophistication. You don't need advanced sophistication. You don't need advanced methodologies. You don't need multiple methodologies. You don't need multiple layers of management because you can layers of management because you can just do the magic of small teams is that just do the magic of small teams is that they just do. They don't have to argue they just do. They don't have to argue because we don't have to set direction. because we don't have to set direction. We have to don't to worry about the road We have to don't to worry about the road map. We can just sit down and make map. We can just sit down and make something and then see if it's good. something and then see if it's good. When you can get away with just making When you can get away with just making things, you don't have to plan. And if things, you don't have to plan. And if you can get out of planning, you can you can get out of planning, you can follow the truth that emerges from the follow the truth that emerges from the code, from the product, from the thing code, from the product, from the thing you're working on in the moment. You you're working on in the moment. You know far more about what the great next know far more about what the great next step is when you're one step behind step is when you're one step behind rather than if you try 18 months in rather than if you try 18 months in advance to map out all the steps. How do advance to map out all the steps. How do we get from here to very far away? You we get from here to very far away? You know what? That's difficult to imagine know what? That's difficult to imagine in advance because humans are very poor in advance because humans are very poor at that. Maybe AI one day will be much at that. Maybe AI one day will be much better than it than us. But humans can better than it than us. But humans can take one foot or put one foot in front take one foot or put one foot in front of each other. That's not that hard. And of each other. That's not that hard. And that allows you to get away with all that allows you to get away with all that sophistication. So the process just that sophistication. So the process just become much simpler. You need far fewer become much simpler. You need far fewer people. It compounds. You need much less people. It compounds. You need much less pro uh pro process. You need to waste pro uh pro process. You need to waste less time in meetings. You can just less time in meetings. You can just spend these long, glorious days and spend these long, glorious days and weeks of uninterrupted time solving real weeks of uninterrupted time solving real problems you care about and that are problems you care about and that are valuable. And you're gonna find that valuable. And you're gonna find that that's what the market actually wants. that's what the market actually wants. No one is buying something because No one is buying something because there's a huge company behind it. Most there's a huge company behind it. Most of the time they're buying something of the time they're buying something because it's good. And the way you get because it's good. And the way you get something good is something good is you don't sit around and have a meeting you don't sit around and have a meeting about it. You try stuff. You build about it. You try stuff. You build stuff. stuff. stuff. &gt;&gt; It really is kind of incredible what one &gt;&gt; It really is kind of incredible what one person, honestly, one person can do in person, honestly, one person can do in 100 hours of deep work, of focused work, 100 hours of deep work, of focused work, even less. even less. even less. &gt;&gt; So, I'll tell you this. I tracked &gt;&gt; So, I'll tell you this. I tracked exactly the number of hours I spend on exactly the number of hours I spend on the first version of Base Camp. And I the first version of Base Camp. And I was doing this because at the time I was was doing this because at the time I was working on a contract basis for Jason. working on a contract basis for Jason. He was paying me I was going to say $15 He was paying me I was going to say $15 an hour. That's what I got paid when we an hour. That's what I got paid when we first got started. I think he had bumped first got started. I think he had bumped my pay to a glorious 25. But I was my pay to a glorious 25. But I was billing him. And I know that the invoice billing him. And I know that the invoice for the first version of Base Camp was for the first version of Base Camp was 400 hours. That's what it took for one 400 hours. That's what it took for one sole individual in 2004 to create an sole individual in 2004 to create an entire system that has then gone on to entire system that has then gone on to gross hundreds of millions of dollars gross hundreds of millions of dollars and continues to um do extremely well. and continues to um do extremely well. One person, just me setting up One person, just me setting up everything. Part of that story is Ruby, everything. Part of that story is Ruby, part of that story is Rails, but a lot part of that story is Rails, but a lot of it is also just me plus Jason plus uh of it is also just me plus Jason plus uh Ryan plus Matt. That was the entire Ryan plus Matt. That was the entire company at the time. And we could create company at the time. And we could create something of sheer sustaining value with something of sheer sustaining value with such a tiny team because we were a tiny such a tiny team because we were a tiny team. Not the spite of small is not a team. Not the spite of small is not a stepping stone. This is the other thing stepping stone. This is the other thing that people get into their head. This is that people get into their head. This is one of the big topics of a rework that one of the big topics of a rework that it gave entrepreneurs the permission to it gave entrepreneurs the permission to embrace being a small team. Not as a way embrace being a small team. Not as a way point, not as like I'm trying to become point, not as like I'm trying to become a thousand people. No, I actually like a thousand people. No, I actually like being a small team. Small teams are more being a small team. Small teams are more fun. If you ask almost anyone, fun. If you ask almost anyone, &gt;&gt; I'm sure Toby would say this too, even &gt;&gt; I'm sure Toby would say this too, even at his scale, the sheer enjoyment of at his scale, the sheer enjoyment of building something is in the enjoyment building something is in the enjoyment of building it with a tiny team. Now, of building it with a tiny team. Now, you can have impact at a different scale you can have impact at a different scale when you have a huge company. I fully when you have a huge company. I fully recognize that and I see the appeal of recognize that and I see the appeal of it. But in the actual building of it. But in the actual building of things, it's always small teams. Always. things, it's always small teams. Always. &gt;&gt; How do you protect a small team? Base &gt;&gt; How do you protect a small team? Base camp has successfully stayed small. has camp has successfully stayed small. has been the dragon you had to fight off been the dragon you had to fight off that like basically you make a lot of that like basically you make a lot of money. money. money. There's a temptation to grow. So how do There's a temptation to grow. So how do you not grow? you not grow? &gt;&gt; Don't take venture capital. &gt;&gt; Don't take venture capital. &gt;&gt; Okay, that's step one. &gt;&gt; Okay, that's step one. &gt;&gt; Point number one. &gt;&gt; Point number one. &gt;&gt; First of all, everybody takes venture &gt;&gt; First of all, everybody takes venture capital. So you already you already capital. So you already you already went. went. went. &gt;&gt; I mean that's been the the answer for &gt;&gt; I mean that's been the the answer for the longest time because the problem the longest time because the problem isn't just venture capital. It's other isn't just venture capital. It's other people's money. Once you take other people's money. Once you take other people's money, completely people's money, completely understandably, they want a return and understandably, they want a return and they would prefer to have the largest they would prefer to have the largest return possible because it's not them return possible because it's not them sitting in the code. It's not them sitting in the code. It's not them getting the daily satisfaction out of getting the daily satisfaction out of building something, chiseling beautiful building something, chiseling beautiful code poems out of the editor, right? code poems out of the editor, right? They don't get that satisfaction. They They don't get that satisfaction. They get the satisfaction maybe of seeing get the satisfaction maybe of seeing something nice put into the world. something nice put into the world. That's fair. But they certainly also get That's fair. But they certainly also get a satisfaction of a higher return. And a satisfaction of a higher return. And there is this sense certainly in venture there is this sense certainly in venture capital stated in venture capital that capital stated in venture capital that the whole point of you taking the money the whole point of you taking the money is to get to a billion dollars or more. is to get to a billion dollars or more. Now the path to that usually does go Now the path to that usually does go through running established playbooks through running established playbooks and then when it comes to software the and then when it comes to software the enterprise sales playbook is that enterprise sales playbook is that playbook. If you're doing B2B software, playbook. If you're doing B2B software, SAS, you will try to find product market SAS, you will try to find product market fit and the second you have it, you will fit and the second you have it, you will abandon your small and medium-sized abandon your small and medium-sized accounts to chase the big whales with a accounts to chase the big whales with a huge sales force. And by then, you're a huge sales force. And by then, you're a thousand people, and life sucks. thousand people, and life sucks. &gt;&gt; Mhm. Uh that said, you you uh I mean, &gt;&gt; Mhm. Uh that said, you you uh I mean, people are just curious about this. I've people are just curious about this. I've gotten a chance uh to get to know Jeff gotten a chance uh to get to know Jeff Bezos. He invested in base camp Bezos. He invested in base camp non-controlling. He bought secondaries. non-controlling. He bought secondaries. So this was the funny thing is that when So this was the funny thing is that when investing have these two dual meanings. investing have these two dual meanings. Normally when people think about Normally when people think about investing they think you're putting in investing they think you're putting in growth growth capital because you want growth growth capital because you want the business to hire more people to do the business to hire more people to do more R&amp;D so they can grow bigger. Basis more R&amp;D so they can grow bigger. Basis didn't do that actually. He bought a didn't do that actually. He bought a ownership stake directly from Jason and ownership stake directly from Jason and I and 100% of the pro proceeds of that I and 100% of the pro proceeds of that purchase went into my and Jason's bank purchase went into my and Jason's bank account. personal bank accounts. Not a account. personal bank accounts. Not a single cent went into the account of the single cent went into the account of the company because we didn't need the money company because we didn't need the money to grow. What we needed or what we to grow. What we needed or what we certainly enjoyed was certainly enjoyed was to some extent maybe the vote of to some extent maybe the vote of confidence but more so the security of confidence but more so the security of taking a little bit off the tables is taking a little bit off the tables is that we dare turn down the big bucks that we dare turn down the big bucks from venture capitals. It was from venture capitals. It was essentially a vaccine against wanting to essentially a vaccine against wanting to take a larger check from people who then take a larger check from people who then wanted to take the company to something wanted to take the company to something enormous that we didn't want to go with enormous that we didn't want to go with it. So Jeff it. So Jeff gave Jason and I just enough money that gave Jason and I just enough money that we were comfortable turning all those we were comfortable turning all those people down in a way where if it had people down in a way where if it had turned belly up like 6 months later we turned belly up like 6 months later we wouldn't have been kicking ourselves and wouldn't have been kicking ourselves and calling we had something here that was calling we had something here that was worth millions and now we have nothing worth millions and now we have nothing and I have to worry about rent and and I have to worry about rent and groceries again. groceries again. groceries again. &gt;&gt; I it is a vote of confidence. I wonder &gt;&gt; I it is a vote of confidence. I wonder from uh I'd love to hear Jeff's side of from uh I'd love to hear Jeff's side of the story of like why cuz he he he the story of like why cuz he he he doesn't need like the money. doesn't need like the money. So, it's really I think it probably is So, it's really I think it probably is just believing in people and wanting to just believing in people and wanting to have cool stuff be created in the world have cool stuff be created in the world and make money off of it, but not like and make money off of it, but not like &gt;&gt; 100% the motivation for Jeff wasn't a &gt;&gt; 100% the motivation for Jeff wasn't a return because he actually has a team, return because he actually has a team, he's private office that runs these he's private office that runs these investments who did the calculus on the investments who did the calculus on the investment pitch we gave him, which was investment pitch we gave him, which was so ridiculous that Jason and I were so ridiculous that Jason and I were laughing our asses off when we were laughing our asses off when we were writing down our metrics. I was like, writing down our metrics. I was like, "No one's going to pay this. No one is "No one's going to pay this. No one is going to give us this multiple of this going to give us this multiple of this amount of revenue." And that's fine. I amount of revenue." And that's fine. I mean, we took the call essentially out mean, we took the call essentially out of kind of an awe that Jeff Bezos even of kind of an awe that Jeff Bezos even wanted to look at us and like, do you wanted to look at us and like, do you know what? We don't want venture know what? We don't want venture capital. We don't need other people's capital. We don't need other people's money, but like, let's just give him a money, but like, let's just give him a bullshit number that no sane person bullshit number that no sane person would actually say yes to. And then, I would actually say yes to. And then, I mean, we can we can each go our own way. mean, we can we can each go our own way. And his investment team said, like, And his investment team said, like, Jeff, no way. This makes no economic Jeff, no way. This makes no economic sense at all. They're asking for way too sense at all. They're asking for way too much money with way too little revenue. much money with way too little revenue. And Jeff just went like, I don't care. I And Jeff just went like, I don't care. I want to invest in these guy. Because to want to invest in these guy. Because to him at the time, it was chump change, him at the time, it was chump change, right? Like Jason and I each got a few right? Like Jason and I each got a few million dollars. I mean, whatever the million dollars. I mean, whatever the currency swing between the yen and the currency swing between the yen and the dollar that day, probably moved 10x that dollar that day, probably moved 10x that for his net worth than our investment for his net worth than our investment did. Jeff seemed genuinely interested in did. Jeff seemed genuinely interested in being around interesting people, being around interesting people, interesting companies, helping someone interesting companies, helping someone go to distance. And I actually look back go to distance. And I actually look back on that relationship with some degree of on that relationship with some degree of regret because I took that vote of regret because I took that vote of confidence for granted in ways that I'm confidence for granted in ways that I'm a little bit ashamed of over the years. a little bit ashamed of over the years. I've been more critical about some of I've been more critical about some of the things that Amazon had done that I the things that Amazon had done that I feel now is sort of justified. So that's feel now is sort of justified. So that's just sort of part of that processing um just sort of part of that processing um of it. But on the economic sense, he of it. But on the economic sense, he gave us that confidence. He gave us the gave us that confidence. He gave us the economic confidence, but then he also economic confidence, but then he also gave us the confidence of a CEO running gave us the confidence of a CEO running perhaps at the time the most important perhaps at the time the most important internet business in the US, showing up internet business in the US, showing up to our calls, which we would have with to our calls, which we would have with him like once a year and basically just him like once a year and basically just going like, "Yeah, you guys are doing going like, "Yeah, you guys are doing awesome stuff. You should just keep awesome stuff. You should just keep doing awesome stuff. I read your book. doing awesome stuff. I read your book. It's awesome. You launched this thing. It's awesome. You launched this thing. It's awesome. You should just do more of It's awesome. You should just do more of that. I don't actually know how to run that. I don't actually know how to run your business. You guys know." So the your business. You guys know." So the book goes out because I'm I'm just so book goes out because I'm I'm just so from a fan perspective from a fan perspective am curious about how Jeff Bezos was able am curious about how Jeff Bezos was able to see because to me you and Jason are to see because to me you and Jason are like special humans in the space of tech like special humans in the space of tech and the fact that Jeff was able to see and the fact that Jeff was able to see that right. How hard is it to see that? that right. How hard is it to see that? &gt;&gt; He certainly saw it very early and I &gt;&gt; He certainly saw it very early and I think this is something that Jeff does think this is something that Jeff does better than almost anyone else. he spots better than almost anyone else. he spots that opportunity so far in advance of that opportunity so far in advance of anyone else even open their eyes to it anyone else even open their eyes to it or certainly he's willing to bet on it or certainly he's willing to bet on it far early and far harder than anyone far early and far harder than anyone else is and he's just right time and else is and he's just right time and again I mean we were not the only again I mean we were not the only investment that he made and certainly investment that he made and certainly Amazon had a extremely long-term vision Amazon had a extremely long-term vision so far longer than I have ever had the so far longer than I have ever had the gumption to keep like I think of myself gumption to keep like I think of myself as a long-term thinker I'm playing a as a long-term thinker I'm playing a child's game compared to the game that child's game compared to the game that Jeff is playing. Like when I looked at Jeff is playing. Like when I looked at Amazon's economics around the dot boom Amazon's economics around the dot boom and bust, they looked ridiculous. Like and bust, they looked ridiculous. Like they were losing so much money. They they were losing so much money. They were so hated by the market. They were were so hated by the market. They were no one believed that it was going to no one believed that it was going to turn into what it is. But Jeff did in a turn into what it is. But Jeff did in a way that that level of conviction I way that that level of conviction I really aspire to. And I think that's one really aspire to. And I think that's one of the main things I've taken away from of the main things I've taken away from that relationship is that you can just that relationship is that you can just believe in yourself to that degree believe in yourself to that degree against those odds. That's ridiculous. against those odds. That's ridiculous. He did that at so many times our level He did that at so many times our level that it's pathetic if I'm doubting that it's pathetic if I'm doubting myself. myself. myself. &gt;&gt; Yeah, I think Amazon is one of those &gt;&gt; Yeah, I think Amazon is one of those companies. companies. companies. I mean, it's come under a bunch of I mean, it's come under a bunch of criticism over the years. criticism over the years. Uh this is something about humans that Uh this is something about humans that don't appreciate so much that we take don't appreciate so much that we take for granted the positive that a thing for granted the positive that a thing brings real quick and then we just start brings real quick and then we just start criticizing the thing. It's with the criticizing the thing. It's with the Wi-Fi and the airplanes. Wi-Fi and the airplanes. &gt;&gt; That's exactly it. &gt;&gt; That's exactly it. &gt;&gt; But I think I think Amazon there could &gt;&gt; But I think I think Amazon there could be a case made that Amazon is be a case made that Amazon is one of the greatest companies in the one of the greatest companies in the last hundred years. last hundred years. &gt;&gt; For sure. I think it's an easy case to &gt;&gt; For sure. I think it's an easy case to make. What I also think is that the make. What I also think is that the price you pay to be one of the greatest price you pay to be one of the greatest companies in the last hundred years is a companies in the last hundred years is a lot of detractors, a lot of push back, a lot of detractors, a lot of push back, a lot of criticism that this is actually lot of criticism that this is actually order restored in the universe. One of order restored in the universe. One of my favorite teachers in all the time my favorite teachers in all the time I've been on the internet is Kathy I've been on the internet is Kathy Sierra. I don't know if you know her Sierra. I don't know if you know her work, but she was actually for only a work, but she was actually for only a few short years before the cruel few short years before the cruel internet ran her off, but she wrote a internet ran her off, but she wrote a blog called creating passionate users. blog called creating passionate users. And she carved into my brain this notion And she carved into my brain this notion of balance in the universe. If you're of balance in the universe. If you're creating something of value that a lot creating something of value that a lot of people love, you must create an equal of people love, you must create an equal and opposite force of haters. You cannot and opposite force of haters. You cannot have people who love what you do without have people who love what you do without also having people who hate what you do. also having people who hate what you do. The only escape from that is mediocrity. The only escape from that is mediocrity. If you are so boring and so If you are so boring and so uninteresting that no one gives a damn uninteresting that no one gives a damn whether you exist or not, yeah, you whether you exist or not, yeah, you don't get the haters, but you also don't don't get the haters, but you also don't get the impact of people who really get the impact of people who really enjoy your work. And I think Amazon is enjoy your work. And I think Amazon is that just at the massive scale, right? that just at the massive scale, right? They've brought so much value and change They've brought so much value and change to technology, to commerce that they to technology, to commerce that they must simply have a black hole size of must simply have a black hole size of haters, otherwise the universe is simply haters, otherwise the universe is simply going to tip over. Uh let me ask you going to tip over. Uh let me ask you about small teams. So you mentioned about small teams. So you mentioned Jason a bunch of times. Jason Freed, you Jason a bunch of times. Jason Freed, you have been partners for a long long time. have been partners for a long long time. Perhaps it's fair to say he's more on Perhaps it's fair to say he's more on the sort of the design business side. the sort of the design business side. You're like the tech the engineering You're like the tech the engineering wizard. Uh how have you guys over all wizard. Uh how have you guys over all these years creating so many amazing these years creating so many amazing products not murder each other? It's products not murder each other? It's it's a great story of like partnership. it's a great story of like partnership. What's what can you say about What's what can you say about collaboration? What can you say that collaboration? What can you say that about Jason that that that you love that about Jason that that that you love that you've learned from? Uh why does this you've learned from? Uh why does this work? work? work? &gt;&gt; So first I'll say we have tried to &gt;&gt; So first I'll say we have tried to murder each other several times over the murder each other several times over the years but far less I think in the last years but far less I think in the last decade. In the early days, our product decade. In the early days, our product discussions were so fierce that when we discussions were so fierce that when we were having them in the office and there were having them in the office and there were other employees around, some of were other employees around, some of them were legitimately worried that the them were legitimately worried that the company was about to fall apart because company was about to fall apart because the volume coming out of the room would the volume coming out of the room would be so high and sound so acrimonious be so high and sound so acrimonious that they were legitimately worried the that they were legitimately worried the whole thing was going to fall apart. But whole thing was going to fall apart. But you know what's funny is that it never you know what's funny is that it never felt like that in the moment. It always felt like that in the moment. It always felt like just a peak vigorous search felt like just a peak vigorous search for something better. for something better. And that we were able to stomach that And that we were able to stomach that level of adversity on the merits of an level of adversity on the merits of an idea because it was about the idea. It idea because it was about the idea. It wasn't about the person. And it never wasn't about the person. And it never really got personal. Not even never really got personal. Not even never really. It didn't get personal. It really. It didn't get personal. It wasn't like, Jason, you're an asshole. wasn't like, Jason, you're an asshole. It was like, Jason, you're an idiot, and It was like, Jason, you're an idiot, and you're an idiot because you're looking you're an idiot because you're looking at this problem the wrong way, and let at this problem the wrong way, and let me tell you the right way to do it. me tell you the right way to do it. &gt;&gt; As a small tangent, let me say that some &gt;&gt; As a small tangent, let me say that some some people have said, we'll probably some people have said, we'll probably return to this, that uh you're sometimes return to this, that uh you're sometimes uh uh can have flights of uh temper on uh uh can have flights of uh temper on the internet and so on. I I never take the internet and so on. I I never take it that way because it is the same kind it that way because it is the same kind of ilk. Maybe I haven't seen the right of ilk. Maybe I haven't seen the right kind of uh uh traces of temper, but kind of uh uh traces of temper, but usually it's about the idea and it's usually it's about the idea and it's just excited, passionate, human. just excited, passionate, human. &gt;&gt; That's ex exactly what I like to think &gt;&gt; That's ex exactly what I like to think of it as. It doesn't always come across of it as. It doesn't always come across as that. And I can see why spectators in as that. And I can see why spectators in particular sometimes particular sometimes particular sometimes would see something that looks like I'm would see something that looks like I'm going after the man rather than the going after the man rather than the ball. And I I do think I've tried to get ball. And I I do think I've tried to get better at that. But in my relationship better at that. But in my relationship with Jason, I think it's worked so well with Jason, I think it's worked so well because we have our own distinct areas because we have our own distinct areas of competence where we fully trust each of competence where we fully trust each other. Jason trusts me to make the other. Jason trusts me to make the correct technical decisions. I trust him correct technical decisions. I trust him to make the correct design and product to make the correct design and product direction decisions and then we can direction decisions and then we can overlap and share on the business, on overlap and share on the business, on marketing, on writing, on other aspects marketing, on writing, on other aspects of it. So that's one thing is that if of it. So that's one thing is that if you're starting a business with someone you're starting a business with someone where you do exactly the same as they do where you do exactly the same as they do and you're constantly contesting who is and you're constantly contesting who is the more competent person, I think the more competent person, I think that's far more difficult and far more that's far more difficult and far more volatile. So if you're starting a volatile. So if you're starting a business and you're both programmers and business and you're both programmers and you both work on the same kind of you both work on the same kind of programming, programming, programming, ah good luck. I think that's hard. I ah good luck. I think that's hard. I tried to pick an easier path working tried to pick an easier path working with a designer where I knew that at with a designer where I knew that at least half of the time I could just least half of the time I could just delegate to his experience and delegate to his experience and competence and say like you know what I competence and say like you know what I may have an opinion I have an opinion may have an opinion I have an opinion all the time on design but I don't have all the time on design but I don't have to win the argument because I trust you. to win the argument because I trust you. Now occasionally we would have overlaps Now occasionally we would have overlaps on business or direction where we'd both on business or direction where we'd both feel like we had a strong stake in the feel like we had a strong stake in the game and we both had a claim to game and we both had a claim to competence in that area. But then for competence in that area. But then for whatever reason, we also both had a whatever reason, we also both had a long-term vision where I would go, do long-term vision where I would go, do you know what? I think we're wrong here. you know what? I think we're wrong here. But as I learned from Jeff Bezos, by the But as I learned from Jeff Bezos, by the way, I'm going to disagree and commit. way, I'm going to disagree and commit. That was one of those early lessons he That was one of those early lessons he gave us that was absolutely crucial and gave us that was absolutely crucial and perhaps even instrumental in ensuring perhaps even instrumental in ensuring that Jason and I have been working that Jason and I have been working together for a quarter of a century. together for a quarter of a century. Disagree and commit is one of the Disagree and commit is one of the all-time Jeff Bezos greats. all-time Jeff Bezos greats. &gt;&gt; I'm just surprised that Yokoono hasn't &gt;&gt; I'm just surprised that Yokoono hasn't come along. You know what I mean? like come along. You know what I mean? like there there's there there's there there's there's so many yokos in this world. there's so many yokos in this world. &gt;&gt; It might have happened if not in part &gt;&gt; It might have happened if not in part because we don't sit on each other's lap because we don't sit on each other's lap all the time. Most of our careers we all the time. Most of our careers we haven't even lived in the same city. haven't even lived in the same city. Like I lived in Chicago for a couple of Like I lived in Chicago for a couple of years while we were getting going after years while we were getting going after I' had moved to the US in 2005. But then I' had moved to the US in 2005. But then I moved to Malibu and then I lived in I moved to Malibu and then I lived in Spain and then I lived in Copenhagen and Spain and then I lived in Copenhagen and Jason Ry from the foundation of our Jason Ry from the foundation of our relationship relationship relationship learned how to work together in a learned how to work together in a remarkably efficient way where we didn't remarkably efficient way where we didn't have to actually talk that much on any have to actually talk that much on any given week. I'd be surprised if Jason given week. I'd be surprised if Jason and I spent more than 2 hours of direct and I spent more than 2 hours of direct exchange and communication. exchange and communication. &gt;&gt; Yeah. Sometimes it's the the basic human &gt;&gt; Yeah. Sometimes it's the the basic human frictions that just up against another frictions that just up against another person, that person damn well better be person, that person damn well better be your spouse if it's too much for too your spouse if it's too much for too long. long. long. &gt;&gt; Yeah. But even there &gt;&gt; Yeah. But even there co co has really test the relationship. co co has really test the relationship. It's fascinating to watch. It's fascinating to watch. &gt;&gt; It has and I do think that having some &gt;&gt; It has and I do think that having some separation which is kind of separation which is kind of counterintuitive because I think a lot counterintuitive because I think a lot of people think the more collaboration of people think the more collaboration you can have the better. The more ideas you can have the better. The more ideas they can bounce back and forth the they can bounce back and forth the better. And both Jason and I for better. And both Jason and I for whatever reason came to the conclusion whatever reason came to the conclusion early on in careers absolutely not. early on in careers absolutely not. That's complete baloney. This is why we That's complete baloney. This is why we were huge proponents of remote work. were huge proponents of remote work. This is why I enjoy working in my home This is why I enjoy working in my home office where I can close the door and office where I can close the door and not see another human for like 6 hours not see another human for like 6 hours at the time. I don't want to bounce at the time. I don't want to bounce ideas off you all the time. I want to ideas off you all the time. I want to bounce ideas off you occasionally and bounce ideas off you occasionally and then I want to go off and implement then I want to go off and implement those ideas. There's way too much those ideas. There's way too much bouncing going on and not enough bouncing going on and not enough scoring, not enough dunking. And I think scoring, not enough dunking. And I think this is one of the great traps of this is one of the great traps of executive rule. Once a founder elevates executive rule. Once a founder elevates themselves all the way up to an themselves all the way up to an executive where what they're doing is executive where what they're doing is just telling other people what to do. just telling other people what to do. That's the realm they live in 24/7. They That's the realm they live in 24/7. They just live in the idea realm. Oh, I can just live in the idea realm. Oh, I can just tell more people more things what just tell more people more things what to do and we can just see it happen. If to do and we can just see it happen. If you actually have to be part of you actually have to be part of implementing that, you slow your horse. implementing that, you slow your horse. You think like, you know what, I had a You think like, you know what, I had a good idea last week. I I'm going to save good idea last week. I I'm going to save the rest of my good ideas until next the rest of my good ideas until next month. And there is a temptation for the month. And there is a temptation for the managers and for the exe for the people managers and for the exe for the people in the executive layer to do to do do in the executive layer to do to do do something which that something usually something which that something usually means a meeting. means a meeting. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Right. And so that's why you say &gt;&gt; Right. And so that's why you say &gt;&gt; their job is telling other people what &gt;&gt; their job is telling other people what to do. to do. to do. &gt;&gt; Yeah. And the meeting So this is one of &gt;&gt; Yeah. And the meeting So this is one of the big things you're against is the big things you're against is &gt;&gt; meetings are toxic. &gt;&gt; meetings are toxic. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; And this really I think ties into this &gt;&gt; And this really I think ties into this with Jason Ry. If I had to count out the with Jason Ry. If I had to count out the total number of meetings we've had in 24 total number of meetings we've had in 24 years of collaborations where we in years of collaborations where we in person sat in front of each other and person sat in front of each other and discussed a topic, I probably it'd be discussed a topic, I probably it'd be less than whatever 3 months at a fan less than whatever 3 months at a fan company. We just haven't done that that company. We just haven't done that that much and we haven't worn it out. One of much and we haven't worn it out. One of this funny metaphors that Trump came up this funny metaphors that Trump came up with at one point was a human has like a with at one point was a human has like a limited number of steps in their life, limited number of steps in their life, right? Like that's the longevity right? Like that's the longevity argument here. You can do you can do so argument here. You can do you can do so much activity and then you run out. much activity and then you run out. There's some kernel in that idea that There's some kernel in that idea that can be applied to a relationship. can be applied to a relationship. There's some amount of exchange we can There's some amount of exchange we can have. There's some amount of time we can have. There's some amount of time we can spend together where you can wear it spend together where you can wear it out. Jason and I were diligent about not out. Jason and I were diligent about not wearing each other out. And I think that wearing each other out. And I think that is absolutely key to the longevity of is absolutely key to the longevity of the relationship combined with that the relationship combined with that level of trust. And then just combining level of trust. And then just combining with the level that we really like the with the level that we really like the work itself. We don't just like the work itself. We don't just like the brainstorming, the the says where we brainstorming, the the says where we just come up with good ideas. No, we just come up with good ideas. No, we like to do the ideas and we like to be like to do the ideas and we like to be part of that process directly ourselves. part of that process directly ourselves. I like to program. He likes to do I like to program. He likes to do design. We could go off and do our design. We could go off and do our little things for long stretches of little things for long stretches of time. Occasionally, come together and go time. Occasionally, come together and go like, "Hey, let's launch a great like, "Hey, let's launch a great product." This might sound like I'm product." This might sound like I'm asking you to do therapy. asking you to do therapy. But I find myself to sometimes want or But I find myself to sometimes want or long for a meeting because I'm lonely. long for a meeting because I'm lonely. Like cuz it remote work, just sitting by Like cuz it remote work, just sitting by yourself, yourself, yourself, I don't know. It can get really lonely I don't know. It can get really lonely for long stretches of time. for long stretches of time. &gt;&gt; Let me give you a tip. &gt;&gt; Let me give you a tip. &gt;&gt; Uhhuh. &gt;&gt; Uhhuh. &gt;&gt; Uhhuh. &gt;&gt; Get a wife. &gt;&gt; Get a wife. &gt;&gt; God damn it. &gt;&gt; God damn it. &gt;&gt; Get Get a couple kids. &gt;&gt; Get Get a couple kids. &gt;&gt; All right. &gt;&gt; All right. &gt;&gt; Like family really is the great antidote &gt;&gt; Like family really is the great antidote to loneliness. And I mean that as to loneliness. And I mean that as sincerely as I can possibly say it. I sincerely as I can possibly say it. I certainly had exactly that feeling you certainly had exactly that feeling you described earlier in my career when I described earlier in my career when I was working remotely. And I was just was working remotely. And I was just like me living in an apartment, a total like me living in an apartment, a total stereotype where for the longest time stereotype where for the longest time when I first moved to Chicago, all I had when I first moved to Chicago, all I had on the floor was a mattress. And then I on the floor was a mattress. And then I bought this big TV and I didn't even bought this big TV and I didn't even mount it. And then I had a stack of DVDs mount it. And then I had a stack of DVDs and I was basically I was working a lot and I was basically I was working a lot of time and then I would just go home of time and then I would just go home and I'd do that. And it wasn't great. It and I'd do that. And it wasn't great. It really wasn't. Like I do think that really wasn't. Like I do think that humans need humans humans need humans &gt;&gt; and if you can't get them at work and I &gt;&gt; and if you can't get them at work and I actually sort of kind of don't want them actually sort of kind of don't want them at work at least. I don't want them for at work at least. I don't want them for 40 hours a week. That's not what I 40 hours a week. That's not what I prefer. You need something else. You prefer. You need something else. You need other relationships in your life. need other relationships in your life. And there is no greater depth of And there is no greater depth of relationship if you can find someone relationship if you can find someone that you actually just want to spend a that you actually just want to spend a lot of time with. That's key to it. And lot of time with. That's key to it. And I think it's key for both Jason and I I think it's key for both Jason and I that we've had families for quite a long that we've had families for quite a long time. And it grounds you too in a way time. And it grounds you too in a way where the sprint of a startup can get where the sprint of a startup can get traded in for the marathon of an traded in for the marathon of an enduring company and you get settled in enduring company and you get settled in a way. We talked briefly about sometimes a way. We talked briefly about sometimes I get fired up. I mean a lot of times I get fired up. I mean a lot of times maybe even most of the times I get fired maybe even most of the times I get fired up about topics up about topics &gt;&gt; but I don't get fired up in the same way &gt;&gt; but I don't get fired up in the same way now as I used to when I was 24. I'm now as I used to when I was 24. I'm still extremely passionate about ideas still extremely passionate about ideas and trying to find the right things, but and trying to find the right things, but having a family, meeting my wife, having a family, meeting my wife, building a life around that has just building a life around that has just mellowed everything out in a completely mellowed everything out in a completely cliche way. But it I think it's actually cliche way. But it I think it's actually key. I think if we could get more even key. I think if we could get more even younger people not to wait until they younger people not to wait until they were in their late goddamn 30s or early were in their late goddamn 30s or early 40s to hitch up with someone, we'd be 40s to hitch up with someone, we'd be better off and we'd have more stable better off and we'd have more stable business relationships as well because business relationships as well because folks would get that nurturing human folks would get that nurturing human relation somewhere else. Now, when I say relation somewhere else. Now, when I say all of that, I also accept that there all of that, I also accept that there are plenty of great businesses that's are plenty of great businesses that's been built over the years that have not been built over the years that have not been built remote, that have been built been built remote, that have been built by a gang of hooligans sitting in an by a gang of hooligans sitting in an office for immense hours of time. I office for immense hours of time. I mean, both John Carmarmac and Tim mean, both John Carmarmac and Tim Sweeney talked about that in the '9s Sweeney talked about that in the '9s with their careers that that was just with their careers that that was just basically work, sleep, hang out with the basically work, sleep, hang out with the guys at the office, right? Totally fair. guys at the office, right? Totally fair. That never appealed to me. Both Jason That never appealed to me. Both Jason and I saw eye to eye on the idea that 40 and I saw eye to eye on the idea that 40 hours a week dedicated to work was hours a week dedicated to work was enough. That if we were going to go to enough. That if we were going to go to distance for not just the 5 to seven distance for not just the 5 to seven years it takes to build a VC case up to years it takes to build a VC case up to an exit but for potentially 10 years, 20 an exit but for potentially 10 years, 20 years or further. We needed to become years or further. We needed to become whole humans because the only that whole whole humans because the only that whole humanness was going to go to distance humanness was going to go to distance which included building up friendships which included building up friendships outside of work, having hobbies, outside of work, having hobbies, finding a mate and having a family. And finding a mate and having a family. And that that that entire entire entire existence, those legs of the stool that existence, those legs of the stool that work is not the only thing in life is work is not the only thing in life is completely completely completely related to the fact that we've been related to the fact that we've been around for 25 years. There's way too around for 25 years. There's way too much, especially in America, of false much, especially in America, of false trade-offs. Oh, you want to build a trade-offs. Oh, you want to build a successful business? Well, you can successful business? Well, you can either have uh money, enjoyment, family, either have uh money, enjoyment, family, or health. Pick one. or health. Pick one. &gt;&gt; What? Why do we have to give up all of &gt;&gt; What? Why do we have to give up all of this? Now again, I'm not saying that this? Now again, I'm not saying that there aren't moments payers in life there aren't moments payers in life where you can sprint, but I am saying if where you can sprint, but I am saying if that sprint turns into a decade, you're that sprint turns into a decade, you're going to pay for it. And you're going to going to pay for it. And you're going to pay for it in ways I've seen time and pay for it in ways I've seen time and again seemed like a very bad trade that again seemed like a very bad trade that even if it works, and by the way, most even if it works, and by the way, most of the time it does not. Most of the of the time it does not. Most of the time startups go bust. Most of the time time startups go bust. Most of the time people spend five, seven years or people spend five, seven years or something that does not pan out and they something that does not pan out and they don't get the payout and then they just don't get the payout and then they just sit with regret of like what the fuck sit with regret of like what the fuck happened to my 20s. happened to my 20s. &gt;&gt; Early on, Jason and I basically made the &gt;&gt; Early on, Jason and I basically made the pact that working together was not going pact that working together was not going to lead to that kind of regret that we to lead to that kind of regret that we were going to allow ourselves and each were going to allow ourselves and each other to build a whole life outside of other to build a whole life outside of work. And work. And work. And the fact that that worked is something I the fact that that worked is something I feel feel feel is almost like forbidden knowledge. is almost like forbidden knowledge. Certainly in technology circles in the Certainly in technology circles in the US, it's something that we've tried to US, it's something that we've tried to champion for 20 years and we still get champion for 20 years and we still get slacked for. Just two days ago, I had slacked for. Just two days ago, I had another Twitter beef with someone saying another Twitter beef with someone saying like, "Oh, well, okay, maybe it worked, like, "Oh, well, okay, maybe it worked, but you didn't turn into Atlassian, so but you didn't turn into Atlassian, so you're a failure. You base camp isn't you're a failure. You base camp isn't Jira, so why are you even bothering?" Jira, so why are you even bothering?" And it's such a fascinating winner takes And it's such a fascinating winner takes all mentality that unless you dominate all mentality that unless you dominate everyone else in all the ways, you've everyone else in all the ways, you've lost when so much of life is far more lost when so much of life is far more open to multiple winners. Where we can open to multiple winners. Where we can end up with a business that have made end up with a business that have made hundreds of millions of dollars over the hundreds of millions of dollars over the years and we've kept much of that to do years and we've kept much of that to do whatever we want. And that that's whatever we want. And that that's enough. That's good. That's great. enough. That's good. That's great. that's actually that's actually that's actually something worth aspiring to. Certainly, something worth aspiring to. Certainly, it should be a path for someone to it should be a path for someone to consider choosing rather than the VC consider choosing rather than the VC unicorn and bust mentality that unicorn and bust mentality that dominates everything. dominates everything. dominates everything. &gt;&gt; Yeah. I'd love to ask you about this &gt;&gt; Yeah. I'd love to ask you about this exchange so you can explain to me the exchange so you can explain to me the whole saga. But so just to link on that whole saga. But so just to link on that a little bit is I think there's a notion a little bit is I think there's a notion that success that success that success for a tech founder is like work for a for a tech founder is like work for a few years all out and then few years all out and then uh exit sort of sell your company for I uh exit sort of sell your company for I don't know hundreds of millions of don't know hundreds of millions of dollars that's success when it seems in dollars that's success when it seems in reality when you look at who the reality when you look at who the people like you like really smart people like you like really smart creative humans who they actually are creative humans who they actually are and what happiness entails. and what happiness entails. It actually entails working your whole It actually entails working your whole life a little bit. Just like cuz you life a little bit. Just like cuz you actually love the programming, you love actually love the programming, you love the building, you love the designer, and the building, you love the designer, and you don't want to exit. And that's you don't want to exit. And that's something you've talked about really uh something you've talked about really uh really eloquently about. So like you really eloquently about. So like you actually want to create a life where actually want to create a life where you're always doing the building and you're always doing the building and doing it in a way that's not completely doing it in a way that's not completely taking over your life. taking over your life. &gt;&gt; Mojito Island is a mirage. It always &gt;&gt; Mojito Island is a mirage. It always was. There is no retirement for was. There is no retirement for ambitious people. There is no just ambitious people. There is no just sitting back on the beach and sipping a sitting back on the beach and sipping a mojito for what? For two weeks before mojito for what? For two weeks before you go damn crazy and want to get back you go damn crazy and want to get back into the action. That's exactly what into the action. That's exactly what happens to most people who have the happens to most people who have the capacity to build those kinds of exits. capacity to build those kinds of exits. I've never seen I shouldn't say never. I've never seen I shouldn't say never. I've almost never seen anyone be able to I've almost never seen anyone be able to pull that off. Yet so many think that pull that off. Yet so many think that that's why they're doing it. That's why that's why they're doing it. That's why they're sacrificing everything. Because they're sacrificing everything. Because once I get to the finish line, I'm once I get to the finish line, I'm golden. I've won. I can retire. I can golden. I've won. I can retire. I can sit back. I can just relax. And you find sit back. I can just relax. And you find out that that kind of relaxation is out that that kind of relaxation is actually hell. actually hell. actually hell. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; It's hell for creative people to &gt;&gt; It's hell for creative people to squander their god-given creative juices squander their god-given creative juices and capacities. and capacities. and capacities. And I was really lucky to read the book And I was really lucky to read the book Flow by Mihi Chicken Mihayi early on. Flow by Mihi Chicken Mihayi early on. &gt;&gt; Nice. the pronunciations. &gt;&gt; Nice. the pronunciations. &gt;&gt; You know what? I had to practice that &gt;&gt; You know what? I had to practice that with AI over the last few days because I with AI over the last few days because I knew I was gonna cite him and I knew I was gonna cite him and I butchered his name several times. So, AI butchered his name several times. So, AI taught me how to pronounce that um at taught me how to pronounce that um at least somewhat correctly. But his main least somewhat correctly. But his main work over his career was essentially the work over his career was essentially the concept of flow concept of flow &gt;&gt; that came out of a search for &gt;&gt; that came out of a search for understanding happiness. Why are some understanding happiness. Why are some people happy? When are they happy? And people happy? When are they happy? And what he learned was quite illuminating. what he learned was quite illuminating. He learned that people aren't happy when He learned that people aren't happy when they sit on Mojito Island. They're not they sit on Mojito Island. They're not happy when they're free of all happy when they're free of all obligations and responsibilities. No, obligations and responsibilities. No, they're happy in these moments where they're happy in these moments where they're reaching and stretching their they're reaching and stretching their capacities just beyond what they can capacities just beyond what they can currently do. In those moments of flow, currently do. In those moments of flow, they can forget time and space. They can they can forget time and space. They can sit in front of the keyboard, program a sit in front of the keyboard, program a hard problem, think 20 minutes have hard problem, think 20 minutes have passed, and suddenly it's been three passed, and suddenly it's been three hours. They look back upon those moments hours. They look back upon those moments with the greatest amount of joy. And with the greatest amount of joy. And that is what peak happiness is. If you that is what peak happiness is. If you take away the pursuit of those kinds of take away the pursuit of those kinds of problems, if you eliminate all the problems, if you eliminate all the problems from your plate, you're going problems from your plate, you're going to get depressed. You're are not going to get depressed. You're are not going to have a good time. Now, there are to have a good time. Now, there are people who can do that, but they're not people who can do that, but they're not the same kind of people who built these the same kind of people who built these kinds of companies. So, you have to kinds of companies. So, you have to accept the kind of individual you are. accept the kind of individual you are. If you are on this path, don't bullshit If you are on this path, don't bullshit yourself. Don't bullshit yourself into yourself. Don't bullshit yourself into thinking, I'm just going to sacrifice thinking, I'm just going to sacrifice everything, my health, my family, my everything, my health, my family, my hobbies, my friends, but in 10 years I'm hobbies, my friends, but in 10 years I'm going to make it all up because in 10 going to make it all up because in 10 years I can do it. It never works out years I can do it. It never works out like that. It doesn't even It doesn't like that. It doesn't even It doesn't work out on both ends of it. It does not work out on both ends of it. It does not work out if you're successful and you work out if you're successful and you sell your company because you'll get sell your company because you'll get bored out of your mind after two weeks bored out of your mind after two weeks on retirement. It doesn't work out if on retirement. It doesn't work out if the company is a failure and you regret the company is a failure and you regret the last 10 years spent for nothing. It the last 10 years spent for nothing. It doesn't work out if it all works and you doesn't work out if it all works and you stay in the business because it never stay in the business because it never gets any easier. So, you're going to gets any easier. So, you're going to fail on all metrics if you just go fail on all metrics if you just go there's only work and nothing else. And there's only work and nothing else. And I didn't want that. I wanted the I didn't want that. I wanted the happiness of flow. I understood that happiness of flow. I understood that insight was true, but I wanted to do it insight was true, but I wanted to do it in a way where I could sustain the in a way where I could sustain the journey for 40 or 50 years. And uh journey for 40 or 50 years. And uh there's another other interesting caveat there's another other interesting caveat that I've heard you say is that if you that I've heard you say is that if you do exit, you sell your company and you do exit, you sell your company and you want to stay in, you want to do another want to stay in, you want to do another company, that's going to usually not be company, that's going to usually not be as fulfilling. as fulfilling. as fulfilling. &gt;&gt; Yes. Cuz really your first baby like you &gt;&gt; Yes. Cuz really your first baby like you can't do it again or most people can't can't do it again or most people can't do it again. A because their second idea do it again. A because their second idea is not going to be as good as the first is not going to be as good as the first one. It is so rare to capture lightning one. It is so rare to capture lightning in the bottle like we have for example in the bottle like we have for example with base camp. I know this from with base camp. I know this from experience because I've been trying to experience because I've been trying to build a lot of other businesses since build a lot of other businesses since and some of them have been moderate and some of them have been moderate successes, even good successes. None of successes, even good successes. None of them have been base camp. It's really them have been base camp. It's really difficult to do that twice. But founders difficult to do that twice. But founders are arrogant pricks, including myself. are arrogant pricks, including myself. And we like to think that you know what, And we like to think that you know what, we succeeded in large part because we're we succeeded in large part because we're just awesome. We're just so much better just awesome. We're just so much better than everyone else. And in some ways, than everyone else. And in some ways, that's true some of the time. But you that's true some of the time. But you can also be really good at something can also be really good at something that matters for a hot moment that that that matters for a hot moment that that door is open, the door closes. Now door is open, the door closes. Now you're still good at the thing, but it you're still good at the thing, but it doesn't matter. No one cares. doesn't matter. No one cares. There's that part of it. And then There's that part of it. And then there's the part of it that there's the part of it that going back to experience things for the going back to experience things for the first time only happens the first time. first time only happens the first time. You can't do it again. I don't know if I You can't do it again. I don't know if I have it in me to go through the bullshit have it in me to go through the bullshit of the early days again. And I say of the early days again. And I say bullshit in the sense of the most bullshit in the sense of the most endearing sense. It's all great to do endearing sense. It's all great to do it. I know too much. This is one of the it. I know too much. This is one of the reasons why whenever I'm asked the reasons why whenever I'm asked the questions, if you could tell your questions, if you could tell your younger self um something that would younger self um something that would really What would you say to your really What would you say to your younger self? I would fucking not say a younger self? I would fucking not say a thing. I would not rob my younger self thing. I would not rob my younger self of all the life experiences that I've of all the life experiences that I've been blessed with due to the ignorance been blessed with due to the ignorance of how the world works. Building up the of how the world works. Building up the wisdom about how the world works is wisdom about how the world works is a joy. And you got to build it one brick a joy. And you got to build it one brick at a time. If you just handed all the at a time. If you just handed all the results, it's like, "Oh, should we watch results, it's like, "Oh, should we watch your movie?" Here's how it ends. I don't your movie?" Here's how it ends. I don't want to f watch the movie now. You You want to f watch the movie now. You You spoiled it. I don't want you to spoil my spoiled it. I don't want you to spoil my business experience. I don't want to business experience. I don't want to spoil any of my ignorance. The greatest spoil any of my ignorance. The greatest blessing half the time when you're blessing half the time when you're starting something new is a you don't starting something new is a you don't know how hard it's going to be. B, you know how hard it's going to be. B, you don't know what you don't know. Like the don't know what you don't know. Like the adventure is the payoff. The adventure is the payoff. The responsibility is the payoff. This is responsibility is the payoff. This is something Jordan Peterson has really something Jordan Peterson has really taught me to articulate this notion that taught me to articulate this notion that responsibility is actually key to responsibility is actually key to meaning. Um, meaning. Um, meaning. Um, man's search for meaning. Victor Frankle man's search for meaning. Victor Frankle talks about this as well that we can talks about this as well that we can endure any hardship if there is a reason endure any hardship if there is a reason why. Now he talked about it in truly why. Now he talked about it in truly lifealtering lifealtering lifealtering concentration camp ways but you can also concentration camp ways but you can also apply it at a smaller scale with less apply it at a smaller scale with less criticality of even just your daily life criticality of even just your daily life that all that hardship in building the that all that hardship in building the original business that is responsibility original business that is responsibility you take upon yourself the appeal the you take upon yourself the appeal the reason you take that on you is in part reason you take that on you is in part because you don't know fully what it because you don't know fully what it entails if you had known up front if id entails if you had known up front if id known up front how hard it would be how known up front how hard it would be how much much much frustration there'd be along the way if frustration there'd be along the way if you told me that in a narrative before I you told me that in a narrative before I got started, I would have been like, got started, I would have been like, "Ah, maybe I should just go get a job." "Ah, maybe I should just go get a job." &gt;&gt; You said so many smart things there just &gt;&gt; You said so many smart things there just to pick one. to pick one. It It's funny that sometimes the advice It It's funny that sometimes the advice givers, the wisdom givers are have gone givers, the wisdom givers are have gone through all the bullshit. And so there through all the bullshit. And so there is a degree to which you want to make is a degree to which you want to make the mistake. So I think I think I would the mistake. So I think I think I would still give the advice of you want to still give the advice of you want to have a stretch of your life where you have a stretch of your life where you work too hard including at a thing that work too hard including at a thing that fails. I don't think you can learn the fails. I don't think you can learn the lessons why that's a bad idea in any lessons why that's a bad idea in any other way except by doing it. There is a other way except by doing it. There is a degree but of course you don't degree but of course you don't &gt;&gt; I think you should stretch. Should you &gt;&gt; I think you should stretch. Should you have to stretch for a decade? I'm not so have to stretch for a decade? I'm not so sure. sure. sure. &gt;&gt; Yeah. The decade thing is 20s is a &gt;&gt; Yeah. The decade thing is 20s is a special time. special time. special time. &gt;&gt; It's a lot to trade. You don't get your &gt;&gt; It's a lot to trade. You don't get your 20s back. You don't get your 30s back, 20s back. You don't get your 30s back, you don't get your 40s back. You really you don't get your 40s back. You really I would have regretted personally if I I would have regretted personally if I hadn't done the other things I did in my hadn't done the other things I did in my 20s. If I hadn't had the fun I had, if I 20s. If I hadn't had the fun I had, if I hadn't have the friends I had, if I hadn't have the friends I had, if I hadn't built up the hobbies that I did, hadn't built up the hobbies that I did, if I hadn't started driving race cars at if I hadn't started driving race cars at an early enough age to actually get an early enough age to actually get really good at it. If I had just gone really good at it. If I had just gone all in on business because I would have all in on business because I would have got the same out in the end. This is got the same out in the end. This is something Derek Civers really taught me something Derek Civers really taught me is he has this great essay about how is he has this great essay about how when he went for a bike ride, he could when he went for a bike ride, he could go really hard all out and he could do go really hard all out and he could do the ride I think in whatever 19 minutes the ride I think in whatever 19 minutes or he could enjoy the ride, go 5% or he could enjoy the ride, go 5% slower, do the ride in 21 minutes slower, do the ride in 21 minutes and realize there's only two minutes and realize there's only two minutes apart. Either I go all in all the time, apart. Either I go all in all the time, there's nothing else. I'm completely there's nothing else. I'm completely exhausted at the out end or I travel the exhausted at the out end or I travel the same distance and I arrive maybe 2 same distance and I arrive maybe 2 minutes later but I got to enjoy the minutes later but I got to enjoy the scenery, listen to the birds, smell the scenery, listen to the birds, smell the flowers. That journey flowers. That journey is also valuable. Now I say that while is also valuable. Now I say that while accepting and celebrating that if you accepting and celebrating that if you want to be the best at one thing in the want to be the best at one thing in the world, no, you have to sacrifice world, no, you have to sacrifice everything. You have to be obsessed with everything. You have to be obsessed with just that thing. There is no instant of just that thing. There is no instant of someone who's the best in the world at someone who's the best in the world at something who's not completely obsessed something who's not completely obsessed at. I didn't need the best at anything. at. I didn't need the best at anything. This was a a blessing of a rare blessing This was a a blessing of a rare blessing of humility I had early on is like, do of humility I had early on is like, do you know what? I am not that smart. I'm you know what? I am not that smart. I'm not that good. I'm not that talented. I not that good. I'm not that talented. I can do interesting things by combining can do interesting things by combining different aspects and elements that I different aspects and elements that I know, but I'm not going to be the best know, but I'm not going to be the best at anything. And that released me from at anything. And that released me from this singular obsession which is going this singular obsession which is going like I'm gonna be the best programmer in like I'm gonna be the best programmer in the world. I know I'm not. I fucking the world. I know I'm not. I fucking failed at it twice before I even got how failed at it twice before I even got how conditionals worked. I'm not smart conditionals worked. I'm not smart enough to be the best at anything. I'm enough to be the best at anything. I'm not dedicated enough to do that. That's not dedicated enough to do that. That's a bit of a blessing. And I think as a a bit of a blessing. And I think as a society we have to straddle both society we have to straddle both celebrating peak excellence which we do celebrating peak excellence which we do all the time and celebrating the peak all the time and celebrating the peak intensity intensity intensity of mission it takes to become that and of mission it takes to become that and then also going like you know what we then also going like you know what we don't all need to be Michael Jordan. don't all need to be Michael Jordan. There's only going to be one of those. There's only going to be one of those. Well we should say that there's certain Well we should say that there's certain pursuits where a singular obsession is pursuits where a singular obsession is required. Basketball is one of them. by required. Basketball is one of them. by the way, probably racing. If you want to the way, probably racing. If you want to be the best at F1 in the world, be the best at F1 in the world, &gt;&gt; if you want to be Senna, you got to be a &gt;&gt; if you want to be Senna, you got to be a maniac. maniac. maniac. &gt;&gt; But I would argue that there's most &gt;&gt; But I would argue that there's most disciplines like programming disciplines like programming allows if you want to be quote unquote allows if you want to be quote unquote the best, whatever that means. I think the best, whatever that means. I think that's judged at the end of your life. that's judged at the end of your life. And usually if you look at that path, And usually if you look at that path, it's going to be a nonlinear one. It it's going to be a nonlinear one. It you're not going to look like the life you're not going to look like the life of an Olympic athlete who singular of an Olympic athlete who singular focus. You're going to there's going to focus. You're going to there's going to be some acid there in the 20s or there's be some acid there in the 20s or there's going to be a det several detours going to be a det several detours which the true greats there's going to which the true greats there's going to be detours and sometimes they're not be detours and sometimes they're not going to be Steve Jobs asset type of going to be Steve Jobs asset type of situation. They'll be just different situation. They'll be just different companies you worked for, different companies you worked for, different careers or different uh sort of efforts careers or different uh sort of efforts you allocated your life to. But it's you allocated your life to. But it's going to be nonlinear. It's not it's not going to be nonlinear. It's not it's not going to be a singular focus. going to be a singular focus. &gt;&gt; The way I think about this sometimes is &gt;&gt; The way I think about this sometimes is I want a good bargain on learning. I can I want a good bargain on learning. I can become in the top 5% of whatever I become in the top 5% of whatever I defined as good at something defined as good at something much much easier. Perhaps it's 20 times much much easier. Perhaps it's 20 times easier, 100 times easier to get into the easier, 100 times easier to get into the top 5% than it is to get into the top top 5% than it is to get into the top 0.1%. That's almost impossibly hard to 0.1%. That's almost impossibly hard to get into that. But if I'm content just get into that. But if I'm content just being in the top 5%, I can be in the top being in the top 5%, I can be in the top 5% on like five things at once. I can 5% on like five things at once. I can get really good at writing. I can get get really good at writing. I can get decent at driving a race car. I can decent at driving a race car. I can become pretty good at programming. I can become pretty good at programming. I can run a company. I can have a family. I run a company. I can have a family. I can do a lot of things at the same time. can do a lot of things at the same time. That gives me sort of that variety that That gives me sort of that variety that almost um idealized K Marx has this almost um idealized K Marx has this idea. Oh, I'm going to fish in the idea. Oh, I'm going to fish in the morning and uh hammer in the evening and morning and uh hammer in the evening and paint on the weekends, right? That paint on the weekends, right? That there's a sense for me at least where there's a sense for me at least where his diagnosis of alienation was true. his diagnosis of alienation was true. That just that tunnel vision, there's That just that tunnel vision, there's just this one thing I'm just going to just this one thing I'm just going to focus on that gives me a sense of focus on that gives me a sense of alienation I can't stomach. When I'm alienation I can't stomach. When I'm really deep on programming and sometimes really deep on programming and sometimes I go deep for for weeks, maybe even in a I go deep for for weeks, maybe even in a few cases months, I have to come up for few cases months, I have to come up for air and I have to go do something else. air and I have to go do something else. like, "All right, that was programming like, "All right, that was programming for this year. I've done my part. I'm for this year. I've done my part. I'm going to go off riding or annoy people going to go off riding or annoy people on the internet or drive some race cars on the internet or drive some race cars or do something else and then I can do or do something else and then I can do the programming thing with full the programming thing with full intensity again next year." intensity again next year." &gt;&gt; Speaking of of annoying people on the &gt;&gt; Speaking of of annoying people on the internet, you got to explain to me this internet, you got to explain to me this drama. Okay, so what is this guy that drama. Okay, so what is this guy that said, "Imagine losing to Jira, but said, "Imagine losing to Jira, but boasting that you have a couple million boasting that you have a couple million dollars per year." So, this had to do dollars per year." So, this had to do with this almost now a meme decision to with this almost now a meme decision to leave the cloud. DH left the cloud. I leave the cloud. DH left the cloud. I think that's literally a meme, but it's think that's literally a meme, but it's also a fascinating also a fascinating decision. Can you talk to the full saga decision. Can you talk to the full saga of DHA leaves the cloud? of DHA leaves the cloud? &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Leaving AWS, &gt;&gt; Leaving AWS, um, saving money. And I guess the case um, saving money. And I guess the case this person is making no this person is making no &gt;&gt; is that we wasted our time optimizing a &gt;&gt; is that we wasted our time optimizing a business that could have been 100 times business that could have been 100 times bigger if we' just gone for the moon bigger if we' just gone for the moon &gt;&gt; and and for the moon includes &gt;&gt; and and for the moon includes &gt;&gt; venture capital other things includes &gt;&gt; venture capital other things includes not caring about cost not caring about cost &gt;&gt; but also because AGI's around the corner &gt;&gt; but also because AGI's around the corner you should have been investing into AI you should have been investing into AI right is this just part of right is this just part of &gt;&gt; sort of tangent I think it's a bit of a &gt;&gt; sort of tangent I think it's a bit of a muddy argument but if we just take it at muddy argument but if we just take it at its peak ideal which I actually think is its peak ideal which I actually think is a reasonable point is that you can get a reasonable point is that you can get myopically focused on counting pennies myopically focused on counting pennies when you should be focused on getting when you should be focused on getting pounds, right? That pounds, right? That &gt;&gt; I've optimized our spend on &gt;&gt; I've optimized our spend on infrastructure by getting out of the infrastructure by getting out of the cloud and that took some time and I cloud and that took some time and I could have taken that time and spent it could have taken that time and spent it on making more features that would have on making more features that would have attracted more customers or spend even attracted more customers or spend even more time with AI or done other thing. more time with AI or done other thing. Opportunity cost is real. I'm not Opportunity cost is real. I'm not denying that. I'm pushing back on the denying that. I'm pushing back on the idea that for a company of our size, idea that for a company of our size, saving $2 million a year on our saving $2 million a year on our infrastructure bill, which is about infrastructure bill, which is about somewhere between half to 2/3, somewhere between half to 2/3, goes directly to the bottom line, which goes directly to the bottom line, which means it's returned to Jason and I as means it's returned to Jason and I as owners and our employees part of our uh owners and our employees part of our uh profit sharing plan. It's totally worth profit sharing plan. It's totally worth doing. This idea that costs don't matter doing. This idea that costs don't matter is a very Silicon Valley way of thinking is a very Silicon Valley way of thinking that I again understand at the scale of that I again understand at the scale of something maybe but I also actually something maybe but I also actually think it's think it's think it's it's aesthetically unpleasing. I find an it's aesthetically unpleasing. I find an inefficient business as I find an inefficient business as I find an inefficient program full of line noise inefficient program full of line noise to just be a splinter in my brain. I to just be a splinter in my brain. I hate looking at an expense report and hate looking at an expense report and just seeing disproportionate waste. And just seeing disproportionate waste. And when I was looking at our spend at 37 when I was looking at our spend at 37 Signals a while back a few years back, I Signals a while back a few years back, I saw bills that did not pass my smell saw bills that did not pass my smell test. I remembered how much we used to test. I remembered how much we used to spend on infrastructure before the cloud spend on infrastructure before the cloud and I saw numbers I could not recognize and I saw numbers I could not recognize in proportion to what we needed. The in proportion to what we needed. The fact that computers have gotten so much fact that computers have gotten so much faster over time. Shouldn't things be faster over time. Shouldn't things be getting cheaper? Why are we spending getting cheaper? Why are we spending more and more money servicing more more and more money servicing more customers? Yes, but with much faster customers? Yes, but with much faster computers. Moore's law should be computers. Moore's law should be lowering the cost. And the opposite is lowering the cost. And the opposite is happening. Why is that happening? And happening. Why is that happening? And that started a journey of unwinding that started a journey of unwinding why the cloud isn't as great as the deal why the cloud isn't as great as the deal as people like to think that. as people like to think that. &gt;&gt; Yeah. Can we look at the specifics just &gt;&gt; Yeah. Can we look at the specifics just to for people who don't know the story to for people who don't know the story and then generalize and then generalize to what it means about the the the role to what it means about the the the role of the cloud in in a tech business. So of the cloud in in a tech business. So the specifics is you were using AWSS3 the specifics is you were using AWSS3 for for for &gt;&gt; we were using AWS for everything. &gt;&gt; we were using AWS for everything. Hey.com launched as an entirely cloud Hey.com launched as an entirely cloud app. It was completely on AWS for app. It was completely on AWS for compute for databases for all of it. compute for databases for all of it. We're using all the systems as they're We're using all the systems as they're best prescribed that we should. Our best prescribed that we should. Our total cloud bill for Basecam. Our total total cloud bill for Basecam. Our total spend with AWS was I think 3.2 million spend with AWS was I think 3.2 million or 3.4 million at its peak. That's kind or 3.4 million at its peak. That's kind of a lot of money. 3.4 million. I mean, of a lot of money. 3.4 million. I mean, we have a ton of users and customers. we have a ton of users and customers. But still, that just struck me as But still, that just struck me as unreasonable. And the reason why I was unreasonable. And the reason why I was so unreasonable was because I had the so unreasonable was because I had the pitch for the cloud ringing in my ears. pitch for the cloud ringing in my ears. Hey, this is going to be faster. This is Hey, this is going to be faster. This is going to be easier. This is going to be going to be easier. This is going to be cheaper. Why are you trying to produce cheaper. Why are you trying to produce your own power? your own power? &gt;&gt; Like, do you have your own power plant? &gt;&gt; Like, do you have your own power plant? Why would you do that? Leave the Why would you do that? Leave the computers to the hyperscalers. They're computers to the hyperscalers. They're much better at it anyway. I actually much better at it anyway. I actually thought that was a compelling pitch. I thought that was a compelling pitch. I bought in on that pitch for several bought in on that pitch for several years and thought, do you know what? I'm years and thought, do you know what? I'm done ever owning a server again. we're done ever owning a server again. we're just going to render our capacity and just going to render our capacity and Amazon is going to be able to offer us Amazon is going to be able to offer us services much cheaper than we could buy services much cheaper than we could buy them themselves because they're going to them themselves because they're going to have these economies of scale. And I was have these economies of scale. And I was thinking Jeff's word ringing uh my thinking Jeff's word ringing uh my competitor's margin is my opportunity. competitor's margin is my opportunity. That was something he used to drive That was something he used to drive Amazon.com with that if he could just Amazon.com with that if he could just make 2% when the other guy was trying to make 2% when the other guy was trying to make 4% he would end up with all the make 4% he would end up with all the money and on volume he would still win. money and on volume he would still win. So I thought that was the operating So I thought that was the operating ethos for AWS. It turns out that's not ethos for AWS. It turns out that's not true at all. AWS by the way operates at true at all. AWS by the way operates at almost 40% margin. almost 40% margin. &gt;&gt; So just in that there's a clue that uh &gt;&gt; So just in that there's a clue that uh competitors are not able to do the competitors are not able to do the competitive thing we like about uh competitive thing we like about uh capitalism which is to lower costs and capitalism which is to lower costs and so forth. So the cloud pitch in my so forth. So the cloud pitch in my optics are fun is fundamentally false. optics are fun is fundamentally false. It did not get easier. First of all, I It did not get easier. First of all, I don't know if you've used AWS recently. don't know if you've used AWS recently. It is hella complicated. If you think It is hella complicated. If you think Linux is hard, you've never tried to set Linux is hard, you've never tried to set up AM rules or access parameters or up AM rules or access parameters or whatever for AWS. whatever for AWS. &gt;&gt; Yeah, AWS was always difficult. It was &gt;&gt; Yeah, AWS was always difficult. It was always clunk. always clunk. always clunk. &gt;&gt; Well, I think it's gotten even more &gt;&gt; Well, I think it's gotten even more difficult. But yes, now some of that is difficult. But yes, now some of that is it's difficult because it's very capable it's difficult because it's very capable and you have a bunch of capacity on tap. and you have a bunch of capacity on tap. And there are reasons. I don't think And there are reasons. I don't think they're good enough to justify how they're good enough to justify how complicated the whole jing and majing complicated the whole jing and majing has become. But what's certainly true is has become. But what's certainly true is that it's no longer easier is not easier that it's no longer easier is not easier to use AWS than it is to run your own to use AWS than it is to run your own machines, which we learned when we machines, which we learned when we pulled out of the cloud and didn't hire pulled out of the cloud and didn't hire a single extra person. Even though we a single extra person. Even though we operate all our own hardware, the team operate all our own hardware, the team stayed exactly the same. So, you have stayed exactly the same. So, you have this three-way pitch, right? It's going this three-way pitch, right? It's going to be easier. It's going to be cheaper. to be easier. It's going to be cheaper. Certainly wasn't cheaper. We've just Certainly wasn't cheaper. We've just proved that by cutting our spend on proved that by cutting our spend on infrastructure by half to 2/3. And it's infrastructure by half to 2/3. And it's going to be faster. The last bit was going to be faster. The last bit was true, but way too many people true, but way too many people overestimated the value of that speed. overestimated the value of that speed. If you need a thousand computers online If you need a thousand computers online in the next 15 minutes, nothing beats in the next 15 minutes, nothing beats the cloud. How would you even procure the cloud. How would you even procure that? If we just need another 20 that? If we just need another 20 servers, it's going to take a week or servers, it's going to take a week or two to get boxes shipped on pallets two to get boxes shipped on pallets delivered to a data center and unwrapped delivered to a data center and unwrapped and racked and all that stuff, right? and racked and all that stuff, right? But how often do we need to do that? And But how often do we need to do that? And how often do we need to do that if how often do we need to do that if buying those servers is way way cheaper buying those servers is way way cheaper such that we get vastly more compute for such that we get vastly more compute for the same amount of money? Could we just the same amount of money? Could we just buy more servers and not even care about buy more servers and not even care about the fact that we're not hyper optimized the fact that we're not hyper optimized on the compute utility that we don't on the compute utility that we don't have to use things like uh automatic have to use things like uh automatic scaling to figure things out because we scaling to figure things out because we have to reduce cost? Yes, we can. So, we have to reduce cost? Yes, we can. So, we went through this journey over a went through this journey over a realization in early 2023 realization in early 2023 when I had finally had enough with our when I had finally had enough with our bills. I wanted to get rid of them. I bills. I wanted to get rid of them. I wanted to spend less money. I wanted to wanted to spend less money. I wanted to keep more of the money ourselves. And in keep more of the money ourselves. And in just over 6 months, we moved seven major just over 6 months, we moved seven major applications out of the cloud in terms applications out of the cloud in terms of compute, caching, databases, the of compute, caching, databases, the works onto our own servers. A glorious, works onto our own servers. A glorious, beautiful new fleet bought from the king beautiful new fleet bought from the king of servers, Michael Dell, who really, by of servers, Michael Dell, who really, by the way, is another icon of my I saw he the way, is another icon of my I saw he just celebrated 41 years in business. 41 just celebrated 41 years in business. 41 years this man has been selling awesome years this man has been selling awesome servers that we've been using for our servers that we've been using for our entire existence. But anyway, these entire existence. But anyway, these pallets arrive in uh a couple of weeks pallets arrive in uh a couple of weeks and we rack them up and get everything and we rack them up and get everything going and we were we were out at least going and we were we were out at least with the computer part. We then had a with the computer part. We then had a long uh multi-year commitment to S3 long uh multi-year commitment to S3 because the only way to get decent because the only way to get decent pricing in the cloud, by the way, is not pricing in the cloud, by the way, is not to buy on a day-to-day basis, not to to buy on a day-to-day basis, not to rent on a database basis, but to bind rent on a database basis, but to bind yourself up to multi-year contracts. yourself up to multi-year contracts. With compute, it's often a year. That With compute, it's often a year. That was in our case. And with storage was was in our case. And with storage was four years. We signed a 4-year contract four years. We signed a 4-year contract to store our pabytes of customer files to store our pabytes of customer files in the cloud to be able to get something in the cloud to be able to get something just halfway decent, affordable. So, all just halfway decent, affordable. So, all of these projects came together to the of these projects came together to the sense that we're now saving literally sense that we're now saving literally millions of dollars, projected about 10 millions of dollars, projected about 10 million over 5 years. It's always hard. million over 5 years. It's always hard. How do you do the accounting exactly? How do you do the accounting exactly? And to this, that and the other thing, And to this, that and the other thing, but it's millions of dollars. But it's but it's millions of dollars. But it's not just that. It's also the fact that not just that. It's also the fact that getting out of the cloud mean meant getting out of the cloud mean meant returning to more of an original idea of returning to more of an original idea of the internet that the internet was not the internet that the internet was not designed such that three computers designed such that three computers should run everything. It was a should run everything. It was a distributed network such that the distributed network such that the individual nodes could disappear and the individual nodes could disappear and the whole thing would still carry on. DARPA whole thing would still carry on. DARPA designed this such that the Russians designed this such that the Russians could take out Washington and they could could take out Washington and they could still fight back from New York. that the still fight back from New York. that the entire communication infrastructure entire communication infrastructure wouldn't disappear because there was no wouldn't disappear because there was no hub and spoke. It was a network. I hub and spoke. It was a network. I always found that an immensely beautiful always found that an immensely beautiful vision that you could have this glorious vision that you could have this glorious internet and no single node was in internet and no single node was in control of everything. And we've control of everything. And we've returned to much more of a single node returned to much more of a single node controlling everything idea with these controlling everything idea with these hyperscalers. When US East one, the main hyperscalers. When US East one, the main and original region for AWS goes and original region for AWS goes offline, which has happened more than a offline, which has happened more than a few times over the years, seemingly a few times over the years, seemingly a third of the internet is offline. Like third of the internet is offline. Like that in itself is just an insult to that in itself is just an insult to DARPA's design. I it doesn't detract DARPA's design. I it doesn't detract from the fact that what AWS built was from the fact that what AWS built was marvelous. I think the cloud has moved marvelous. I think the cloud has moved so many things so far forward, so many things so far forward, especially around virtualization, especially around virtualization, automation, setup. It's all those giant automation, setup. It's all those giant leaps forward for system administration leaps forward for system administration that's allowing us now to be able to run that's allowing us now to be able to run things on prem in a way that smells and things on prem in a way that smells and feels much like the cloud just at half feels much like the cloud just at half the cost or less and with the autonomy the cost or less and with the autonomy and the satisfaction of owning hardware. and the satisfaction of owning hardware. I don't know what the last time you I don't know what the last time you looked at like an actual server and took looked at like an actual server and took it apart and looked inside of these it apart and looked inside of these things are gorgeous. I mean, I posted a things are gorgeous. I mean, I posted a couple of pictures of our racks out in couple of pictures of our racks out in the data center and people always go the data center and people always go crazy for them because we've gotten so crazy for them because we've gotten so abstracted from what the underlying abstracted from what the underlying metal looks like in this cloud age that metal looks like in this cloud age that most people have no idea. They have no most people have no idea. They have no idea how powerful a modern CPU is. They idea how powerful a modern CPU is. They have no idea how much RAM you can fit have no idea how much RAM you can fit into a oneU rack. Progress in computing into a oneU rack. Progress in computing has been really exciting, especially I'd has been really exciting, especially I'd say in the last four to five years after say in the last four to five years after TSMC with Apple's help really pushed the TSMC with Apple's help really pushed the envelope. I mean, we kind of sat still envelope. I mean, we kind of sat still there for a while while Intel was there for a while while Intel was spinning their wheels going nowhere and spinning their wheels going nowhere and then TSMC with Apple propelling them then TSMC with Apple propelling them really moved things forward and now really moved things forward and now servers are exciting again. Like you're servers are exciting again. Like you're getting jumps year-over-year in the 15 getting jumps year-over-year in the 15 20% rather than the single digit we were 20% rather than the single digit we were stuck with for a while. And that all stuck with for a while. And that all means that owning your own hardware is a means that owning your own hardware is a more feasible proposition than it's ever more feasible proposition than it's ever been. That you need fewer machines to been. That you need fewer machines to run ever more. And that more people run ever more. And that more people should do it because should do it because as much as I love Jeff and Amazon, like as much as I love Jeff and Amazon, like he doesn't need another whatever 40% he doesn't need another whatever 40% margin on all the tech stuff that I buy margin on all the tech stuff that I buy to run our business. to run our business. And And And this is just something I've been focused this is just something I've been focused on both because of the ideology around on both because of the ideology around honoring DARPA's original design, the honoring DARPA's original design, the practicality of running our own practicality of running our own hardware, seeing how fast we can push hardware, seeing how fast we can push things with the latest machines, and things with the latest machines, and then saving the money. And that has all then saving the money. And that has all been so enjoyable to do, but also so been so enjoyable to do, but also so counterintuitive for a lot of people counterintuitive for a lot of people because it seemed I think for a lot of because it seemed I think for a lot of people in the industry that like we'd people in the industry that like we'd all decided that we were done buying all decided that we were done buying computers that that was something we computers that that was something we would just delegate to AWS and Azure and would just delegate to AWS and Azure and Google Cloud that we didn't have to own Google Cloud that we didn't have to own these things anymore. So, I think these things anymore. So, I think there's a little bit of whiplash for there's a little bit of whiplash for some people that, "Oh, I thought we some people that, "Oh, I thought we agreed. We were done with that." And agreed. We were done with that." And then along come us and say, "Yeah, do then along come us and say, "Yeah, do you know what? Maybe you should have a you know what? Maybe you should have a computer." computer." computer." &gt;&gt; Is there some pain points to running &gt;&gt; Is there some pain points to running your own servers? your own servers? &gt;&gt; Oh, plenty. There's pain points to &gt;&gt; Oh, plenty. There's pain points to operating computers of all kind. Have operating computers of all kind. Have you tried just like uh using a personal you tried just like uh using a personal computer these days? Half the time when computer these days? Half the time when my kids or my wife have a problem, I go my kids or my wife have a problem, I go like, "Have you tried turning it just like, "Have you tried turning it just off and on?" Again, computers are off and on?" Again, computers are inherently painful to humans. Owning inherently painful to humans. Owning your own computer though kind of makes your own computer though kind of makes some of that pain worth it. There's a some of that pain worth it. There's a responsibility that comes with actually responsibility that comes with actually owning the hardware that to me at least owning the hardware that to me at least make the burden of operating that make the burden of operating that hardware seem slightly more enjoyable. hardware seem slightly more enjoyable. Now there are things you have to learn Now there are things you have to learn certainly at our scale too. I mean we're certainly at our scale too. I mean we're not just buying a single computer and not just buying a single computer and plugging into an Ethernet. We have to plugging into an Ethernet. We have to have racks and racks of them and you got have racks and racks of them and you got to set it up with network cabling and to set it up with network cabling and there is some specialized expertise in there is some specialized expertise in that. But it's not like that expertise that. But it's not like that expertise is like building nuclear rockets. It's is like building nuclear rockets. It's not like it's not widely distributed. not like it's not widely distributed. Literally, the entire internet was built Literally, the entire internet was built on people knowing how to plug in a on people knowing how to plug in a computer to the internet, right? Oh, computer to the internet, right? Oh, Ethernet cable goes here, power cable Ethernet cable goes here, power cable goes here. Let's boot up Linux. That's goes here. Let's boot up Linux. That's how everyone put anything online until how everyone put anything online until 10, 12 years ago when the cloud sort of 10, 12 years ago when the cloud sort of took over. So, the expertise is there took over. So, the expertise is there and can be rediscovered. You too can and can be rediscovered. You too can learn how to operate a Linux computer. learn how to operate a Linux computer. Yeah. And it's, you know, when you get a Yeah. And it's, you know, when you get a bunch of them, there's a bunch of bunch of them, there's a bunch of flashing LEDs and it's just so exciting. flashing LEDs and it's just so exciting. &gt;&gt; Beautiful, calming, amazing. Computers &gt;&gt; Beautiful, calming, amazing. Computers are really fun. This is actually are really fun. This is actually something I've gotten into even deeper something I've gotten into even deeper after we moved out of the cloud. Now, my after we moved out of the cloud. Now, my next kind of tingle is that if you could next kind of tingle is that if you could move out of the cloud, can you also move move out of the cloud, can you also move out of the data center? Personal servers out of the data center? Personal servers have gotten really scarily quick and have gotten really scarily quick and efficient. and personal internet efficient. and personal internet connections rival what we connected data connections rival what we connected data centers with just a decade or two ago. centers with just a decade or two ago. So there's a whole community around this So there's a whole community around this concept of home lapping which is concept of home lapping which is essentially installing server hardware essentially installing server hardware in your own apartment connecting it to in your own apartment connecting it to the internet and exposing that directly the internet and exposing that directly to the internet. that harks back to to the internet. that harks back to those glorious days of the '90s when those glorious days of the '90s when people building for the internet would people building for the internet would host the actual website on their actual host the actual website on their actual computer in the closet. computer in the closet. &gt;&gt; And I'm pretty fired up about that. I'm &gt;&gt; And I'm pretty fired up about that. I'm doing a bunch of experiments. I've doing a bunch of experiments. I've ordered a bunch of home servers for my ordered a bunch of home servers for my own apartment. I marvel at the fact that own apartment. I marvel at the fact that I can get a 5 gigabit fiber connection I can get a 5 gigabit fiber connection now. I think do you know what 5 GB that now. I think do you know what 5 GB that could have taken base camp to multiple could have taken base camp to multiple millions of MR in the way that back then millions of MR in the way that back then I ran the whole business on a single box I ran the whole business on a single box with 2004 technology and two probably with 2004 technology and two probably 100 megabit cable like the capacity we 100 megabit cable like the capacity we have access to both in terms of compute have access to both in terms of compute and connectivity is something that and connectivity is something that people haven't readjusted to and this people haven't readjusted to and this happens sometimes in technology where happens sometimes in technology where progress ever sneaks up on you. This progress ever sneaks up on you. This happened with SSDs. I love that. By the happened with SSDs. I love that. By the way, we designed so much of our way, we designed so much of our technology and storage approach and technology and storage approach and database design around spinning metal database design around spinning metal discs that had certain seek rate discs that had certain seek rate properties. And then we went to NVME and properties. And then we went to NVME and SSDs. And it took quite a while for SSDs. And it took quite a while for people to realize that the systems had people to realize that the systems had to be built fundamentally different now. to be built fundamentally different now. that the difference between memory and that the difference between memory and disk was now far smaller when you disk was now far smaller when you weren't spinning these metal plates weren't spinning these metal plates around with a little head that had to around with a little head that had to read off them. You were essentially just read off them. You were essentially just dealing with another type of memory. I dealing with another type of memory. I think we're a little bit in that same think we're a little bit in that same phase when it comes to the capacity of phase when it comes to the capacity of new businesses to be launched literally new businesses to be launched literally out of your damn bedroom. out of your damn bedroom. &gt;&gt; So, you can get pretty far with a large &gt;&gt; So, you can get pretty far with a large user base with home labbing. user base with home labbing. &gt;&gt; Absolutely. &gt;&gt; Absolutely. &gt;&gt; Absolutely. &gt;&gt; That's exciting. That's like the old &gt;&gt; That's exciting. That's like the old school That's really exciting. It's school That's really exciting. It's bringing back the startup in the garage bringing back the startup in the garage in the literal physical sense of the in the literal physical sense of the word. Now, some of that is, do we need word. Now, some of that is, do we need to? You can get relatively cheap cloud to? You can get relatively cheap cloud capacity if you don't need very much. capacity if you don't need very much. &gt;&gt; Hell yes, we need to. I mean, the &gt;&gt; Hell yes, we need to. I mean, the feeling of doing that by yourself, of feeling of doing that by yourself, of seeing LED lights seeing LED lights uh in your own home, I mean, there's uh in your own home, I mean, there's nothing like that. nothing like that. &gt;&gt; There's just an aesthetic to it that I &gt;&gt; There's just an aesthetic to it that I am completely in love with and I want to am completely in love with and I want to try to push on. Now, is that going to be try to push on. Now, is that going to be the same thing as getting out of the the same thing as getting out of the cloud? I'm not sure. Our exit out of the cloud? I'm not sure. Our exit out of the cloud was not the exit out of the data cloud was not the exit out of the data center. We basically just bought center. We basically just bought hardware, shipped it to a professionally hardware, shipped it to a professionally managed data center that we didn't even managed data center that we didn't even actually touch. This is the other actually touch. This is the other misconception people have about moving misconception people have about moving out of the cloud that we have a bunch of out of the cloud that we have a bunch of people who are constantly driving to a people who are constantly driving to a data center somewhere to rack new boxes data center somewhere to rack new boxes and change dead RAM. That's not how and change dead RAM. That's not how things happen in the modern world at things happen in the modern world at all. We have a company called Summit, all. We have a company called Summit, previously deaf, that is what we call previously deaf, that is what we call white gloves. They just they work in the white gloves. They just they work in the data center. When we need something data center. When we need something like, hey, hey, deaf, can you uh go down like, hey, hey, deaf, can you uh go down and uh swap the debt SSD in box number and uh swap the debt SSD in box number six, they do it. And what we see is akin six, they do it. And what we see is akin to what someone working with the cloud to what someone working with the cloud would see. You see IP addresses coming would see. You see IP addresses coming online. You see drives coming online. online. You see drives coming online. It's not that different, but it is a It's not that different, but it is a whole heck of a lot cheaper when you are whole heck of a lot cheaper when you are operating at our scale. And of course it operating at our scale. And of course it is. Of course, it's cheaper to own is. Of course, it's cheaper to own things if you need those things for things if you need those things for years rather than it is to rent it. In years rather than it is to rent it. In no other domain would we confuse those no other domain would we confuse those two things that it's cheaper to own for two things that it's cheaper to own for the long duration than it is to rent. the long duration than it is to rent. There is some gray area like I've gotten There is some gray area like I've gotten a chance to interact with the XAI team a a chance to interact with the XAI team a bunch. I'll probably going back out bunch. I'll probably going back out there in Memphis to do a big podcast there in Memphis to do a big podcast associated with the Grock release. And associated with the Grock release. And those folks in order to achieve the those folks in order to achieve the speed of building up the the cluster and speed of building up the the cluster and to solve some of the novel aspects that to solve some of the novel aspects that have to do with the GPU with the with have to do with the GPU with the with the training, they have to be a little the training, they have to be a little bit more hands-on. It's a less white bit more hands-on. It's a less white glove. Oh, and I love that. Right. glove. Oh, and I love that. Right. They're dealing with a frontier problem They're dealing with a frontier problem and they're dealing with it not by and they're dealing with it not by rending a bunch of GPUs at a huge markup rending a bunch of GPUs at a huge markup from their main competitor. They're from their main competitor. They're going like, "No, screw that. We're going going like, "No, screw that. We're going to put 100,000 GPUs in our own tents, to put 100,000 GPUs in our own tents, right, and build it in absolute record right, and build it in absolute record time." So, I think if anything, this is time." So, I think if anything, this is testament to the idea that owning testament to the idea that owning hardware can give you an advantage both hardware can give you an advantage both at the small scale, at the medium scale, at the small scale, at the medium scale, and at the pioneer levels of computing. and at the pioneer levels of computing. &gt;&gt; By the way, you know, speaking of teams, &gt;&gt; By the way, you know, speaking of teams, that those are XAI, Tesla are um large that those are XAI, Tesla are um large companies, but all those folks, companies, but all those folks, I don't know what it is about. You said I don't know what it is about. You said Jeff is really good at finding good Jeff is really good at finding good people, people, people, at seeing seeing strength in people. at seeing seeing strength in people. Like Elon is also extremely I don't know Like Elon is also extremely I don't know what that is. Actually, I I've never what that is. Actually, I I've never actually seen maybe you could speak to actually seen maybe you could speak to that. He's good at finding greatness. I that. He's good at finding greatness. I don't think he's finding as much as he's don't think he's finding as much as he's attracting. attracting. attracting. He's attracting the talent because of He's attracting the talent because of the audaciousness of his goals and his the audaciousness of his goals and his mission. The clarity by which he states mission. The clarity by which he states it. He doesn't have to go scour the it. He doesn't have to go scour the earth to find the best people. The best earth to find the best people. The best people come to him because he is talking people come to him because he is talking about Elon here. One of the singular about Elon here. One of the singular most invigorating figures in both the most invigorating figures in both the same order of the universe here. Haters same order of the universe here. Haters and lovers, right? Like he's having such and lovers, right? Like he's having such an impact at such a scale that of course an impact at such a scale that of course he's got to have literally millions of he's got to have literally millions of people think he's the people think he's the worst person in the world. And he's also worst person in the world. And he's also going to have millions of people going to have millions of people thinking he's the greatest gift to thinking he's the greatest gift to humanity depending on the day. I'm humanity depending on the day. I'm somewhere in between, but I'm more on somewhere in between, but I'm more on the greatest gift to humanity end of the the greatest gift to humanity end of the scale than I'm on the others end of the scale than I'm on the others end of the scale. And I think that really inspires scale. And I think that really inspires people in a way that we've almost people in a way that we've almost forgotten that that level of audacity is forgotten that that level of audacity is so rare so rare so rare &gt;&gt; that when we see it, we don't fully know &gt;&gt; that when we see it, we don't fully know how to analyze it. We think of Elon as how to analyze it. We think of Elon as finding great talent. And I'm sure he's finding great talent. And I'm sure he's also good at that. But I also think that also good at that. But I also think that this beacon of the mission, we're going this beacon of the mission, we're going to fucking Mars. to fucking Mars. We're going to transform transportation We're going to transform transportation into using electricity. We're going to into using electricity. We're going to cover the earth in internet is so grand cover the earth in internet is so grand that there are days where I wake up and that there are days where I wake up and go like, "What the fuck am I doing with go like, "What the fuck am I doing with these to-do lists?" these to-do lists?" &gt;&gt; Like, Jesus, should I go sign up for &gt;&gt; Like, Jesus, should I go sign up for something like that? something like that? &gt;&gt; That sounds invigorating in a sense I &gt;&gt; That sounds invigorating in a sense I can only imagine like a Viking back in can only imagine like a Viking back in 1050 going like, "Should we go to 1050 going like, "Should we go to Normandy? You may die along the way, but Normandy? You may die along the way, but oh boy does that sound like a journey oh boy does that sound like a journey and an adventure. and an adventure. &gt;&gt; There's a few components there. One &gt;&gt; There's a few components there. One definitely this bigger than life mission definitely this bigger than life mission and really believing it. You know, every and really believing it. You know, every other sentence is about Mars. Like other sentence is about Mars. Like really believing it. It doesn't really really believing it. It doesn't really matter what like anybody else the matter what like anybody else the criticism anything there's a very criticism anything there's a very singular focused big mission. But I singular focused big mission. But I think it also has to do a bunch of the think it also has to do a bunch of the other components like being able to hire other components like being able to hire well once the people once the beacon well once the people once the beacon attracts and I've just seen people that attracts and I've just seen people that don't necessarily on paper have a resume don't necessarily on paper have a resume with a track record. I've I've seen with a track record. I've I've seen really who now turned out to be like really who now turned out to be like legendary people. He basically like legendary people. He basically like tosses them the ball of leadership. Yes. tosses them the ball of leadership. Yes. sees something in them and says like you sees something in them and says like you go and gives them the ownership and they go and gives them the ownership and they run with it and that that happens at run with it and that that happens at every scale that there's a real every scale that there's a real meritocracy meritocracy meritocracy and like there's something and like there's something uh there's there's just like you could uh there's there's just like you could see the flourishing of human intellect see the flourishing of human intellect in these meetings in these group getting in these meetings in these group getting together where they're like the energy together where they're like the energy is palpable. It's it's it's like is palpable. It's it's it's like exciting for me to just be around that exciting for me to just be around that cuz I don't I there's not many companies cuz I don't I there's not many companies I've seen that in because when a company I've seen that in because when a company becomes successful and larger, it becomes successful and larger, it somehow suffocates that energy that I I somehow suffocates that energy that I I guess you see in startups guess you see in startups at the early stages, but like it's cool at the early stages, but like it's cool to see it at at a large company that's to see it at at a large company that's actually able to achieve scale. You actually able to achieve scale. You know, know, know, &gt;&gt; I think part of the secret there is that &gt;&gt; I think part of the secret there is that Elon actually knows things. And when you Elon actually knows things. And when you know things, you can evaluate the know things, you can evaluate the quality of work products. And when you quality of work products. And when you can evaluate the quality of work can evaluate the quality of work products, you can very quickly tell products, you can very quickly tell who's full of shit and who will actually who's full of shit and who will actually take you to Mars. And you can fire the take you to Mars. And you can fire the people who's full of shit and you can people who's full of shit and you can bet on the people who get us to Mars. bet on the people who get us to Mars. That capacity to directly evaluate the That capacity to directly evaluate the competency of individuals competency of individuals is actually a little bit rare. It's not is actually a little bit rare. It's not widely distributed amongst managers, widely distributed amongst managers, hiring managers. It's not something you hiring managers. It's not something you can easily delegate to people who are can easily delegate to people who are not not not very skilled at the work itself. And very skilled at the work itself. And Elon obviously knows a lot about a lot Elon obviously knows a lot about a lot and he can smell who knows stuff for and he can smell who knows stuff for real. And is this at our tiny scale. real. And is this at our tiny scale. Something I've tried to do in the same Something I've tried to do in the same order where when we hire programmers, order where when we hire programmers, for example, for example, for example, it's going to be interesting now with AI it's going to be interesting now with AI as a new challenge. But up until this as a new challenge. But up until this point, the main pivot point for getting point, the main pivot point for getting hired was not your resume, was not the hired was not your resume, was not the schooling you've had, was not your schooling you've had, was not your grades, was not your pedigree. It was grades, was not your pedigree. It was how well you did on two things. A, your how well you did on two things. A, your cover letter, because I can only work cover letter, because I can only work with people remotely if they're good with people remotely if they're good writers. So if you can't pen a proper writers. So if you can't pen a proper capital letter and can't bother to put capital letter and can't bother to put in the effort to write it specifically in the effort to write it specifically for us, you're out. Two, you have to be for us, you're out. Two, you have to be able to program really well to the able to program really well to the degree that I can look at your code and degree that I can look at your code and go like, "Yeah, I want to work with that go like, "Yeah, I want to work with that person." Not only I want to work with person." Not only I want to work with that person, I want to work on that that person, I want to work on that person's code when I have to see it person's code when I have to see it again in five years to fix some damn again in five years to fix some damn bug. So we're going to give you a bug. So we're going to give you a programming test that simulates the way programming test that simulates the way we work for real and we're going to see we work for real and we're going to see how you do. And I've been surprised time how you do. And I've been surprised time and again where I thought for sure this and again where I thought for sure this candidate is a shoein. They sound just candidate is a shoein. They sound just right. The CV is just right. And then right. The CV is just right. And then you see the code getting turned in. I'm you see the code getting turned in. I'm like, no way. No way are we hiring this like, no way. No way are we hiring this person. And the other way has been true person. And the other way has been true as well. I've like I don't know about as well. I've like I don't know about this guy or this this woman. this guy or this this woman. I don't know. And then they turn in I don't know. And then they turn in their coach stuff and they're like, holy their coach stuff and they're like, holy shit, can that person be on my team shit, can that person be on my team tomorrow? Preferably the capacity to tomorrow? Preferably the capacity to evaluate work product is a superpower evaluate work product is a superpower when it comes to hiring. when it comes to hiring. &gt;&gt; There's a step that I've seen Elon do &gt;&gt; There's a step that I've seen Elon do really well which is be able to show up really well which is be able to show up and say this can be done simpler. and say this can be done simpler. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; And but he knows what he's talking about &gt;&gt; And but he knows what he's talking about and then the the engineer because Elon and then the the engineer because Elon knows enough the engineer who first knows enough the engineer who first reaction you can kind of tell like it's reaction you can kind of tell like it's almost like rolling your eyes if your almost like rolling your eyes if your parent tells you something. parent tells you something. &gt;&gt; Yes. this this is not no we've I've been &gt;&gt; Yes. this this is not no we've I've been working on this for a month you don't working on this for a month you don't know but then when you have that know but then when you have that conversation a little more you realize conversation a little more you realize no it can be done simpler find the way no it can be done simpler find the way so there's a good when two engineers are so there's a good when two engineers are talking one might not have perfect talking one might not have perfect information but if if if the senior information but if if if the senior engineer has like good instinct that's engineer has like good instinct that's like been battle earned like been battle earned &gt;&gt; then you can say simplify and it it it &gt;&gt; then you can say simplify and it it it actually will result and simplification actually will result and simplification &gt;&gt; and I think this is the hallmark of the &gt;&gt; and I think this is the hallmark of the true greats that they not only have the true greats that they not only have the insight into what's required to do the insight into what's required to do the work but they also have the transc work but they also have the transc transcendent vision to go beyond what transcendent vision to go beyond what the engineer would do the programmer the engineer would do the programmer would do I think if we're looking at would do I think if we're looking at these rarities obviously the myth of these rarities obviously the myth of Steve Jobs was also this even though Steve Jobs was also this even though perhaps he was less technical than Elon perhaps he was less technical than Elon is in many ways He had the same capacity is in many ways He had the same capacity to show up to a product team and really to show up to a product team and really challenge them to look harder for the challenge them to look harder for the simplification or for making things simplification or for making things greater in a way that would garner greater in a way that would garner disbelief from the people who are disbelief from the people who are supposed to do it. Like this guy is full supposed to do it. Like this guy is full of shit. Like this is crazy. We can of shit. Like this is crazy. We can never and then two months later it is. never and then two months later it is. So there is something of this where you So there is something of this where you need you need the vision. You need it need you need the vision. You need it anchored by the reality of knowing anchored by the reality of knowing enough about what's possible. knowing enough about what's possible. knowing enough about physics, knowing enough enough about physics, knowing enough about software that you're not just about software that you're not just building bullshit. There are plenty of building bullshit. There are plenty of people who can tell a group of people who can tell a group of engineers, "No, just do it faster." engineers, "No, just do it faster." Like, that's not a skill. It's got to be Like, that's not a skill. It's got to be anchored in something real. But it's anchored in something real. But it's also got to be anchored in, also got to be anchored in, it's a tired word, but a passion for the it's a tired word, but a passion for the outcome to a degree where you get outcome to a degree where you get personally insulted if a bad job is personally insulted if a bad job is done. This is what I've been writing done. This is what I've been writing about lately with Apple. They've lost about lately with Apple. They've lost that asshole who would show up and tell that asshole who would show up and tell engineers that what they did was not engineers that what they did was not good enough in ways that would actually good enough in ways that would actually perhaps make them feel a little small in perhaps make them feel a little small in the moment, but would spark that the moment, but would spark that zest to really fix it. And now they have zest to really fix it. And now they have a logistics person who's very good at a logistics person who's very good at sourcing components and lining up sourcing components and lining up production Gant charts, production Gant charts, but you're not getting that magic. Now, but you're not getting that magic. Now, what's interesting with that whole what's interesting with that whole scenario was I actually thought how well scenario was I actually thought how well Tim Cook ran things and has run things Tim Cook ran things and has run things at Apple for so long that maybe we were at Apple for so long that maybe we were wrong. Maybe we were wrong about the wrong. Maybe we were wrong about the criticality of Steve Jobs to the whole criticality of Steve Jobs to the whole mission. Maybe you could get away with mission. Maybe you could get away with not having it. I think the bill was just not having it. I think the bill was just going to come later and now it has. going to come later and now it has. Apple is failing in all these ways that Apple is failing in all these ways that someone who would blow up Steve's ghost someone who would blow up Steve's ghost and really exalt him would say like see and really exalt him would say like see this is what's happening now. So the this is what's happening now. So the other thing here too of course is it's other thing here too of course is it's impossible to divorce like your impossible to divorce like your perception of what's a critical perception of what's a critical component of the system and the messy component of the system and the messy reality of a million different moving reality of a million different moving parts in the reality of life and you parts in the reality of life and you should be skeptical about your own should be skeptical about your own analysis and your own thesis at all analysis and your own thesis at all time. Since you mentioned Apple, have to time. Since you mentioned Apple, have to ask. Uh, somebody in the internet ask. Uh, somebody in the internet uh submitted the question. uh submitted the question. Uh, does DHA still hate Apple? I believe Uh, does DHA still hate Apple? I believe the question is, um, so there was a time the question is, um, so there was a time when Basecam went to war with Apple over when Basecam went to war with Apple over the 30%. What's Can you tell the saga of the 30%. What's Can you tell the saga of that battle? that battle? that battle? &gt;&gt; Yes. But first, I'll tell you how I fell &gt;&gt; Yes. But first, I'll tell you how I fell in love with Apple, which was all the in love with Apple, which was all the way back in also early 2000s way back in also early 2000s when Microsoft was dominating the when Microsoft was dominating the industry in a way we now see Apple and industry in a way we now see Apple and Google dominate mobile phones. Microsoft Google dominate mobile phones. Microsoft was just everything when it came to was just everything when it came to personal computers. And I really did not personal computers. And I really did not like the Microsoft of the '90s. The like the Microsoft of the '90s. The Microsoft of the 90s was the cut off the Microsoft of the 90s was the cut off the air supply to Netscape kind of air supply to Netscape kind of characters. Was the Bill Gates sitting characters. Was the Bill Gates sitting defiant in an interview with the DOJ defiant in an interview with the DOJ asking about what the definition of what asking about what the definition of what is and just overall unpleasant. I think is and just overall unpleasant. I think you can have respect for what was you can have respect for what was achieved, but I certainly didn't like achieved, but I certainly didn't like it. And as we've talked about, I came it. And as we've talked about, I came begrudgingly to the PC after Commodore begrudgingly to the PC after Commodore fell apart and I couldn't continue to fell apart and I couldn't continue to use the AmIGGA. So, I already had a bit use the AmIGGA. So, I already had a bit of a bone to pick with PCs just over the of a bone to pick with PCs just over the fact that I love my AmIgga so much. But fact that I love my AmIgga so much. But then in the early 2000s, Apple emerged then in the early 2000s, Apple emerged as a credible alternative because they as a credible alternative because they bet the new generation of Macs on Unix bet the new generation of Macs on Unix underpinnings underpinnings underpinnings and that allowed me to escape from and that allowed me to escape from Microsoft and suddenly I became one of Microsoft and suddenly I became one of the biggest boosters of Apple. I was in the biggest boosters of Apple. I was in my graduating class at the Copenhagen my graduating class at the Copenhagen Business School. I started with the Business School. I started with the first white iBook, first person using first white iBook, first person using Mac. And by the time we were done and Mac. And by the time we were done and graduating, I had basically converted graduating, I had basically converted half the class to using Apple computers half the class to using Apple computers because I would evangelize them so hard because I would evangelize them so hard and demonstrate them and do all the and demonstrate them and do all the things that a super fan would do. And I things that a super fan would do. And I continued that work over many years. continued that work over many years. Jason or I actually in I think 2004 2005 Jason or I actually in I think 2004 2005 did an ad for Apple that they posted on did an ad for Apple that they posted on the developer site where we were all the developer site where we were all about like Apple is so integral to about like Apple is so integral to everything that we do and we look up to everything that we do and we look up to them and we are inspired by them and them and we are inspired by them and that love relationship actually that love relationship actually continued for a very long time. I continued for a very long time. I basically just became a Mac person for basically just became a Mac person for 20 years. I didn't even care about 20 years. I didn't even care about looking at PCs. It seemed irrelevant to looking at PCs. It seemed irrelevant to me whatever Microsoft was doing which me whatever Microsoft was doing which felt like such a relief because in the felt like such a relief because in the 90s I felt like I couldn't escape 90s I felt like I couldn't escape Microsoft and suddenly I had found my Microsoft and suddenly I had found my escape and now I was with Apple and it escape and now I was with Apple and it was glorious and they shared so many of was glorious and they shared so many of my sensibilities and my aesthetics and my sensibilities and my aesthetics and they kept pushing the envelope and there they kept pushing the envelope and there was so much to be proud of so much to was so much to be proud of so much to look up to look up to and then that sort of started to change and then that sort of started to change with the iPhone which is weird because with the iPhone which is weird because the iPhone is what made modern Apple. the iPhone is what made modern Apple. It's what I lined up in 2007 together It's what I lined up in 2007 together with Jason for 5 hours to stand in the with Jason for 5 hours to stand in the line to buy a first generation product line to buy a first generation product where Apple staff would clap at you when where Apple staff would clap at you when you walked out of the store. I don't you walked out of the store. I don't know if you remember that. It was it was know if you remember that. It was it was a whole ceremony and it was part of that a whole ceremony and it was part of that myth and mystique and awe of Apple. So, myth and mystique and awe of Apple. So, I just I wasn't in the market for other I just I wasn't in the market for other computers. I wasn't in the market for computers. I wasn't in the market for other computer ideas. I thought perhaps other computer ideas. I thought perhaps I'd be with the Mac until the end of I'd be with the Mac until the end of days. But as Apple discovered the gold days. But as Apple discovered the gold mine it is to operate a toll booth where mine it is to operate a toll booth where you don't have to innovate, where you you don't have to innovate, where you don't actually even have to make don't actually even have to make anything, where you can just take 30% of anything, where you can just take 30% of other people's business. There was a rot other people's business. There was a rot that crept in to the foundation of Apple that crept in to the foundation of Apple and that started all the way back from and that started all the way back from the initial launch of the app store. But the initial launch of the app store. But I don't think we saw at the time, I I don't think we saw at the time, I didn't see at the time, just how didn't see at the time, just how critical the mobile phone would become critical the mobile phone would become to computing in general. I thought when to computing in general. I thought when the iPhone came out that like, oh, it's the iPhone came out that like, oh, it's like a mobile phone. I've had a mobile like a mobile phone. I've had a mobile phone since the early '9s. Well, it phone since the early '9s. Well, it wasn't a mobile phone. It was a mobile wasn't a mobile phone. It was a mobile computer. And even more than that, it computer. And even more than that, it was the most important computer or it was the most important computer or it would become the most important computer would become the most important computer for most people around the world, which for most people around the world, which meant that if you like to make software meant that if you like to make software and wanted to sell it to people, you had and wanted to sell it to people, you had to go through that computer. And if to go through that computer. And if going through that computer meant going going through that computer meant going through Apple's toll booth and not just through Apple's toll booth and not just having to ask them permission, which in having to ask them permission, which in and of itself was just an indignity when and of itself was just an indignity when you're used to the internet where you you're used to the internet where you don't have to ask anyone permission don't have to ask anyone permission about anything. You buy a domain and you about anything. You buy a domain and you launch a business and if customers show launch a business and if customers show up, boom, you're success. And if they up, boom, you're success. And if they don't, well, you're a failure. Now, don't, well, you're a failure. Now, suddenly, before you could even launch, suddenly, before you could even launch, you'd have to ask Apple for permission. you'd have to ask Apple for permission. That always sat wrong with me. But it That always sat wrong with me. But it wasn't until we launched Hey in 2001 wasn't until we launched Hey in 2001 that I saw the full extent of the rot that I saw the full extent of the rot that has snug into Apple's apple. that has snug into Apple's apple. &gt;&gt; For people who don't know, and we'll &gt;&gt; For people who don't know, and we'll talk about it, hey is this amazing email talk about it, hey is this amazing email sort of attempt to solve the email sort of attempt to solve the email problem. problem. problem. &gt;&gt; Yes. I like to pitch it as what Gmail &gt;&gt; Yes. I like to pitch it as what Gmail would have been with 20 years of lessons would have been with 20 years of lessons applied in a way where they could applied in a way where they could actually ship. Gmail was incredible when actually ship. Gmail was incredible when it launched in 2004. And it still is a it launched in 2004. And it still is a great product, but it's also trapped in great product, but it's also trapped in its initial success. You can't redesign its initial success. You can't redesign Gmail today. It just has way too many Gmail today. It just has way too many users. So, if you want fresh thinking on users. So, if you want fresh thinking on email, I wanted fresh thinking on email. email, I wanted fresh thinking on email. I needed to build my own email system I needed to build my own email system and not just my own email client. That's and not just my own email client. That's what a lot of people have done over the what a lot of people have done over the years. They build a client for Gmail, years. They build a client for Gmail, but you're severely constrained if you but you're severely constrained if you don't control the email server as well. don't control the email server as well. If you really want to move the ball If you really want to move the ball forward with email, you have to control forward with email, you have to control both the server and the client. And that both the server and the client. And that was the audacious mission we set out to was the audacious mission we set out to do with Hey. And that was what's funny. do with Hey. And that was what's funny. I thought our main obstacle here would I thought our main obstacle here would be Gmail. It's the 800 lb gorilla in the be Gmail. It's the 800 lb gorilla in the email space. something like 70% of all email space. something like 70% of all email in the US is sent through Gmail. email in the US is sent through Gmail. &gt;&gt; I think their world rates are probably &gt;&gt; I think their world rates are probably in that neighborhood as well. They're in that neighborhood as well. They're just absolutely huge just absolutely huge and trying to attack an enormous and trying to attack an enormous established competitor like that who's established competitor like that who's so actually still loved by plenty of so actually still loved by plenty of people and is free seems like a suicide people and is free seems like a suicide mission. And it was only a mission we mission. And it was only a mission we signed up for because we had grown signed up for because we had grown ambitious enough after making Basec camp ambitious enough after making Basec camp for 20 years that we thought we could for 20 years that we thought we could tackle that problem. So I thought, hey, tackle that problem. So I thought, hey, this is dumb. I would not advise anyone this is dumb. I would not advise anyone to go head tohead with Gmail. That seems to go head tohead with Gmail. That seems like a suicide mission. We're going to like a suicide mission. We're going to try anyway because you know what? If we try anyway because you know what? If we fail, it's going to be fine. We're just fail, it's going to be fine. We're just going to build a better email experience going to build a better email experience for me and Jason and the people at the for me and Jason and the people at the company and our cat, and that'll be okay company and our cat, and that'll be okay because we can afford to do so. But when because we can afford to do so. But when we got ready to launch after spending we got ready to launch after spending two years building this product, two years building this product, millions of dollars in investment to it, millions of dollars in investment to it, we obviously needed mobile apps. You're we obviously needed mobile apps. You're not going to be a serious contender with not going to be a serious contender with email if you're not on a mobile phone, email if you're not on a mobile phone, and you need to be there with a native and you need to be there with a native client. So, we had built a great native client. So, we had built a great native client for both iOS and for Android. And client for both iOS and for Android. And as we were getting ready to launch, we as we were getting ready to launch, we submitted both of them to the app submitted both of them to the app stores, got both of them approved on, I stores, got both of them approved on, I think Friday afternoon for the iOS app. think Friday afternoon for the iOS app. And we then went live on Monday and we And we then went live on Monday and we were so excited. Hey world, we've been were so excited. Hey world, we've been working on this new thing. I'd love for working on this new thing. I'd love for you to check it out. And of course, as you to check it out. And of course, as with anything, when you launch a new with anything, when you launch a new product, there are some bugs. So, we product, there are some bugs. So, we quickly found a few in the iOS client quickly found a few in the iOS client and submitted a new build to Apple. and submitted a new build to Apple. &gt;&gt; Hey, here's our bug fixes. can you &gt;&gt; Hey, here's our bug fixes. can you please update? And that's when all the please update? And that's when all the help broke loose. help broke loose. Not only were they not going to approve Not only were they not going to approve our update, they said, "Oh, wait a our update, they said, "Oh, wait a minute. We gave you permission to be in minute. We gave you permission to be in the app store, but I'm sorry. That was a the app store, but I'm sorry. That was a mistake. We see that uh you're not using mistake. We see that uh you're not using our inapp payment system, which means our inapp payment system, which means that we don't get 30% of your business. that we don't get 30% of your business. You will have to rectify that or you You will have to rectify that or you can't be in the app store." At first, I can't be in the app store." At first, I thought like, well, it got approved thought like, well, it got approved already. We're running on the same model already. We're running on the same model we've run base camp on in the app store we've run base camp on in the app store for a decade. If you're not signing up for a decade. If you're not signing up through the app and we're signing up our through the app and we're signing up our own customers on our own website and own customers on our own website and they're just going to the app store to they're just going to the app store to download their companion app, we're download their companion app, we're going to be fine. That was the truth, going to be fine. That was the truth, right? That was why I never got so fired right? That was why I never got so fired up about the app store even as Apple up about the app store even as Apple started tightening the screws was like started tightening the screws was like my business was okay. Now suddenly my my business was okay. Now suddenly my business wasn't okay. Apple was willing business wasn't okay. Apple was willing to destroy hay if we did not agree to to destroy hay if we did not agree to give them 30% of all the signups that give them 30% of all the signups that came through the iOS app. And it wasn't came through the iOS app. And it wasn't just about the 30%. It was also about just about the 30%. It was also about splitting and not longer having a direct splitting and not longer having a direct relationship with our customers. When relationship with our customers. When you sell an app in the app store, you're you sell an app in the app store, you're not selling an app to a customer. You're not selling an app to a customer. You're selling an app to inventory at Apple and selling an app to inventory at Apple and then Apple sells an app to that then Apple sells an app to that customer. that customer has a purchasing customer. that customer has a purchasing relationship with Apple. So if you want relationship with Apple. So if you want to give discounts or refunds or to give discounts or refunds or whatever, it's complete hell. If you whatever, it's complete hell. If you want to easily support multiplatform, want to easily support multiplatform, that's complete hell. If someone signs that's complete hell. If someone signs up for Hey, on their iPhone and they up for Hey, on their iPhone and they want to switch to Android, but that want to switch to Android, but that billing relationship, it's tied to billing relationship, it's tied to Apple, it's complete hell. For a million Apple, it's complete hell. For a million reasons, I did not want to hand my reasons, I did not want to hand my business over to Apple. I did not want business over to Apple. I did not want to hand 30% of our revenue over to to hand 30% of our revenue over to Apple. So, we decided to do something Apple. So, we decided to do something that seemingly Apple had never heard that seemingly Apple had never heard before. We said, "No, we're not going to before. We said, "No, we're not going to add the inapp payment. I don't care if add the inapp payment. I don't care if you're threatening us. This this is not you're threatening us. This this is not fair. This is not reasonable. Please approve." And of course, they Please approve." And of course, they didn't. And it escalated. And after a didn't. And it escalated. And after a couple of days, we realized, you know couple of days, we realized, you know what? This isn't a mistake. This isn't what? This isn't a mistake. This isn't going away. we're going to be dead if going away. we're going to be dead if they go through with this. If we're not they go through with this. If we're not going to yield and give them the 30%. going to yield and give them the 30%. They're going to kick us off unless They're going to kick us off unless we make such a racket, such noise that we make such a racket, such noise that they will regret it. And that's exactly they will regret it. And that's exactly what then happened. We were blessed by what then happened. We were blessed by the fact that we launched Hey, one week the fact that we launched Hey, one week before the WWDC, their worldwide before the WWDC, their worldwide developer conference where Apple loves developer conference where Apple loves to get up on stage and harp on how much to get up on stage and harp on how much they do for developers, how much they they do for developers, how much they love them, and why you should build for love them, and why you should build for their new devices and so on and so their new devices and so on and so forth. And then we also just happen to forth. And then we also just happen to have a platform on the internet which is have a platform on the internet which is very uh convenient when you need to go very uh convenient when you need to go to war with a $3 trillion company. So I to war with a $3 trillion company. So I started kicking and screaming and started kicking and screaming and essentially turning it up to 11 in terms essentially turning it up to 11 in terms of the fight and going public with our of the fight and going public with our denial to be in the app store and that denial to be in the app store and that turned into a prolonged twoe battle with turned into a prolonged twoe battle with Apple that essentially ended in the best Apple that essentially ended in the best possible outcome we could have gotten as possible outcome we could have gotten as David fighting Goliath which was a bit David fighting Goliath which was a bit of a truce. We wouldn't hand 30% over to of a truce. We wouldn't hand 30% over to Apple. they wouldn't kick us out of the Apple. they wouldn't kick us out of the app store, but we had to build some app store, but we had to build some bullshit bullshit bullshit dummy account such that the app did dummy account such that the app did something when you downloaded it. That something when you downloaded it. That was a rule that Phil Schiller seemingly was a rule that Phil Schiller seemingly made up on the fly when pressed for the made up on the fly when pressed for the fifth time by the media about why we fifth time by the media about why we couldn't be in the app store when a couldn't be in the app store when a million other companion apps could. But million other companion apps could. But we just happened to be able to create so we just happened to be able to create so much pain and noise for Apple that it much pain and noise for Apple that it was easier for them to just let us be was easier for them to just let us be than to keep on fighting. What do you than to keep on fighting. What do you think about uh Tim Sweeny's victory with think about uh Tim Sweeny's victory with Epic over Apple? I think it is Epic over Apple? I think it is incredible and the entire developer incredible and the entire developer ecosystem, not just on iOS, but on ecosystem, not just on iOS, but on Android as well, owe Epic, Tim Sweeney, Android as well, owe Epic, Tim Sweeney, and Mark Rain an enormous debt of and Mark Rain an enormous debt of gratitude for taking on the only battle gratitude for taking on the only battle that has ever inflicted a serious wound that has ever inflicted a serious wound on Apple in this entire sorted campaign on Apple in this entire sorted campaign of monopoly enforcement, and that is of monopoly enforcement, and that is Epic's fight versus them. Epic's fight versus them. Tim recently revealed that it has cost Tim recently revealed that it has cost well over $100 million in legal fees to well over $100 million in legal fees to carry on this battle against Apple. We carry on this battle against Apple. We for a hot moment considered suing Apple for a hot moment considered suing Apple when they were threatening to kick us when they were threatening to kick us out. We shopped the case around with a out. We shopped the case around with a few law firms and perhaps of course they few law firms and perhaps of course they would tell us you have a good case. I would tell us you have a good case. I mean they're trying to sell a a product mean they're trying to sell a a product here. But they would also tell us it's here. But they would also tell us it's going to cost a minimum of $10 million going to cost a minimum of $10 million and it's going to take 5 to seven years and it's going to take 5 to seven years through all the appeals. Now we now through all the appeals. Now we now learned the actual price tag was 10 learned the actual price tag was 10 times higher, right? Epic spent over times higher, right? Epic spent over hundred million. It would have destroyed hundred million. It would have destroyed us to take on Apple in the legal realm. us to take on Apple in the legal realm. Only a company like Epic could do it. Only a company like Epic could do it. And only a company run by founders And only a company run by founders &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; like Tim, like Mark, could risk the &gt;&gt; like Tim, like Mark, could risk the business in the way that they did, the business in the way that they did, the audacity they had to provoke the fight audacity they had to provoke the fight in the first place, which I thought was in the first place, which I thought was just incredible, and to stick with it just incredible, and to stick with it for the long term. No board would have for the long term. No board would have signed off on this lawsuit to a signed off on this lawsuit to a professional CEO. No freaking way. So, professional CEO. No freaking way. So, the fact that they've been able to beat the fact that they've been able to beat Apple in also the most hilarious way Apple in also the most hilarious way possible, I think is just incredible cuz possible, I think is just incredible cuz remember their first victory in the case remember their first victory in the case was actually not much of a victory. was actually not much of a victory. There were about 11 counts in the trial. There were about 11 counts in the trial. Apple basically won 10 of them and the Apple basically won 10 of them and the judge awarded Epic this one little win judge awarded Epic this one little win that Apple couldn't tell them not to that Apple couldn't tell them not to link out to the internet to be able to link out to the internet to be able to do the payment processing. So they won do the payment processing. So they won this one little thing and Apple instead this one little thing and Apple instead of just taking the 10 out of 11 wins and of just taking the 10 out of 11 wins and going fine, you can have your little going fine, you can have your little links but all these other rules stay in links but all these other rules stay in place decided to essentially commit place decided to essentially commit criminal contempt of court as they've criminal contempt of court as they've now been referred to for prosecution now been referred to for prosecution um and angered the judge to such a um and angered the judge to such a degree that the rule of law in the US degree that the rule of law in the US now is that you can launch an app in the now is that you can launch an app in the app store and you don't have to use app store and you don't have to use inapp payment, but you can have a direct inapp payment, but you can have a direct billing relationship with a customer if billing relationship with a customer if you just link out to the open internet you just link out to the open internet when you take the credit card and then when you take the credit card and then hop back into the app. And we owe all of hop back into the app. And we owe all of that to Tim and Mark. We owe all of that that to Tim and Mark. We owe all of that to Epic. We're going to launch new apps to Epic. We're going to launch new apps any minute now. I hope um actually next any minute now. I hope um actually next week that take advantage of this that week that take advantage of this that revamp the Hay app such that people who revamp the Hay app such that people who download the Hay app off the Apple app download the Hay app off the Apple app store can sign up in the app and can store can sign up in the app and can then use uh the web to put in their then use uh the web to put in their credit card. So we don't have to pay credit card. So we don't have to pay 30%. So we have a direct billing 30%. So we have a direct billing relationship and such that they can take relationship and such that they can take that subscription to Android to PCs that subscription to Android to PCs whatever without any hassle and we have whatever without any hassle and we have Tim and Mark to thank for it. Yeah, Tim, Tim and Mark to thank for it. Yeah, Tim, I mean the like you said founders but I mean the like you said founders but also specific kind of founders because I also specific kind of founders because I think maybe you can educate me on this think maybe you can educate me on this but uh Tim is somebody who maintains to but uh Tim is somebody who maintains to this day sort of the unreasonleness of this day sort of the unreasonleness of principles. principles. principles. &gt;&gt; Yes, &gt;&gt; Yes, &gt;&gt; Yes, &gt;&gt; that's what I love. &gt;&gt; that's what I love. &gt;&gt; I I think sometimes maybe even with &gt;&gt; I I think sometimes maybe even with founders you can get worn down. It's a founders you can get worn down. It's a large company. large company. large company. &gt;&gt; There's a lot of smart quote unquote &gt;&gt; There's a lot of smart quote unquote people around you, people around you, &gt;&gt; lawyers and just whisper in your ear &gt;&gt; lawyers and just whisper in your ear over time and you're like, well, just be over time and you're like, well, just be reasonable being, you know, this is a reasonable being, you know, this is a different thing and different thing and &gt;&gt; to to be the sort of maintain I mean &gt;&gt; to to be the sort of maintain I mean Steve Jobs did this maintain Steve Jobs did this maintain m still are the asshole. m still are the asshole. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Who says no &gt;&gt; Who says no &gt;&gt; this whole company I'll sink this whole &gt;&gt; this whole company I'll sink this whole fucking company over this. That's the fucking company over this. That's the exact language basically I used in our exact language basically I used in our original campaign. I will burn this original campaign. I will burn this business down before I hand over 30% of business down before I hand over 30% of it to Apple. And that sort of it to Apple. And that sort of indignation, that actual rage is indignation, that actual rage is something I try to be a little careful something I try to be a little careful about tapping into because it is a about tapping into because it is a little bit of a volatile compound little bit of a volatile compound because I mean I have a bunch of because I mean I have a bunch of employees. We have a bunch of uh employees. We have a bunch of uh customers. It would be pretty sad if the customers. It would be pretty sad if the journey of 37 signals after 25 years journey of 37 signals after 25 years would come to an end because Apple would would come to an end because Apple would burn us down or I would burn the burn us down or I would burn the business down over this fight with business down over this fight with Apple. But I think you also need that Apple. But I think you also need that level of conviction to be able to even level of conviction to be able to even drive the day-to-day decisions. One of drive the day-to-day decisions. One of the other Apple examples, I know I'm the other Apple examples, I know I'm racking on Apple a little bit here, and racking on Apple a little bit here, and I don't actually hate them. I really I don't actually hate them. I really don't. I am tremendously disappointed at don't. I am tremendously disappointed at the squandered relationship that did not the squandered relationship that did not need to be sold away for so little. Now need to be sold away for so little. Now I understand that the app store toll I understand that the app store toll booth is actually pretty big business. booth is actually pretty big business. It's multiple billions but Apple is a It's multiple billions but Apple is a trillion dollar company and I think in trillion dollar company and I think in the lens of history this is going to the lens of history this is going to come off as a tremendous mistake and I come off as a tremendous mistake and I think it's already coming off as a think it's already coming off as a tremendous mistake. The flop that was tremendous mistake. The flop that was the Vision Pro was partly because Apple the Vision Pro was partly because Apple had pissed off every other developer. No had pissed off every other developer. No one was eager to come build the kind of one was eager to come build the kind of experiences for their new hardware that experiences for their new hardware that would perhaps have made it a success. So would perhaps have made it a success. So when you're on top and you have all the when you're on top and you have all the cards, you can delude yourself into cards, you can delude yourself into thinking that you can dictate all terms thinking that you can dictate all terms at all times and there are no long-term at all times and there are no long-term consequences. Apple is learning finally consequences. Apple is learning finally the fact that there are long-term the fact that there are long-term consequences and that developers consequences and that developers actually are important to Apple's actually are important to Apple's business and the relationship is not business and the relationship is not entirely one-sided. We don't owe our entirely one-sided. We don't owe our existence to Apple and Apple alone. existence to Apple and Apple alone. We've built our own customer bases. We've built our own customer bases. Apple has been beneficial to the Apple has been beneficial to the industry. I'm glad the iPhone exists. Uh industry. I'm glad the iPhone exists. Uh da da. It's not that it doesn't go both da da. It's not that it doesn't go both ways, but Apple wants it only one way. ways, but Apple wants it only one way. And I think And I think that is a mistake. And it's a mistake that is a mistake. And it's a mistake that was avoidable. And a that's that was avoidable. And a that's disappointing. Certainly disappointing disappointing. Certainly disappointing for me. I've literally spent 20 years for me. I've literally spent 20 years evangelizing this shit, right? I've evangelizing this shit, right? I've spent so much money buying Apple spent so much money buying Apple hardware. Um, excusing a bunch of things hardware. Um, excusing a bunch of things they've done over the years and then they've done over the years and then for what? for what? for what? For the fact that you wanted 30% of For the fact that you wanted 30% of something that I created in the most something that I created in the most unreasonable way possible. Couldn't we unreasonable way possible. Couldn't we have found a better way to do this? I have found a better way to do this? I think they're going to get forced to to think they're going to get forced to to do a better way. But did you also have do a better way. But did you also have to go through the indignity of having a to go through the indignity of having a criminal contempt charge against you, criminal contempt charge against you, getting referred to prosecution? It just getting referred to prosecution? It just seems so beneath Apple. But it also seems so beneath Apple. But it also seems so in line with what happens to seems so in line with what happens to huge companies who are run by quote huge companies who are run by quote unquote professional managers rather unquote professional managers rather than founders and unreasonable people. than founders and unreasonable people. Well, we should probably also say that Well, we should probably also say that the thing you love about Apple, the the thing you love about Apple, the great spirit of Apple, I think still great spirit of Apple, I think still persists and there's a case to be made persists and there's a case to be made that this 30% thing is a slice a that this 30% thing is a slice a particular slice of a company, not a particular slice of a company, not a defining aspect of the company and that defining aspect of the company and that it Apple is still on top in the in the it Apple is still on top in the in the hardware that it makes in a lot of hardware that it makes in a lot of things that it makes. Uh and things that it makes. Uh and you know this is uh there could be just you know this is uh there could be just a hiccup in a long story of a great a hiccup in a long story of a great company that does a lot of awesome stuff company that does a lot of awesome stuff for humanity. So like Apple's a truly for humanity. So like Apple's a truly special company. We met we mentioned special company. We met we mentioned Amazon. There is no company like Apple. Amazon. There is no company like Apple. &gt;&gt; I agree. This is why the disappointment &gt;&gt; I agree. This is why the disappointment is all greater is all greater &gt;&gt; because we had such high aspirations and &gt;&gt; because we had such high aspirations and expectations to Apple that they were the expectations to Apple that they were the shining city on the hill and they were shining city on the hill and they were guiding the industry in a million guiding the industry in a million positive ways. I think as we talked positive ways. I think as we talked about earlier, hardware is exciting about earlier, hardware is exciting again in large part because Apple bought again in large part because Apple bought PA Semi and pursued a against all odds PA Semi and pursued a against all odds mission to get ARM up to the level it is mission to get ARM up to the level it is today. And we have these incredible M today. And we have these incredible M chips now because of it. And the design chips now because of it. And the design sensibilities that Apple bring to the sensibilities that Apple bring to the table are unparalleled. No one has taste table are unparalleled. No one has taste certainly at the hardware level like certainly at the hardware level like Apple does. Even at the software level, Apple does. Even at the software level, I'd say there's a lot of taste left in I'd say there's a lot of taste left in Apple, but there's also some real sour Apple, but there's also some real sour taste now. So, they have to wash that taste now. So, they have to wash that off first, I think, before they find off first, I think, before they find their way back. But Apple's been in a in their way back. But Apple's been in a in a mirage before. I mean, uh, Wasnak and a mirage before. I mean, uh, Wasnak and Steve Jobs started this thing in the Steve Jobs started this thing in the garage, has great success with the Apple garage, has great success with the Apple 2. He hands the company over to a sugar 2. He hands the company over to a sugar drink salesman who tanks the company drink salesman who tanks the company into the 90s. He doesn't learn the into the 90s. He doesn't learn the lesson. Spends the next 20 years lesson. Spends the next 20 years building up this amazing company. Then building up this amazing company. Then hands the company over again to a hands the company over again to a logistics person who presumably had more logistics person who presumably had more redeeming qualities than uh the first redeeming qualities than uh the first guy who put in charge but still ends up guy who put in charge but still ends up leading the company astray. Now this is leading the company astray. Now this is the norm. The norm is that great the norm. The norm is that great companies don't last forever. In the companies don't last forever. In the long arc of history, almost no company long arc of history, almost no company lasts forever. There are very few lasts forever. There are very few companies around that was here 100 years companies around that was here 100 years ago, even fewer 200 years ago, and ago, even fewer 200 years ago, and virtually nothing that are a thousand virtually nothing that are a thousand years old outside of a handful of years old outside of a handful of Japanese swords makers or something like Japanese swords makers or something like that, right? So, that, right? So, &gt;&gt; you can get deluded into thinking that &gt;&gt; you can get deluded into thinking that something is forever when you're in the something is forever when you're in the moment and they seem so large. Apple moment and they seem so large. Apple could absolutely stumble and I think could absolutely stumble and I think they have more reason to stumble now they have more reason to stumble now than ever. They're behind on AI, than ever. They're behind on AI, terribly behind. Their software quality terribly behind. Their software quality is faltering in a bunch of ways. The is faltering in a bunch of ways. The competition is catching up on the competition is catching up on the hardware game in part because TSMC is hardware game in part because TSMC is not an Apple subsidiary, but a foundry not an Apple subsidiary, but a foundry that services AMD and Nvidia and others that services AMD and Nvidia and others who are now able to use the same kind of who are now able to use the same kind of advanced processes. This is something I advanced processes. This is something I learned after not looking at PC hardware learned after not looking at PC hardware for the longest time that holy smokes, for the longest time that holy smokes, AMD actually makes CPUs that are just as AMD actually makes CPUs that are just as fast, if not faster than Apple's. fast, if not faster than Apple's. They're not quite as efficient yet They're not quite as efficient yet because ARM has some fundamental because ARM has some fundamental efficiencies over x86, but they're still efficiencies over x86, but they're still pretty good. So, Apple should have pretty good. So, Apple should have reason to worry. Apple's shareholders reason to worry. Apple's shareholders should have reason to be concerned not should have reason to be concerned not just about all these stumbles but also just about all these stumbles but also by the fact that Apple is run by old by the fact that Apple is run by old people. Apple's board has an average age people. Apple's board has an average age of I think 75. Their entire executive of I think 75. Their entire executive team is above 60. Now team is above 60. Now that sounds horribly agist and in some that sounds horribly agist and in some ways it a little bit is in the same way ways it a little bit is in the same way I'm agist against myself. Like I'm 45 I'm agist against myself. Like I'm 45 now and I sort of kind of have to force now and I sort of kind of have to force myself to really get into AI because it myself to really get into AI because it is such a paradigm shift and a lot of is such a paradigm shift and a lot of people when they reach a certain age are people when they reach a certain age are just happy to stay with what they know. just happy to stay with what they know. They don't want to go back to being a They don't want to go back to being a beginner. They don't want to go back to beginner. They don't want to go back to having to relearn everything. And I having to relearn everything. And I think like this is a little hard for me think like this is a little hard for me at 45. How the hell do you do that at at 45. How the hell do you do that at 75? 75? 75? &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; I have to come back to you mentioned it &gt;&gt; I have to come back to you mentioned it earlier. earlier. earlier. You're a parent. Can you speak to the You're a parent. Can you speak to the impact that becoming a father has had on impact that becoming a father has had on your life? your life? your life? &gt;&gt; I think what's funny about fatherhood is &gt;&gt; I think what's funny about fatherhood is that for me, I wasn't even sure it's that for me, I wasn't even sure it's something I wanted. something I wanted. &gt;&gt; It took meeting the right woman and &gt;&gt; It took meeting the right woman and letting her convince me that this was letting her convince me that this was the right idea before we even got the right idea before we even got started. I didn't have starting my own started. I didn't have starting my own family on the list of priorities in my family on the list of priorities in my late 20s or even early 30s. late 20s or even early 30s. It was really the impetus of meeting my It was really the impetus of meeting my wife Jamie and her telling me this is wife Jamie and her telling me this is what I want. I want to have a family. I what I want. I want to have a family. I want to get married. I want to have want to get married. I want to have kids. I want to have three. And me going kids. I want to have three. And me going for a second like whoa whoa whoa. and for a second like whoa whoa whoa. and then h then h then h all right let's do it and I think all right let's do it and I think that's the kind of happy accident where that's the kind of happy accident where some parts of my life have been very some parts of my life have been very driven where I knew exactly what I driven where I knew exactly what I wanted and how to push forward to it and wanted and how to push forward to it and what the payoff was going to be what the payoff was going to be but when it comes to having a family but when it comes to having a family that always felt like a very fuzzy that always felt like a very fuzzy abstract idea that sure someday maybe. abstract idea that sure someday maybe. And then it became very concrete because And then it became very concrete because I met a woman who knew what she wanted. I met a woman who knew what she wanted. And looking back on it now, And looking back on it now, it almost seems it almost seems crazy like there's this fork in the road crazy like there's this fork in the road of reality where if that hadn't happened of reality where if that hadn't happened and I had been sitting here now, not and I had been sitting here now, not being a father, not having a family, being a father, not having a family, the level of regret knowing what I know the level of regret knowing what I know now about the joys of having that family now about the joys of having that family would have been existential, would have been existential, would have been would have been I don't know if they would have been I don't know if they would have been devastating. I think men have a little devastating. I think men have a little bit of a longer window to pursue these bit of a longer window to pursue these things than women do. There are just things than women do. There are just certain biological facts. certain biological facts. But But But ending up with the family I have now, ending up with the family I have now, ending up with my three boys have been ending up with my three boys have been just a transformative experience in the just a transformative experience in the sense that here's something that turned sense that here's something that turned out to be the most important thing. And out to be the most important thing. And it was an open secret. Not even an open it was an open secret. Not even an open secret. It was an open truth through all secret. It was an open truth through all of history. You listen to anyone who's of history. You listen to anyone who's ever had children, they will all say, ever had children, they will all say, "My children are the most important to "My children are the most important to me." Yet somehow that wisdom couldn't me." Yet somehow that wisdom couldn't sink in until you were in the situation sink in until you were in the situation yourself. I find those truths yourself. I find those truths fascinating when you can't actually fascinating when you can't actually relay them with words. I can tell you, relay them with words. I can tell you, "Hey, Lex, what are you doing? Get a "Hey, Lex, what are you doing? Get a wife. Make some kids. wife. Make some kids. &gt;&gt; Get a move on it." And these are just &gt;&gt; Get a move on it." And these are just words. They're not communicating the words. They're not communicating the gravity of what it actually feels to go gravity of what it actually feels to go through the experience. And you can't through the experience. And you can't really learn it without going through really learn it without going through it. Now, of course, you can be it. Now, of course, you can be influenced and whatever, we can all help influenced and whatever, we can all help contribute and little sparks and little contribute and little sparks and little seeds can grow in your your mind about seeds can grow in your your mind about it, but it still has to happen. it, but it still has to happen. &gt;&gt; And &gt;&gt; And &gt;&gt; And now that I am in this situation and just now that I am in this situation and just the sheer joy on a daily basis where you the sheer joy on a daily basis where you think your level of life satisfaction is think your level of life satisfaction is on a scale of 1 to 10. on a scale of 1 to 10. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. And then the satisfaction of seeing your And then the satisfaction of seeing your children understand something, children understand something, accomplish something, accomplish something, accomplish something, learn something, do something, just be, learn something, do something, just be, just goes like, "Oh my god, this scale just goes like, "Oh my god, this scale doesn't go from 1 to 10. It goes from 1 doesn't go from 1 to 10. It goes from 1 to 100." And I've been playing down here to 100." And I've been playing down here in the 1 to 10 range all this time, and in the 1 to 10 range all this time, and there's a there's a one to 100. there's a there's a one to 100. That has been humbling in a way that That has been humbling in a way that is impactful in and of itself. This is impactful in and of itself. This whole idea that I thought I had a fair whole idea that I thought I had a fair understanding of like the boundaries of understanding of like the boundaries of life in my early 30s. Like what is this life in my early 30s. Like what is this about? I mean, I've been on this earth about? I mean, I've been on this earth long enough now here to know something. long enough now here to know something. And he don't know. I did not know. I did And he don't know. I did not know that the scale was much uh much not know that the scale was much uh much broader. And I've often talked about broader. And I've often talked about the joys of having kids and just seeing the joys of having kids and just seeing your own DNA, which your own DNA, which is remarkable to me because literally is remarkable to me because literally that's been the pursuit of humans since that's been the pursuit of humans since the dawn of time. I am here today the dawn of time. I am here today because whatever 30,000 years ago, some because whatever 30,000 years ago, some Neanderthal Neanderthal Neanderthal had the same realization that I should had the same realization that I should procreate and I should continue my procreate and I should continue my bloodline and that that all amounts to bloodline and that that all amounts to me sitting here here now. But me sitting here here now. But it didn't become a practical reality to it didn't become a practical reality to me before meeting the right woman. me before meeting the right woman. &gt;&gt; And I think that that's sometimes not &gt;&gt; And I think that that's sometimes not part of the conversation enough that part of the conversation enough that there's something broken at the moment there's something broken at the moment about how people pair up in the Western about how people pair up in the Western world. world. world. &gt;&gt; Yeah. And it's at the source of why &gt;&gt; Yeah. And it's at the source of why we're not having enough children because we're not having enough children because there's not enough couples. There's not there's not enough couples. There's not enough marriage. There's not a lot of enough marriage. There's not a lot of these there's not enough of all these these there's not enough of all these traditional values that even 50, 60, 70 traditional values that even 50, 60, 70 years ago was just taken for granted. years ago was just taken for granted. We're in this grand experiment of what We're in this grand experiment of what happens if we just remove a bunch of happens if we just remove a bunch of institutions? What happens if we no institutions? What happens if we no longer value marriage as a longer value marriage as a something to aspire to? What happened if something to aspire to? What happened if parenthood is now seen in some camps as parenthood is now seen in some camps as almost something like weird or against almost something like weird or against your own self-expression? It's a grand your own self-expression? It's a grand experiment that experiment that experiment that I'm kind of curious how it turns out. I I'm kind of curious how it turns out. I I'd prefer to watch it as a movie like I'd prefer to watch it as a movie like the children of men of like that was a the children of men of like that was a good show. I kind of wish that wasn't good show. I kind of wish that wasn't reality, but we're seeing that reality reality, but we're seeing that reality play out while I'm sitting here in a play out while I'm sitting here in a very traditional two parent loving very traditional two parent loving household with three children and going, household with three children and going, um, this is now at the top. I've done a um, this is now at the top. I've done a lot of things in my life. I've built lot of things in my life. I've built software. I've built companies. I've software. I've built companies. I've raced cars. I've done all sorts of raced cars. I've done all sorts of things. And I would trade all of it in a things. And I would trade all of it in a heartbeat for my kids. That's just a heartbeat for my kids. That's just a really fascinating human experience that really fascinating human experience that the depth of that bond is something you the depth of that bond is something you can't appreciate before you have it. But can't appreciate before you have it. But I also think there is a role to play to I also think there is a role to play to talk it up because we're being bombarded talk it up because we're being bombarded constantly with reasons why not to. Oh, constantly with reasons why not to. Oh, it's it's too expensive. Um well, you it's it's too expensive. Um well, you could get divorced and then you might could get divorced and then you might lose half. There's all these voices lose half. There's all these voices constantly articulating the case against constantly articulating the case against marriage, the case against having marriage, the case against having children children children that those of us who've chosen to do the that those of us who've chosen to do the traditional thing to get married and to traditional thing to get married and to have children have an obligation to kind have children have an obligation to kind of talk it up a little bit, which would of talk it up a little bit, which would have seemed ridiculous again 50 years have seemed ridiculous again 50 years ago that you'd have to talk up something ago that you'd have to talk up something so fundamental at that. But I have so fundamental at that. But I have become become become kind of obligated in that sense to do kind of obligated in that sense to do just that. To talk it up, to say, do you just that. To talk it up, to say, do you know what? You can look at everything know what? You can look at everything that I've done and if you like some of that I've done and if you like some of those parts, realize that to me in this those parts, realize that to me in this situation, situation, situation, the kids, the family, the wife is more the kids, the family, the wife is more important than all of it. And it sounds important than all of it. And it sounds like a cliche because you've heard it a like a cliche because you've heard it a thousand times before. And by becoming a thousand times before. And by becoming a cliche, maybe you start believing it's cliche, maybe you start believing it's not true. that it's just something not true. that it's just something people say, people say, people say, but it is reality. I know almost no but it is reality. I know almost no parents that I have personal parents that I have personal relationships with that don't consider relationships with that don't consider their children to be the most important their children to be the most important thing in their life. thing in their life. &gt;&gt; So there's a lot of interesting things &gt;&gt; So there's a lot of interesting things you said. one it does seem to be I know you said. one it does seem to be I know a lot of uh parents a lot of uh parents perhaps more interestingly I know a lot perhaps more interestingly I know a lot of super successful people who are of super successful people who are parents who parents who parents who uh really love their kids and who uh say uh really love their kids and who uh say that the kids even help them to be more that the kids even help them to be more successful. Now the interesting thing successful. Now the interesting thing speaking to what you're saying is it speaking to what you're saying is it does seem for us humans it's easier to does seem for us humans it's easier to articulate the negatives articulate the negatives because they're sort of concrete because they're sort of concrete pragmatic you know it costs more it pragmatic you know it costs more it takes up time you know they can be you takes up time you know they can be you crying all over the place they're you crying all over the place they're you know tiny narcissists running around or know tiny narcissists running around or whatever whatever whatever &gt;&gt; which is all true by the way &gt;&gt; which is all true by the way &gt;&gt; yeah pooping everywhere that kind of &gt;&gt; yeah pooping everywhere that kind of stuff uh but to articulate the thing you stuff uh but to articulate the thing you were speaking to of there's There's this were speaking to of there's There's this little creature that you love more than little creature that you love more than anything you've ever loved in your life. anything you've ever loved in your life. It's hard to convert that into words. It's hard to convert that into words. You have to really experience it. And You have to really experience it. And but I've I believe it and I want to but I've I believe it and I want to experience it that. But I I believe it experience it that. But I I believe it because just from a scientific method because just from a scientific method have seen a lot of people who are not have seen a lot of people who are not honestly not very capable of love honestly not very capable of love fall completely in love with their kids. fall completely in love with their kids. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Like you know very sort of um let's &gt;&gt; Like you know very sort of um let's let's just call it what it is. engineers let's just call it what it is. engineers that are very like beep boop b up. that are very like beep boop b up. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; They just fall in love and it's like all &gt;&gt; They just fall in love and it's like all right right right people who just like you said they don't people who just like you said they don't really want they don't really care or really want they don't really care or don't really think about having kids don't really think about having kids that kind of stuff once they do it that kind of stuff once they do it changes everything. So you know but it's changes everything. So you know but it's hard to convert into words. One of the hard to convert into words. One of the reasons I think it's also difficult is reasons I think it's also difficult is I mean I like kids not that I actively I mean I like kids not that I actively dislike them but when I was around other dislike them but when I was around other people's kids I didn't have a emotional people's kids I didn't have a emotional reaction. Some women have right they see reaction. Some women have right they see a baby and they go I never never had any a baby and they go I never never had any emotion of that. I mean I could emotion of that. I mean I could appreciate I'm I'm glad for you that you appreciate I'm I'm glad for you that you have children. It did not provoke have children. It did not provoke anything in me. anything in me. The emotions that are provoked in me The emotions that are provoked in me when I look at my own children this this when I look at my own children this this doesn't exist in the same universe. So doesn't exist in the same universe. So you don't have something you don't have you don't have something you don't have a complete parallel or at least a lot of a complete parallel or at least a lot of men or at least me I didn't have sort of men or at least me I didn't have sort of a framework to put it into what would it a framework to put it into what would it be like to have my own child and then be like to have my own child and then you experience it you just it's like the you experience it you just it's like the and it happens so quickly too this is and it happens so quickly too this is what I found fascinating it happens what I found fascinating it happens before that little human is even able to before that little human is even able to return any words to you that the love return any words to you that the love you develop to an infant happens quite you develop to an infant happens quite quickly not necessarily immediately. quickly not necessarily immediately. I don't know, different people have I don't know, different people have different experiences, but it took me a different experiences, but it took me a little bit, but then once it hit, it little bit, but then once it hit, it just hit like kick of a horse. just hit like kick of a horse. &gt;&gt; And I love that it's also just such a &gt;&gt; And I love that it's also just such a universal experience that you can be the universal experience that you can be the most successful person in the world, you most successful person in the world, you can be the poorest person in the world, can be the poorest person in the world, you can be somewhere in the middle. and you can be somewhere in the middle. and we share this experience that being a we share this experience that being a parent for most of them turns out to be parent for most of them turns out to be the most important thing in their life. the most important thing in their life. &gt;&gt; But you know it is really nice to do &gt;&gt; But you know it is really nice to do that kind of experience with the right that kind of experience with the right partner. But I think because I'm such an partner. But I think because I'm such an empath, the cost of having the wrong empath, the cost of having the wrong partner is high for me. But then I also partner is high for me. But then I also like realized, man, I have a friend of like realized, man, I have a friend of mine who's divorced happily and he still mine who's divorced happily and he still loves the shit out of his kids and it's loves the shit out of his kids and it's still be it's a mess, but there's still still be it's a mess, but there's still all of that love is still there and all of that love is still there and it's, you know, you just have to make it it's, you know, you just have to make it work. It's just that I don't know that work. It's just that I don't know that kind of like divorce would destroy me. kind of like divorce would destroy me. You should listen to uh the school of You should listen to uh the school of life. He has this great bit on YouTube, life. He has this great bit on YouTube, you will marry the wrong person. If you you will marry the wrong person. If you accept upfront that you will marry the accept upfront that you will marry the wrong person, that every potential wrong person, that every potential person you can marry is going to be the person you can marry is going to be the wrong person on some dimension. They're wrong person on some dimension. They're going to annoy you. They're going to be going to annoy you. They're going to be not what you hoped in certain not what you hoped in certain dimensions. The romantic ideal that dimensions. The romantic ideal that everything is just perfect all the time everything is just perfect all the time is not very conducive to the reality of is not very conducive to the reality of hitching up and get making babies. hitching up and get making babies. Because I think as you just accounted, Because I think as you just accounted, even when it turns to shit, even when it turns to shit, I find that most of the people I I find that most of the people I personally know where things have fallen personally know where things have fallen apart and have turned to shit, never in apart and have turned to shit, never in a million years would they go like, I a million years would they go like, I regret it. regret it. regret it. &gt;&gt; I would rather my children did not exist &gt;&gt; I would rather my children did not exist because a relationship turned sour. I because a relationship turned sour. I mean, I think you should try very hard. mean, I think you should try very hard. And I think this is also one of those And I think this is also one of those things where we didn't fully understand things where we didn't fully understand those fences and when we pulled them up those fences and when we pulled them up and celebrated how easy it is to get and celebrated how easy it is to get divorced, for example, that that wasn't divorced, for example, that that wasn't going to have some negative going to have some negative consequences. I'm not saying you consequences. I'm not saying you shouldn't have divorces. I'm not saying shouldn't have divorces. I'm not saying return to return to return to times past. I am saying though that times past. I am saying though that civilization over thousands of years civilization over thousands of years developed certain technologies for developed certain technologies for ensuring the continuation of its own ensuring the continuation of its own institutions and its own life that institutions and its own life that perhaps we didn't fully appreciate. I perhaps we didn't fully appreciate. I mean again this is something Jordan mean again this is something Jordan Peterson and others are far more Peterson and others are far more articulate to speak about and that I've articulate to speak about and that I've learned a lot to just analyze my own learned a lot to just analyze my own situation. Why is it that this situation. Why is it that this incredible burden it is to be incredible burden it is to be responsible for someone else's life that responsible for someone else's life that you brought into this world is also the you brought into this world is also the most rewarding part of existence? That's most rewarding part of existence? That's just curious. just curious. just curious. &gt;&gt; Before I heard Peterson articulate the &gt;&gt; Before I heard Peterson articulate the value of taking on the greatest burden value of taking on the greatest burden you know how to carry. I always thought you know how to carry. I always thought about burdens as a negative things. Why about burdens as a negative things. Why would I want the burden of a child? I would I want the burden of a child? I might screw it up. might be a bad might screw it up. might be a bad parent. They might have bad al right. parent. They might have bad al right. All the reasons why you shouldn't and so All the reasons why you shouldn't and so few voices articulating why you should. few voices articulating why you should. &gt;&gt; Yeah. But there I should also add on top &gt;&gt; Yeah. But there I should also add on top of that thing you mentioned currently of that thing you mentioned currently perhaps in the west the matchmaking perhaps in the west the matchmaking process process process &gt;&gt; is broken &gt;&gt; is broken and technology made it worse. &gt;&gt; is broken and technology made it worse. It's fascinating this whole thing that It's fascinating this whole thing that that hasn't been solved. So hiring great that hasn't been solved. So hiring great teams, that's probably been solved the teams, that's probably been solved the best out of matchmaking. Finding great best out of matchmaking. Finding great people to hire, people to hire, &gt;&gt; right? &gt;&gt; right? &gt;&gt; right? &gt;&gt; Uh second, finding great friends. That's &gt;&gt; Uh second, finding great friends. That's like that's also hasn't been solved and like that's also hasn't been solved and it's breaking down. it's breaking down. &gt;&gt; It's breaking down. And third is &gt;&gt; It's breaking down. And third is matchmaking for like relationships. matchmaking for like relationships. That's like the worst. And in fact, That's like the worst. And in fact, technology made it even worse. technology made it even worse. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; It's fascinating. &gt;&gt; It's fascinating. &gt;&gt; It is. It's a great example again of how &gt;&gt; It is. It's a great example again of how all the greatest intentions still led us all the greatest intentions still led us straight to hell. I really enjoyed Louis straight to hell. I really enjoyed Louis Perry's analysis of the sexual Perry's analysis of the sexual revolution not being an unqualified revolution not being an unqualified good, which was something I hadn't good, which was something I hadn't thought about at all before she thought about at all before she articulated it, that of course uh women articulated it, that of course uh women should be able to have freedom until should be able to have freedom until termination and abortions and all of termination and abortions and all of these things. And these things. And Louise Perry is not arguing against that Louise Perry is not arguing against that either, of course. But there are second either, of course. But there are second order effects that we don't appreciate order effects that we don't appreciate at the time and we may not have at the time and we may not have ready-made solutions for. That's just ready-made solutions for. That's just interesting. You make life better in a interesting. You make life better in a million different ways and somehow we million different ways and somehow we end up more miserable. Why is that? Why end up more miserable. Why is that? Why is it that humans find meaning in is it that humans find meaning in hardship? hardship? hardship? And I think some of that is that it's a And I think some of that is that it's a difficult question to answer through difficult question to answer through science. science. science. And again, Peterson articulates well And again, Peterson articulates well this idea that you have to find some of this idea that you have to find some of it through art, some of it through it through art, some of it through authors, some of it through different authors, some of it through different I was just about to say modes of knowing I was just about to say modes of knowing before I stopped myself because that before I stopped myself because that sounds like woo bullshit. But there are sounds like woo bullshit. But there are different ways to different ways to acquire those deep lessons that sort of acquire those deep lessons that sort of uh paper is not going to tell you. uh paper is not going to tell you. &gt;&gt; I mean that this is really the point uh &gt;&gt; I mean that this is really the point uh also applies to religion for example. If also applies to religion for example. If you remove from society the software of you remove from society the software of religion religion religion &gt;&gt; yes &gt;&gt; yes &gt;&gt; yes &gt;&gt; you better have a good replacement. And &gt;&gt; you better have a good replacement. And we've had a bunch of bad replacements, we've had a bunch of bad replacements, especially over the last few decades. especially over the last few decades. Religion is one of those things I've Religion is one of those things I've struggled with a lot because I'm not struggled with a lot because I'm not religious, but I sort of wish I was. I religious, but I sort of wish I was. I can now fully appreciate the enormous can now fully appreciate the enormous value having an operating system like value having an operating system like that brings, not just at the individual that brings, not just at the individual level, but rather at a societal level. level, but rather at a societal level. And it's not clear at all what the And it's not clear at all what the answer is. I think we've tried a lot of answer is. I think we've tried a lot of dead ends when it came to replacements dead ends when it came to replacements and people have been filling that void and people have been filling that void in a million different ways that seem in a million different ways that seem worse than all the religions despite worse than all the religions despite their faults in a myriad of ways have their faults in a myriad of ways have been able to deliver. been able to deliver. &gt;&gt; Yeah. Religion is like the cobalt code. &gt;&gt; Yeah. Religion is like the cobalt code. It's just It's just It's just &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; It's the institutions where we don't &gt;&gt; It's the institutions where we don't fully understand the rules and why fully understand the rules and why they're there and what's going to happen they're there and what's going to happen if we remove them. Some of them seems if we remove them. Some of them seems obvious to me are just bullshit of the obvious to me are just bullshit of the time. Oh, you shouldn't eat whatever time. Oh, you shouldn't eat whatever shellfish because in that region of the shellfish because in that region of the world there was something something world there was something something something. Okay, fine. But there's a something. Okay, fine. But there's a bunch of other things that are pivotal bunch of other things that are pivotal to keeping society functioning for the to keeping society functioning for the long term and we don't fully understand long term and we don't fully understand which is which. What's the bullshit and which is which. What's the bullshit and what's the loadbearing pillars of what's the loadbearing pillars of society? society? society? &gt;&gt; Can you speak to the hit on productivity &gt;&gt; Can you speak to the hit on productivity that kids that kids that kids have? Did they increase your have? Did they increase your productivity, decrease it, or is that productivity, decrease it, or is that even the wrong question to ask? even the wrong question to ask? &gt;&gt; I think it's one of the reasons why &gt;&gt; I think it's one of the reasons why ambitious people are often afraid of ambitious people are often afraid of having children because they think, "I having children because they think, "I have so much more to do, and I barely have so much more to do, and I barely have enough time now. How would I have enough time now. How would I possibly be able to accomplish the possibly be able to accomplish the things I want to accomplish if I add things I want to accomplish if I add another human into the mix? Now, a another human into the mix? Now, a we've always worked 40 hours a week, not we've always worked 40 hours a week, not 80 or 100 or 120. I think that's very 80 or 100 or 120. I think that's very beneficial. B, beneficial. B, beneficial. B, kids don't exist in this vacuum of just kids don't exist in this vacuum of just them alone being entered into your life. them alone being entered into your life. Hopefully, there's a partner. And in my Hopefully, there's a partner. And in my life, I'm married to a wonderful woman life, I'm married to a wonderful woman who decided to stop working her who decided to stop working her corporate job when we got together and corporate job when we got together and have been able to carry a huge part of have been able to carry a huge part of that responsibility. I was just about to that responsibility. I was just about to say burden. And I think that's exactly say burden. And I think that's exactly how it often gets presented, especially how it often gets presented, especially from a feminist perspective, that caring from a feminist perspective, that caring for your own children is some sort of for your own children is some sort of unpaid labor that has to be compensated unpaid labor that has to be compensated for in some specific way beyond the for in some specific way beyond the compensation of what? Bringing life into compensation of what? Bringing life into this world, raising wonderful humans. this world, raising wonderful humans. There's something screwy about that There's something screwy about that analysis that I actually think the analysis that I actually think the modern trad movement is a reply against. modern trad movement is a reply against. Whether they have all the answers, I'm Whether they have all the answers, I'm certainly not sure of either. But certainly not sure of either. But there's something that's just not right there's something that's just not right in the analysis that children are a in the analysis that children are a burden and that if burden and that if woman chooses to stay at home with the woman chooses to stay at home with the kids that that some sort of failure mode kids that that some sort of failure mode of feminist ambition. I think that's of feminist ambition. I think that's actually a complete dead end. Now actually a complete dead end. Now depends on different people, different depends on different people, different circumstances. I can just speak to my circumstances. I can just speak to my life being married to a wonderful woman life being married to a wonderful woman who have decided to be home with the who have decided to be home with the kids at least at their early age and kids at least at their early age and taken on a lot of those taken on a lot of those responsibilities. Now, it doesn't mean responsibilities. Now, it doesn't mean there isn't plenty of ways that I have there isn't plenty of ways that I have to be part of that and have to chip in, to be part of that and have to chip in, but it's allowed me to continue to work but it's allowed me to continue to work the 40 hours a week that I've always the 40 hours a week that I've always worked, but it's made the 40 hours more worked, but it's made the 40 hours more strict. I have a schedule where I wake strict. I have a schedule where I wake up whatever 6:30 and we have to get out up whatever 6:30 and we have to get out of the door a little before 8. I usually of the door a little before 8. I usually have to play at least one or two rounds have to play at least one or two rounds of Fortnite with my youngest, sometimes of Fortnite with my youngest, sometimes middle child, then take the kids to middle child, then take the kids to school, get in, start work at, I don't school, get in, start work at, I don't know, uh, 8:30, 9, then work until 5 know, uh, 8:30, 9, then work until 5 5:30, sometimes 6:00, but then it's 5:30, sometimes 6:00, but then it's dinner and I have to be there for that dinner and I have to be there for that and then I have to read to the kids and and then I have to read to the kids and by the time that's done, I don't want to by the time that's done, I don't want to go back to work. So my work time really go back to work. So my work time really is 9 to5 9 to6 depending of whatever is is 9 to5 9 to6 depending of whatever is going on. Sometimes there's emergencies going on. Sometimes there's emergencies and you have to tend to them but it's and you have to tend to them but it's made it more structured and I found some made it more structured and I found some some some benefit in that. I found some some some benefit in that. I found some productivity in that that I can't goof productivity in that that I can't goof around quite as much that the day will around quite as much that the day will end at around 5:36. That's just if I end at around 5:36. That's just if I didn't accomplish what I wanted to do didn't accomplish what I wanted to do today. If I get to that time it's done. today. If I get to that time it's done. I'm over. I have to try again tomorrow. I'm over. I have to try again tomorrow. &gt;&gt; Whereas before having a family and &gt;&gt; Whereas before having a family and before having kids, I could just like before having kids, I could just like not do it and just make it up in the not do it and just make it up in the evening. evening. evening. &gt;&gt; So, in that way, it's made me more &gt;&gt; So, in that way, it's made me more structured, but it hasn't really changed structured, but it hasn't really changed my volume of work all that much. I still my volume of work all that much. I still work about the same amount of hours. And work about the same amount of hours. And that's, by the way, enough. This is one that's, by the way, enough. This is one of the key points we make in it doesn't of the key points we make in it doesn't have to be crazy at work, the latest have to be crazy at work, the latest book we wrote, is that there's enough book we wrote, is that there's enough time. 40 hours a week is actually a ton time. 40 hours a week is actually a ton if you don't piss it away. Most people if you don't piss it away. Most people do piss it away. They piss it away in do piss it away. They piss it away in meetings. They piss it away on just meetings. They piss it away on just stuff that doesn't matter when stuff that doesn't matter when even 3 hours, 4 hours of concentrated, even 3 hours, 4 hours of concentrated, uninterrupted time every day would move uninterrupted time every day would move the goals they truly care about way down the goals they truly care about way down the field. the field. the field. &gt;&gt; I think kids do make you more productive &gt;&gt; I think kids do make you more productive in that way for people who need it, in that way for people who need it, especially people like me. uh they especially people like me. uh they create their urgency like you have to if create their urgency like you have to if you have to be done by five you have to be done by five &gt;&gt; I it's a maybe counterintuitive notion &gt;&gt; I it's a maybe counterintuitive notion but but but &gt;&gt; for people like me who like to work &gt;&gt; for people like me who like to work you can really fill the day you can really fill the day &gt;&gt; yes &gt;&gt; yes &gt;&gt; yes &gt;&gt; with fluff &gt;&gt; with fluff &gt;&gt; yes &gt;&gt; yes &gt;&gt; yes &gt;&gt; of work and um if you have to be done by &gt;&gt; of work and um if you have to be done by five you're going to have to do the deep five you're going to have to do the deep work and get it done like really focused work and get it done like really focused singular work singular work singular work &gt;&gt; yes &gt;&gt; yes &gt;&gt; yes &gt;&gt; and then you're just going cut off. &gt;&gt; and then you're just going cut off. &gt;&gt; It keeps you honest. It keeps you honest &gt;&gt; It keeps you honest. It keeps you honest because because because &gt;&gt; you can you can squander one day, you &gt;&gt; you can you can squander one day, you can squander two days, but if I squander can squander two days, but if I squander a whole week, a whole week, &gt;&gt; I feel terrible. &gt;&gt; I feel terrible. &gt;&gt; Now, that's just some drive I have in me &gt;&gt; Now, that's just some drive I have in me where I feel content and full of meaning where I feel content and full of meaning if I actually do stuff that matters. If if I actually do stuff that matters. If I can look back upon the week and go I can look back upon the week and go like, that was that was a nice week. like, that was that was a nice week. Really, we moved forward. Maybe we Really, we moved forward. Maybe we didn't get done, but we moved forward. didn't get done, but we moved forward. Everything got better. Um, and I think Everything got better. Um, and I think kits really help just time box things in kits really help just time box things in that way. And a lot of people need that that way. And a lot of people need that because I find just so much of the because I find just so much of the celebration of overwork to be so celebration of overwork to be so tiresome. Oh, I I work 60 hours or 80 tiresome. Oh, I I work 60 hours or 80 hours, 100 hours a week. And just like hours, 100 hours a week. And just like first of all, no you don't. first of all, no you don't. &gt;&gt; No, you don't. Like those 80 hours are &gt;&gt; No, you don't. Like those 80 hours are full of all sorts of fluff that you full of all sorts of fluff that you label work, but that I would laugh at. label work, but that I would laugh at. And that most people laugh at that you And that most people laugh at that you would laugh at if you actually did the would laugh at if you actually did the analysis of where's that time going. analysis of where's that time going. Most of the important stuff that have to Most of the important stuff that have to be done is done in these uninterrupted be done is done in these uninterrupted chunks of 2 hours here or four hours chunks of 2 hours here or four hours there or 5 hours there. The hard part is there or 5 hours there. The hard part is making sure you get them in the whole making sure you get them in the whole piece. Um so don't give me don't give me piece. Um so don't give me that. There's time enough. And also that. There's time enough. And also what's so important that it ranks above what's so important that it ranks above continuing your lineage? I think there's continuing your lineage? I think there's just some ancient honor in the fact that just some ancient honor in the fact that again this DNA that's sitting on this again this DNA that's sitting on this chair traveled 30,000 years to get here chair traveled 30,000 years to get here and you're going to squander all that and you're going to squander all that away just so you can send a few more away just so you can send a few more emails. There is something that's also emails. There is something that's also hard to convert into words of just the hard to convert into words of just the kind of fun you can have just playing kind of fun you can have just playing with your kids. I don't know what that with your kids. I don't know what that on the surface it's like. I could have on the surface it's like. I could have that kind of fun just playing video that kind of fun just playing video games by myself. But no, it's like games by myself. But no, it's like there's something magical about it, there's something magical about it, right? right? right? &gt;&gt; I have a thousand hours logged in &gt;&gt; I have a thousand hours logged in Fortnite since 19, I think, Fortnite since 19, I think, all of it with my kids. I'd never be all of it with my kids. I'd never be playing Fortnite. Well, I don't know if playing Fortnite. Well, I don't know if I never would be. I wouldn't be playing I never would be. I wouldn't be playing a thousand hours of Fortnite if it a thousand hours of Fortnite if it wasn't for my kids. The enjoyment for me wasn't for my kids. The enjoyment for me is to do something with them that I also is to do something with them that I also happen to enjoy. I really love Fortnite. happen to enjoy. I really love Fortnite. It's a phenomenal game. I don't have to It's a phenomenal game. I don't have to force myself to play that with them. I force myself to play that with them. I often ask like, "Hey, uh, do you want to often ask like, "Hey, uh, do you want to play Fortnite?" play Fortnite?" play Fortnite?" &gt;&gt; But still, it's an activity that I get &gt;&gt; But still, it's an activity that I get to share with them. It's a passion that to share with them. It's a passion that I get to share with them. I've started, I get to share with them. I've started, uh, doing go-karting with my oldest. uh, doing go-karting with my oldest. I've been driving race cars for a long I've been driving race cars for a long time and now they're getting into time and now they're getting into go-karting. And just being at the go-karting. And just being at the go-kart track, seeing them go around, go-kart track, seeing them go around, seeing them get faster, seeing them seeing them get faster, seeing them learn that skill, learn that skill, you just go look at like what else would you just go look at like what else would I be doing with my life at my age, 45, I be doing with my life at my age, 45, I'm standing here truly enjoying life I I'm standing here truly enjoying life I brought into this world. What else is it brought into this world. What else is it was so important at this stage that I was so important at this stage that I would otherwise be spending my time on? would otherwise be spending my time on? &gt;&gt; All right. Like you mentioned, you like &gt;&gt; All right. Like you mentioned, you like to race cars and you do it at a world to race cars and you do it at a world class competitive level, which is class competitive level, which is incredible. So, uh, how'd you get into incredible. So, uh, how'd you get into it? What attracts you to racing? What do it? What attracts you to racing? What do you love about it? you love about it? &gt;&gt; The funny thing about getting into &gt;&gt; The funny thing about getting into racing is I did not get my driver's racing is I did not get my driver's license until I was 25. license until I was 25. &gt;&gt; I grew up in Copenhagen, Denmark, &gt;&gt; I grew up in Copenhagen, Denmark, where the tax on cars is basically over where the tax on cars is basically over 200%. So you pay for three cars and you 200%. So you pay for three cars and you get one. And I didn't even have the get one. And I didn't even have the money for one car, let alone three. So I money for one car, let alone three. So I could not afford a car growing up. We could not afford a car growing up. We did not have a car growing up. But did not have a car growing up. But Copenhagen is a nice city to be able to Copenhagen is a nice city to be able to get around on a bike or with a bus or as get around on a bike or with a bus or as I did for a long period of time on I did for a long period of time on roller blades. roller blades. roller blades. But But But when I was 25, I realized I wanted to when I was 25, I realized I wanted to spend more time in the US. I wasn't sure spend more time in the US. I wasn't sure yet that I was going to move there. That yet that I was going to move there. That turned out later to be true, but I knew turned out later to be true, but I knew that if I wanted to spend time in the that if I wanted to spend time in the US, I needed to have a driver's license. US, I needed to have a driver's license. I was not going to get around very well I was not going to get around very well if I didn't know how to drive a car. So, if I didn't know how to drive a car. So, I got a driver's license at 25. Then I got a driver's license at 25. Then ended up moving to the US later that ended up moving to the US later that year. And I'd always been into video year. And I'd always been into video games, racing video games. Metropolitan games, racing video games. Metropolitan Street Racer on the Dreamcast was one of Street Racer on the Dreamcast was one of those games that really sucked me into those games that really sucked me into it was the precursor to Project Gotham, it was the precursor to Project Gotham, which was the precursor to essentially which was the precursor to essentially Forsa Horizon, I think. Oh, okay. Forsa Horizon, I think. Oh, okay. &gt;&gt; I think that's what how the lineage &gt;&gt; I think that's what how the lineage goes. It's just a great game. I actually goes. It's just a great game. I actually just fired it up on an emulator um a few just fired it up on an emulator um a few weeks ago and still sort of kind of weeks ago and still sort of kind of holds up because it has enough real car holds up because it has enough real car dynamics that it smells a little bit dynamics that it smells a little bit like driving a real car. It's not just like driving a real car. It's not just like an arcade racer like Sega Rally or like an arcade racer like Sega Rally or something like that. But I'd always been something like that. But I'd always been into that. Then I got my driver's into that. Then I got my driver's license at 25 and moved to the US. And license at 25 and moved to the US. And then two years later, a friend that I'd then two years later, a friend that I'd met in Chicago took me to the Chicago met in Chicago took me to the Chicago Autobon Country Club, which is this Autobon Country Club, which is this great track about 45 minutes from great track about 45 minutes from Chicago. And I sat in a race car and I Chicago. And I sat in a race car and I drove a race car for the first time. And drove a race car for the first time. And I had the same kind of pseudo religious I had the same kind of pseudo religious experience I did as when I started experience I did as when I started working on Ruby working on Ruby &gt;&gt; where I did maybe 20 laps in this &gt;&gt; where I did maybe 20 laps in this basically a Mazda race car from I think basically a Mazda race car from I think like the '9s or something like a pretty like the '9s or something like a pretty cheap race car but a real race car. cheap race car but a real race car. Single seater manual gearbox but exposed Single seater manual gearbox but exposed slick wheels all the stuff. And after slick wheels all the stuff. And after having had that experience, first of having had that experience, first of all, it was just the most amazing thing all, it was just the most amazing thing ever. Like the physical sensation of ever. Like the physical sensation of driving a race car is really unique. And driving a race car is really unique. And I think if if you're in a car fast, you I think if if you're in a car fast, you have a maybe a 2% taste of it. have a maybe a 2% taste of it. the exposure to the elements that you the exposure to the elements that you get in a single seat race car, get in a single seat race car, especially one like that where your head especially one like that where your head is actually out in the elements. You can is actually out in the elements. You can see the individual wheels and you see the individual wheels and you sensation of speed is just so much sensation of speed is just so much higher is at a completely different higher is at a completely different level. level. level. &gt;&gt; So can you actually speak to that? So &gt;&gt; So can you actually speak to that? So even at that even in that Mazda, so you even at that even in that Mazda, so you can feel what can you feel like the can feel what can you feel like the track reverberating? You feel the grip? track reverberating? You feel the grip? you not only can you see the bumps you not only can you see the bumps because you're literally looking because you're literally looking straight at the wheel, you can feel all straight at the wheel, you can feel all the bumps because you're running a slick the bumps because you're running a slick tire. It's a really stiff setup. It's tire. It's a really stiff setup. It's nothing like taking a fast street car nothing like taking a fast street car out on a racetrack and try to driving a out on a racetrack and try to driving a little bit around. little bit around. &gt;&gt; So, can you feel like the slipping? &gt;&gt; So, can you feel like the slipping? &gt;&gt; That's a that's a huge part of the &gt;&gt; That's a that's a huge part of the satisfaction of driving a race car is satisfaction of driving a race car is driving it at the edge of adhesion as we driving it at the edge of adhesion as we call it where the car is actually call it where the car is actually sliding a little bit. Couple of percent sliding a little bit. Couple of percent slip angle is the fastest way to drive a slip angle is the fastest way to drive a race car. You don't want to slide too race car. You don't want to slide too much. That looks great. Lots of smoke, much. That looks great. Lots of smoke, but it's not fast. How you want to drive but it's not fast. How you want to drive it is just at the limit of adhesion it is just at the limit of adhesion where you're rotating the car as much as where you're rotating the car as much as your tires can manage and then slightly your tires can manage and then slightly more than that and playing at it, more than that and playing at it, keeping it just at that level because keeping it just at that level because when you're at the level of or at the when you're at the level of or at the limit of adhesion, you're essentially limit of adhesion, you're essentially just a tiny movement away from spinning just a tiny movement away from spinning out. I mean, it doesn't take much. Then out. I mean, it doesn't take much. Then the car starts rotating. Once it starts the car starts rotating. Once it starts rotating, you lose grip and you're going rotating, you lose grip and you're going for the wall. That balance of danger and for the wall. That balance of danger and skill is what's so intoxicating. And skill is what's so intoxicating. And it's so much better than racing video it's so much better than racing video games, too, because the criticality is games, too, because the criticality is taking up two notches. I often think taking up two notches. I often think about people really like gambling where about people really like gambling where I think like, aren't you just playing I think like, aren't you just playing poker? Like, and like, no, the point is poker? Like, and like, no, the point is not poker. Poker may be part of it, but not poker. Poker may be part of it, but the point is that I could lose my house, the point is that I could lose my house, right? Like that's the addiction that right? Like that's the addiction that some people get to gambling, that some people get to gambling, that there's something real on the line. When there's something real on the line. When you're in a race car, there's something you're in a race car, there's something very real on the line. If you get it very real on the line. If you get it wrong, at the very least, you're going wrong, at the very least, you're going to spin out and probably hit a wall and to spin out and probably hit a wall and it's going to be expensive. At the very it's going to be expensive. At the very worst, you're not getting out alive. And worst, you're not getting out alive. And even if modern race cars have gotten way even if modern race cars have gotten way safer than they used to be, there is safer than they used to be, there is that element of danger that's real. That that element of danger that's real. That there are people who still get seriously there are people who still get seriously hurt or even killed in a race car. It's hurt or even killed in a race car. It's mercifully rare compared to what it used mercifully rare compared to what it used to be when those maniacs in the 60s to be when those maniacs in the 60s would do Formula 1 and whatever 13% of would do Formula 1 and whatever 13% of the grid wouldn't make it to the end of the grid wouldn't make it to the end of the year because they just die in a the year because they just die in a fiery flaming fireball. But there's fiery flaming fireball. But there's still some of it there. And I think that still some of it there. And I think that sense that there's something on the line sense that there's something on the line really contributes to it. But it's more really contributes to it. But it's more than that. There's al just a physical than that. There's al just a physical sensation. There's activation of all sensation. There's activation of all your forces. There's the flow. your forces. There's the flow. And I think that really cements like why And I think that really cements like why I got addicted because I always I love I got addicted because I always I love that flow I got out of programming. But that flow I got out of programming. But getting flow out of programming is a getting flow out of programming is a very inconsistent process. I can't just very inconsistent process. I can't just sit down in front of a keyboard and go sit down in front of a keyboard and go like, "All right, let's get the flow like, "All right, let's get the flow going." It doesn't happen like that. The going." It doesn't happen like that. The problem has to be just right. It has to problem has to be just right. It has to meet my skills in just the right moment. meet my skills in just the right moment. It's a bit of a lottery. In a race car It's a bit of a lottery. In a race car is not a lottery at all. You sit down in is not a lottery at all. You sit down in that car, you turn the ignition, you go that car, you turn the ignition, you go out on track, and I get flow virtually out on track, and I get flow virtually guaranteed guaranteed guaranteed because you need or I need at least 100% because you need or I need at least 100% of my brain processing power to be able of my brain processing power to be able to go at the speed I go without to go at the speed I go without crashing. So there's no time to think crashing. So there's no time to think about dinner tonight or the meeting next about dinner tonight or the meeting next week or product launch. It just it's week or product launch. It just it's completely zen in actually the literal completely zen in actually the literal sense of the word. I think of someone sense of the word. I think of someone who's really good at meditation. That's who's really good at meditation. That's probably kind of state they get into probably kind of state they get into where it's just clear you're in the now. where it's just clear you're in the now. There's nothing but you and the next There's nothing but you and the next corner. That's a really addictive corner. That's a really addictive experience. So after I've had that, I experience. So after I've had that, I couldn't get enough. I just I kept going couldn't get enough. I just I kept going to the track. Every opportunity I got to the track. Every opportunity I got every single weekend for about four every single weekend for about four years, I would go to the track. And by years, I would go to the track. And by the end of that time, I finally worked the end of that time, I finally worked up enough skill and enough success with up enough skill and enough success with the company that I could afford to go the company that I could afford to go quote unquote real racing. quote unquote real racing. So, I started doing that. I started So, I started doing that. I started driving these Porsches. And then as soon driving these Porsches. And then as soon as I got into that, as soon as I got as I got into that, as soon as I got into quote unquote real competition, I into quote unquote real competition, I was like, I wonder how far you can take was like, I wonder how far you can take this. this. this. &gt;&gt; And it didn't take that long before I &gt;&gt; And it didn't take that long before I decided, you know what? I can take this decided, you know what? I can take this all the way. My great hero in racing is all the way. My great hero in racing is Tom Christensen. Fellow Dne, the Mr. Tom Christensen. Fellow Dne, the Mr. Lama, as they call him, the greatest Lama, as they call him, the greatest endurance race in the world, the 24 endurance race in the world, the 24 hours of Lama, has been won more times hours of Lama, has been won more times than any other by Tom Christensen. He than any other by Tom Christensen. He won the race nine times. won the race nine times. So Tom So Tom So Tom just really turned me on to Lama. I've just really turned me on to Lama. I've been watching Lama since I think the been watching Lama since I think the 80s. I have my earliest memories of 80s. I have my earliest memories of watching that on TV. The race has been watching that on TV. The race has been going since I think uh 20s, but in the going since I think uh 20s, but in the 80s I got kind of into it. And then in 80s I got kind of into it. And then in the late 90s, early 2000s when Tom the late 90s, early 2000s when Tom started winning, I like pretty much started winning, I like pretty much every other Dane started watching the every other Dane started watching the race almost religiously. So I thought, race almost religiously. So I thought, you know what? I want to get to Lal. And you know what? I want to get to Lal. And this is the magic thing about racing this is the magic thing about racing that if I get into basketball, like I that if I get into basketball, like I can't set a realistic expectation that can't set a realistic expectation that I'm going to play in the NBA, that I'm I'm going to play in the NBA, that I'm going to go to the finals, or I get into going to go to the finals, or I get into tennis and I'm going to play at tennis and I'm going to play at Wimbledon. That just doesn't happen. But Wimbledon. That just doesn't happen. But racing is special in this way because it racing is special in this way because it requires a fair amount of money to keep requires a fair amount of money to keep these cars running. It's really these cars running. It's really expensive. It's like having a small expensive. It's like having a small startup. You need to fly a bunch of startup. You need to fly a bunch of people around the world and buy people around the world and buy expensive equipment so forth. So you expensive equipment so forth. So you need a bunch of capital and I had some need a bunch of capital and I had some through the success of the company. So I through the success of the company. So I could do it which meant that I could get could do it which meant that I could get to Lal. So I set that as my goal. I want to Lal. So I set that as my goal. I want to get to Lal and I started racing in to get to Lal and I started racing in real competition 2009 and three years real competition 2009 and three years later in 2012 I was at the grid of Lamal later in 2012 I was at the grid of Lamal for the first time for the first time &gt;&gt; we should say so lemon 24-hour race &gt;&gt; we should say so lemon 24-hour race endurance endurance endurance I mean this is insane I mean this is insane &gt;&gt; there are three drivers mind you so it's &gt;&gt; there are three drivers mind you so it's not like one guy just driving for 20 not like one guy just driving for 20 hours 24 hours straight but still it's a hours 24 hours straight but still it's a pretty tough race both physically and pretty tough race both physically and mentally especially mentally when you've mentally especially mentally when you've been up for 24 plus hours, you're not been up for 24 plus hours, you're not quite as sharp as uh when you first wake quite as sharp as uh when you first wake up. And this is funny about Lama, too. up. And this is funny about Lama, too. It starts at around 4:00 in the It starts at around 4:00 in the afternoon. So, you've already been up afternoon. So, you've already been up for half a day by the time the race for half a day by the time the race starts. And then there's 24 hours to go starts. And then there's 24 hours to go before you're done. And you'll be in the before you're done. And you'll be in the car for anywhere from usually an hour car for anywhere from usually an hour and a half to a maximum of four hours. and a half to a maximum of four hours. The regulations say four out of six is The regulations say four out of six is the max you can do. I've spent perhaps the max you can do. I've spent perhaps two and a half hours in a single stint two and a half hours in a single stint at Lama. It's pretty taxing. You're at Lama. It's pretty taxing. You're going 200 miles an hour into some of going 200 miles an hour into some of these turns and there's another 60 cars these turns and there's another 60 cars on track whenever I'm in my normal on track whenever I'm in my normal category, which is the LMP2 category. I category, which is the LMP2 category. I have GT cars, which are more like a have GT cars, which are more like a Ferrari and a Porsche that I have to Ferrari and a Porsche that I have to overtake. And then I have these overtake. And then I have these hypercars, which is the top class that hypercars, which is the top class that are overtaking me. So, you got a lot are overtaking me. So, you got a lot going on. And you got to stay sharp for going on. And you got to stay sharp for two and a half hours straight to do two and a half hours straight to do that. That is just a guaranteed way to that. That is just a guaranteed way to get incredible flow for long long get incredible flow for long long stretches of time. That's why you get stretches of time. That's why you get addicted to it. That was why I got the addicted to it. That was why I got the &gt;&gt; You got to talk me through this video. &gt;&gt; You got to talk me through this video. This video of you in these LM2. This is This video of you in these LM2. This is such a cool. This is so cool. such a cool. This is so cool. &gt;&gt; Yeah. This was probably my favorite &gt;&gt; Yeah. This was probably my favorite battle of my career. battle of my career. &gt;&gt; And Hansen has beat and fights. &gt;&gt; And Hansen has beat and fights. &gt;&gt; Yeah. So this is me driving against Nico &gt;&gt; Yeah. So this is me driving against Nico Miller at the Shanghai International Miller at the Shanghai International Circuit. Circuit. Circuit. &gt;&gt; You're on the outside here. &gt;&gt; You're on the outside here. &gt;&gt; I'm on the outside in the blue and &gt;&gt; I'm on the outside in the blue and white. white. white. &gt;&gt; And we go a whole track around with &gt;&gt; And we go a whole track around with basically a piece of paper between us. basically a piece of paper between us. See down this back straight. I get so See down this back straight. I get so close to him because I want to force him close to him because I want to force him over on the other side of the track over on the other side of the track &gt;&gt; such that he can't just box me in. And &gt;&gt; such that he can't just box me in. And we've been fighting already at this we've been fighting already at this point for basically 40 minutes straight. point for basically 40 minutes straight. I've been maning managing to keep this I've been maning managing to keep this professional driver behind me for 40 professional driver behind me for 40 minutes. and he finally passes me. But minutes. and he finally passes me. But we just keep the battle on for the whole we just keep the battle on for the whole time. And it really just shows both time. And it really just shows both these kinds of cars, the Lama these kinds of cars, the Lama prototypes. We don't actually ever prototypes. We don't actually ever touch. touch. touch. &gt;&gt; We get within about an inch. &gt;&gt; We get within about an inch. &gt;&gt; And um and keep going around Shanghai &gt;&gt; And um and keep going around Shanghai circuit to circuit to circuit to &gt;&gt; How did you get so good? &gt;&gt; How did you get so good? &gt;&gt; Like what I mean that's a fascinating &gt;&gt; Like what I mean that's a fascinating story, right? That you were able to get story, right? That you were able to get so good. so good. so good. &gt;&gt; I'm pretty good for the kind of driver I &gt;&gt; I'm pretty good for the kind of driver I am, which is called a gentleman driver, am, which is called a gentleman driver, which means I'm not a professional which means I'm not a professional driver. And like many good gentleman driver. And like many good gentleman drivers, when we're at our really best, drivers, when we're at our really best, we can be quite competitive with even we can be quite competitive with even professional drivers who have been doing professional drivers who have been doing this their whole life. The difference this their whole life. The difference between us and the professionals is the between us and the professionals is the professionals can do it every time or professionals can do it every time or more or less every time. So, I can't be more or less every time. So, I can't be this good all the time. When everything this good all the time. When everything is just right, I can be competitive with is just right, I can be competitive with professional drivers. But that's not how professional drivers. But that's not how you win championships. That's not how you win championships. That's not how you get paid by factories to drive. You you get paid by factories to drive. You got to be good every time you go out. got to be good every time you go out. So, that's a huge difference. But some So, that's a huge difference. But some of it was also just I really put my mind of it was also just I really put my mind to it. By the time I realized race cars to it. By the time I realized race cars is what I want to do as my serious is what I want to do as my serious hobby. I put in thousands of hours. Have hobby. I put in thousands of hours. Have you crashed? What's the worst crash? you crashed? What's the worst crash? &gt;&gt; I've had a lot of crashes. But &gt;&gt; I've had a lot of crashes. But thankfully, knock on wood. I haven't had thankfully, knock on wood. I haven't had any crashes where I've gotten really any crashes where I've gotten really seriously hurt. seriously hurt. seriously hurt. &gt;&gt; Have you like wrecked the car? &gt;&gt; Have you like wrecked the car? &gt;&gt; Oh yes. Oh yes. I've wrecked many a car. &gt;&gt; Oh yes. Oh yes. I've wrecked many a car. So what does that feel like? Just you So what does that feel like? Just you wreck a car. like how do you get it wreck a car. like how do you get it feels like total shit if you're in a feels like total shit if you're in a real race and other people depend on real race and other people depend on you. It's not even so much the car, you. It's not even so much the car, although it's also sometimes that these although it's also sometimes that these cars are expensive to repair and that cars are expensive to repair and that sucks and it feels so wasteful in a way sucks and it feels so wasteful in a way when you crash some of these cars, but when you crash some of these cars, but the sense that you're letting a team the sense that you're letting a team down. Endurance racing is a team sport. down. Endurance racing is a team sport. Not only do you have your mechanics, you Not only do you have your mechanics, you usually have co-drivers. So when I usually have co-drivers. So when I crash, I just feel like, damn it, I crash, I just feel like, damn it, I could have avoided this. could have avoided this. &gt;&gt; Yeah. But also, you could have died. &gt;&gt; Yeah. But also, you could have died. &gt;&gt; Do you know what's funny? I never think &gt;&gt; Do you know what's funny? I never think about that. I don't think you can about that. I don't think you can because I think the moment you start because I think the moment you start thinking about being able to die, you thinking about being able to die, you can't do it. You can't go fast. can't do it. You can't go fast. &gt;&gt; Well, I'm sure not not to go all Carl &gt;&gt; Well, I'm sure not not to go all Carl Carl Young and Freud here, but I'm sure Carl Young and Freud here, but I'm sure that's always present in the back of that's always present in the back of your mind somewhere. You're not just your mind somewhere. You're not just bringing it to the surface. bringing it to the surface. &gt;&gt; It is in the sense that it's part of the &gt;&gt; It is in the sense that it's part of the appeal. is part of the sense that appeal. is part of the sense that there's something on the line that this there's something on the line that this isn't just virtual. I can't just hit isn't just virtual. I can't just hit reset, restart, reboot. reset, restart, reboot. &gt;&gt; If I crash this car, &gt;&gt; If I crash this car, &gt;&gt; we're going to be out or we're going to &gt;&gt; we're going to be out or we're going to be disadvantaged or it's going to get be disadvantaged or it's going to get destroyed or I might get hurt. I've destroyed or I might get hurt. I've gotten lightly hurt a few times. I gotten lightly hurt a few times. I actually had the year we won the 24 actually had the year we won the 24 hours of Lama in our class, I'd been hours of Lama in our class, I'd been training in this Formula 3.5 training in this Formula 3.5 car. It's a really fast car. It's a car. It's a really fast car. It's a really nice exercise to do, but it's really nice exercise to do, but it's also it doesn't have power steering. So, also it doesn't have power steering. So, some of these race cars, especially the some of these race cars, especially the open seaters, they don't have power open seaters, they don't have power steering, which means that the steering steering, which means that the steering wheel is basically directly connected to wheel is basically directly connected to the front wheels. So, if you crash one the front wheels. So, if you crash one of those cars and the front wheels of those cars and the front wheels suddenly turn, you're really going to suddenly turn, you're really going to hurt your hands if you don't get your hurt your hands if you don't get your hands off the wheel. I hadn't raced hands off the wheel. I hadn't raced enough of those cars to know that I had enough of those cars to know that I had to get or to have the instinct to have to get or to have the instinct to have developed the instinct that I had to get developed the instinct that I had to get my hands off the wheel. So I didn't and my hands off the wheel. So I didn't and I really hurt my hand and this was just I really hurt my hand and this was just I think a month before the 24 hours of I think a month before the 24 hours of LA. So I thought oh man I'm gonna have LA. So I thought oh man I'm gonna have to miss it this year. I had like a not a to miss it this year. I had like a not a cast it was just seriously sprained and cast it was just seriously sprained and then somehow miraculously like a week then somehow miraculously like a week before the event I was like ah yeah before the event I was like ah yeah actually it's okay now. So got to do it actually it's okay now. So got to do it and that would have been grave regret if and that would have been grave regret if I would have seen my team go to on to I would have seen my team go to on to win the race and I would had to sit on win the race and I would had to sit on the sidelines. But I really have been the sidelines. But I really have been quite fortunate in the sense that most quite fortunate in the sense that most of my crashes have just been expensive of my crashes have just been expensive or sporting inconvenient. They've never or sporting inconvenient. They've never been something where I got seriously been something where I got seriously hurt. But I've seen plenty of people who hurt. But I've seen plenty of people who have. In fact, my co-driver this year have. In fact, my co-driver this year and for several years, Petro Fidipali, and for several years, Petro Fidipali, drove a race car at Spa. Spa is one of drove a race car at Spa. Spa is one of the great race tracks of all time. and the great race tracks of all time. and it has this iconic corner called Arouge, it has this iconic corner called Arouge, which is probably the most famous corner which is probably the most famous corner in all of motorsports that has a great in all of motorsports that has a great compression before you climb uphill. compression before you climb uphill. It's a extremely fast, very difficult It's a extremely fast, very difficult corner. And just as he does the corner. And just as he does the compression, his car basically sets out compression, his car basically sets out and he loses his power steering and he and he loses his power steering and he drives straight into the wall and breaks drives straight into the wall and breaks both his legs and basically face the both his legs and basically face the prospect that maybe his career was over. prospect that maybe his career was over. I've had other teammates and people I I've had other teammates and people I know have serious injuries that's really know have serious injuries that's really hurt them. And yet, what's funny is you hurt them. And yet, what's funny is you say, you'd think that would sink in. The say, you'd think that would sink in. The year before we won in 2014, that same year before we won in 2014, that same car had a Danish driver in it at Lama at car had a Danish driver in it at Lama at the race I was driving who died. He the race I was driving who died. He lost control of the car when there was a lost control of the car when there was a bit of rain on the track and the track bit of rain on the track and the track went unfortunately designed in such a went unfortunately designed in such a poor way that there was a very big tree poor way that there was a very big tree right behind the railing and he hit that right behind the railing and he hit that tree at full speed, pulled 90 gs and was tree at full speed, pulled 90 gs and was dead on the spot which was just such an dead on the spot which was just such an extremely awful experience to go extremely awful experience to go through. I finished second that year, through. I finished second that year, which should have been cause for a bunch which should have been cause for a bunch of celebration, but it was just tainted of celebration, but it was just tainted by the fact that by the fact that not only did a driver die, a fellow Dane not only did a driver die, a fellow Dane died, a guy I knew died. died, a guy I knew died. &gt;&gt; That was that was pretty tough. So that &gt;&gt; That was that was pretty tough. So that uh throw that into the pile of the the uh throw that into the pile of the the the things that have to be considered is the things that have to be considered is the weather conditions that you the weather conditions that you mentioned of the track, the mentioned of the track, the whether it's dry or wet. It's a huge whether it's dry or wet. It's a huge part of it. Even just last year at Lama, part of it. Even just last year at Lama, it was raining and I was out and I it was raining and I was out and I hadn't made a serious mistake at the 24 hadn't made a serious mistake at the 24 hours of Lama since I did the first race hours of Lama since I did the first race in 2012 where I put it in the sand trap in 2012 where I put it in the sand trap with like 4 hours to go and we lost a with like 4 hours to go and we lost a couple of laps getting pulled out, but couple of laps getting pulled out, but it didn't actually change anything for it didn't actually change anything for our result because that was just how the our result because that was just how the field was spread out. I'd made minor field was spread out. I'd made minor mistakes over the years, but nothing mistakes over the years, but nothing that really set us out. And at the race that really set us out. And at the race last year when it was raining, I first last year when it was raining, I first clobbered a Ford Mustang when I made an clobbered a Ford Mustang when I made an over ambitious pass on a damp part of over ambitious pass on a damp part of the track and couldn't stop in time. And the track and couldn't stop in time. And then felt absolutely awful as I sat in then felt absolutely awful as I sat in the gravel pit for two laps and knew the gravel pit for two laps and knew that our race was over. A race where we that our race was over. A race where we were highly competitive. You're not were highly competitive. You're not blessed with a competitive car, a blessed with a competitive car, a competitive team and competitive setup competitive team and competitive setup every year. I know how rare that is. So every year. I know how rare that is. So to know that we had had a chance that to know that we had had a chance that year and I sort of squandered it. Felt year and I sort of squandered it. Felt really bad, but that got compounded. I really bad, but that got compounded. I got back on track, barely made it got back on track, barely made it another stint and then put it in the another stint and then put it in the gravel trap again when it started gravel trap again when it started raining on the entrance into Porsche. So raining on the entrance into Porsche. So this is part of why racing is so this is part of why racing is so addicting, too, because the highs are addicting, too, because the highs are very, very high. When you win a race very, very high. When you win a race like the 24 hours mod, it feels just like the 24 hours mod, it feels just incredible. There's so much emotion, but incredible. There's so much emotion, but if you fuck it up, the lows are very, if you fuck it up, the lows are very, very low. What are the things you're very low. What are the things you're paying attention to when you're driving? paying attention to when you're driving? What's what what is the what are the What's what what is the what are the parameters? What are you loading in? Are parameters? What are you loading in? Are you feeling the grip? Are you basically you feeling the grip? Are you basically increasing the speed and seeing what increasing the speed and seeing what like a constant feedback system effect like a constant feedback system effect it has on the grip? You're trying to it has on the grip? You're trying to manage that. Trying to find that optimal manage that. Trying to find that optimal slip angle. Are you looking around using slip angle. Are you looking around using your eyes? your eyes? your eyes? Are you smelling things? Are you Are you smelling things? Are you listening? He's feeling the wind. Are listening? He's feeling the wind. Are you Are you Oh, you looking at the you Are you Oh, you looking at the field, too? Like, how how did you not field, too? Like, how how did you not hit that guy at all? You get close hit that guy at all? You get close within inches, right? So, you have to within inches, right? So, you have to pay attention to that, too. pay attention to that, too. &gt;&gt; It's really interesting about that &gt;&gt; It's really interesting about that specific battle where we're literally a specific battle where we're literally a few inches apart. I can't fully explain few inches apart. I can't fully explain it, but humans can develop an incredible it, but humans can develop an incredible sense of space where I can't see the sense of space where I can't see the edge of the back of my car, but I can edge of the back of my car, but I can know exactly where it is. I can have a know exactly where it is. I can have a mental model in my head that gives me mental model in my head that gives me the exact dimensions of this car such the exact dimensions of this car such that I can run within a few inches of a that I can run within a few inches of a competitor car or within a few inches of competitor car or within a few inches of the wall and not hit either when things the wall and not hit either when things go well. The car is about 2 m wide and go well. The car is about 2 m wide and it's quite long, 5 m, and you can't see it's quite long, 5 m, and you can't see everything. The mirrors are actually everything. The mirrors are actually kind of shit. There's no rear view kind of shit. There's no rear view mirror in these cars. You can't see out mirror in these cars. You can't see out the back. You can only see through your the back. You can only see through your two side mirrors. But you form this two side mirrors. But you form this intuitive mental model when you get good intuitive mental model when you get good enough at this. But what I actually pay enough at this. But what I actually pay attention to most is I run a program. attention to most is I run a program. What I try to do when I go to a What I try to do when I go to a racetrack is I try to load up the best racetrack is I try to load up the best program I know how for every single program I know how for every single corner. What's my break point? What's my corner. What's my break point? What's my acceleration point? What's my brake acceleration point? What's my brake trailing curve? And I try to pick up trailing curve? And I try to pick up that program in part just by finding it that program in part just by finding it myself and how fast I can go. But even myself and how fast I can go. But even more so than that, by copying my more so than that, by copying my professional competitors or not professional competitors or not competitors, co-drivers. So I usually competitors, co-drivers. So I usually always race with a pro and modern race always race with a pro and modern race cars produce an absolute enormous amount cars produce an absolute enormous amount of data and you can analyze all that of data and you can analyze all that data after each outing. You can see an data after each outing. You can see an exact trace of how much you pushed the exact trace of how much you pushed the brake pedal, how much you did in terms brake pedal, how much you did in terms of steering inputs, how when you got on of steering inputs, how when you got on the gas, you can see every millisecond the gas, you can see every millisecond you're losing is evident in those you're losing is evident in those charts. So what I try to do is I try to charts. So what I try to do is I try to look at the chart and then I try to load look at the chart and then I try to load that in and like that's what I got to that in and like that's what I got to do. Oh, in this corner 17 I actually I do. Oh, in this corner 17 I actually I have to be 10 bar lighter on the brake. have to be 10 bar lighter on the brake. So I try to load that program in and So I try to load that program in and then I try to repeat it. Now then there then I try to repeat it. Now then there are all the things that changes. Your are all the things that changes. Your tires change quite a lot. These tires tires change quite a lot. These tires are made to only last 40 minutes in many are made to only last 40 minutes in many cases. Sometimes at least cases. Sometimes at least tracks they'll last as little as 40 tracks they'll last as little as 40 minutes before they really fall off. So minutes before they really fall off. So you got to manage that that the grip is you got to manage that that the grip is constantly changing. So your program constantly changing. So your program have to suddenly fit those changing have to suddenly fit those changing circumstances. And then in endurance circumstances. And then in endurance racing you're constantly interacting racing you're constantly interacting with other cars because you're passing with other cars because you're passing slower classes or you're getting passed slower classes or you're getting passed by a faster class. So that's part of the by a faster class. So that's part of the equation. And then you're trying to equation. And then you're trying to dance the car around the limit of dance the car around the limit of adhesion. So you got all those factors adhesion. So you got all those factors playing at the same time. But above all playing at the same time. But above all else for me is to try to become a robot. else for me is to try to become a robot. Like how can I repeat this set of steps Like how can I repeat this set of steps exactly as I'm supposed to for 2 and 1 exactly as I'm supposed to for 2 and 1 half hours straight without making 100 half hours straight without making 100 milliseconds worth of mistakes. milliseconds worth of mistakes. &gt;&gt; Yeah. Low latency algorithm. &gt;&gt; Yeah. Low latency algorithm. &gt;&gt; That's really a huge part of it &gt;&gt; That's really a huge part of it actually. Your latency is enormously actually. Your latency is enormously important in terms of being able to important in terms of being able to catch when the car starts slipping. You catch when the car starts slipping. You get this sensation in your body that the get this sensation in your body that the G-forces are a little off, the slip G-forces are a little off, the slip angle is a little off and then you have angle is a little off and then you have to counter steer. And obviously the best to counter steer. And obviously the best race car drivers just feel like an race car drivers just feel like an intuition. I have some intuition. I intuition. I have some intuition. I don't have all of it. So I do don't have all of it. So I do occasionally spin my uh car, but that's occasionally spin my uh car, but that's the challenge. From everything you've the challenge. From everything you've studied and understand, what what does studied and understand, what what does it take to achieve mastery in racing? it take to achieve mastery in racing? Like what does it take to become the Like what does it take to become the best race car driver in the world? best race car driver in the world? Obsession is part of it. When I read and Obsession is part of it. When I read and hear about Senna and the other greats, hear about Senna and the other greats, they were just singularly focused. Max they were just singularly focused. Max Vstappen is the current champion of the Vstappen is the current champion of the world, and he is the same kind. Max has world, and he is the same kind. Max has been fascinating to watch. I mean, he's been fascinating to watch. I mean, he's a phenomenal race car driver, but he a phenomenal race car driver, but he also literally does nothing else. When also literally does nothing else. When he's not at the racetrack, he's driving he's not at the racetrack, he's driving sim racing. like he's literally in video sim racing. like he's literally in video games doing more racing when he's not games doing more racing when he's not doing all the racing he's already doing. doing all the racing he's already doing. &gt;&gt; Is there a specific skill they have that &gt;&gt; Is there a specific skill they have that like stands out to you as supernatural like stands out to you as supernatural through all that obsession? Like what uh through all that obsession? Like what uh is it a bunch of factors or are they is it a bunch of factors or are they actually able to you like you said actually able to you like you said develop a sense? Is it is it that develop a sense? Is it is it that they're able to get to the very edge of they're able to get to the very edge of the slip? the slip? the slip? &gt;&gt; They're able to develop very finetuned &gt;&gt; They're able to develop very finetuned sensibilities for when the car is sensibilities for when the car is sliding. They can feel just these tiny sliding. They can feel just these tiny moments or movements in the chassis that moments or movements in the chassis that transports up usually through their ass. transports up usually through their ass. That's why you call it like a a butt That's why you call it like a a butt meter that goes up and you feel like the meter that goes up and you feel like the car is loose or you feel like you're car is loose or you feel like you're just about to lock up, you can really just about to lock up, you can really hone that tuning. Then the other thing hone that tuning. Then the other thing is you have to have really good reaction is you have to have really good reaction time. And when you look at great Formula time. And when you look at great Formula 1 drivers, they can generally have a 1 drivers, they can generally have a reaction time of just under 200 reaction time of just under 200 milliseconds, which is awesome. And even milliseconds, which is awesome. And even 10 milliseconds difference makes a huge 10 milliseconds difference makes a huge difference. You'll see it when the difference. You'll see it when the Formula 1 grid, for example, they do a Formula 1 grid, for example, they do a standing start and you see the five red standing start and you see the five red lights come on. And when the last light lights come on. And when the last light goes out, they're supposed to release goes out, they're supposed to release the clutch and get going. And they can the clutch and get going. And they can time this so you can see exactly who has time this so you can see exactly who has the reaction time. And even being off by the reaction time. And even being off by 20 milliseconds can make the difference 20 milliseconds can make the difference of whether you're in front or behind at of whether you're in front or behind at the first corner. the first corner. &gt;&gt; How much of winning is also just this &gt;&gt; How much of winning is also just this the strategy of jostling for position? the strategy of jostling for position? &gt;&gt; There's some of that and some of it is &gt;&gt; There's some of that and some of it is also just nerve. Who wants it more? also just nerve. Who wants it more? That's exactly when that sense of danger That's exactly when that sense of danger comes in. There's a great quote from uh comes in. There's a great quote from uh Fernando Alonso when he was driving at Fernando Alonso when he was driving at Suzuka against Schumarker. I think Suzuka against Schumarker. I think they're coming up to this incredibly they're coming up to this incredibly fast corner. It's very dangerous. And fast corner. It's very dangerous. And Alonzo basically accounts. I was going Alonzo basically accounts. I was going to make the pass because I knew he had a to make the pass because I knew he had a wife and kids at home. wife and kids at home. &gt;&gt; That's so gangster. &gt;&gt; That's so gangster. &gt;&gt; Just absolutely rude. Right. &gt;&gt; Just absolutely rude. Right. &gt;&gt; Wow. &gt;&gt; Wow. &gt;&gt; Wow. &gt;&gt; That I knew he valued life more than I &gt;&gt; That I knew he valued life more than I did. So there's a bit of poker sometimes did. So there's a bit of poker sometimes in that. Who's going to yield? There's a in that. Who's going to yield? There's a bit of chicken race in that regard. And bit of chicken race in that regard. And sometimes it doesn't work. No one yields sometimes it doesn't work. No one yields and you both crash. But very often one and you both crash. But very often one person will blink first. person will blink first. &gt;&gt; Can the pass be both on the inside and &gt;&gt; Can the pass be both on the inside and the outside or is the outside or is &gt;&gt; you can pass wherever you want as long &gt;&gt; you can pass wherever you want as long as you have just a slight part of the as you have just a slight part of the car on the racetrack car on the racetrack &gt;&gt; and then you just improvise and take &gt;&gt; and then you just improvise and take risks. What a what a sport. What and risks. What a what a sport. What and then Santa of course is like a legendary then Santa of course is like a legendary risk taker. risk taker. risk taker. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. And even before him, by the time I mean, And even before him, by the time I mean, he died in the 90s, but by the time we he died in the 90s, but by the time we got to the 90s, racing was already a lot got to the 90s, racing was already a lot safer than it was when Nikauder raced in safer than it was when Nikauder raced in the 60s. the 60s. the 60s. That level of danger is no longer there. That level of danger is no longer there. There's still just a remnant of it. And There's still just a remnant of it. And it is still dangerous, but nothing like it is still dangerous, but nothing like that. And it's a little hard to compare that. And it's a little hard to compare through the ages like who's the greatest through the ages like who's the greatest driver of all time. I think there's a driver of all time. I think there's a fair argument that Senna is, but we fair argument that Senna is, but we don't have the data. We don't know who don't have the data. We don't know who he was up against. Like, how would he he was up against. Like, how would he fair if we pitted him against Max fair if we pitted him against Max Vstappen today? I do think sometimes Vstappen today? I do think sometimes that you can have a bit of a nostalgia that you can have a bit of a nostalgia for the all-time greats, but the world for the all-time greats, but the world moves forward and new records are being moves forward and new records are being set all the time. And the set all the time. And the professionalism keeps improving professionalism keeps improving sometimes to the detriment of the sport. sometimes to the detriment of the sport. I think there's a lot of professional I think there's a lot of professional drivers who are not only just very good drivers who are not only just very good at driving, but are very good at being at driving, but are very good at being corporate spokespeople. And it used to corporate spokespeople. And it used to be quite different. There used to be be quite different. There used to be more characters in racing that had a bit more characters in racing that had a bit more personality that they were allowed more personality that they were allowed to shine because there weren't a billion to shine because there weren't a billion sponsorships on the line that they were sponsorships on the line that they were afraid to lose. afraid to lose. &gt;&gt; Ridiculous question. What's the greatest &gt;&gt; Ridiculous question. What's the greatest car ever made? Or maybe uh what's the car ever made? Or maybe uh what's the funnest one to drive? funnest one to drive? &gt;&gt; The greatest car for me of all time is &gt;&gt; The greatest car for me of all time is the Pagani S. the Pagani S. &gt;&gt; Okay, I'm looking this up. Pagani sand. &gt;&gt; Okay, I'm looking this up. Pagani sand. &gt;&gt; So, the Pagani S was made by this &gt;&gt; So, the Pagani S was made by this wonderful Argentinian called Horashio wonderful Argentinian called Horashio Pagani. My god, that's a beautiful car. Pagani. My god, that's a beautiful car. Wow. Wow. Wow. &gt;&gt; It's a gorgeous car. You can look up &gt;&gt; It's a gorgeous car. You can look up mine. It's the Pagani Zonda HH. Yep. So, mine. It's the Pagani Zonda HH. Yep. So, that's um a car I had made in 2010 after that's um a car I had made in 2010 after we visited the factory in Modernum and we visited the factory in Modernum and by sheer accident ended up with this by sheer accident ended up with this car. But it became my favorite car in car. But it became my favorite car in the world basically when I watched an the world basically when I watched an episode of Top Gear I think in 2005 episode of Top Gear I think in 2005 where one of the presenters was driving where one of the presenters was driving the Pagani F around and I just thought the Pagani F around and I just thought that's the most beautiful car in the that's the most beautiful car in the world. It is the most incredibly world. It is the most incredibly sounding car in the world. sounding car in the world. If I one day have the option, this is If I one day have the option, this is what I want. And then I had the option what I want. And then I had the option in 2010. I've had the car ever since. in 2010. I've had the car ever since. I'm never ever going to sell it. It's I'm never ever going to sell it. It's truly a masterpiece that stood the test truly a masterpiece that stood the test of time. There's some great cars from of time. There's some great cars from history that are recognized as being history that are recognized as being great in their time. This car is still great in their time. This car is still great. great. great. &gt;&gt; Have you taken on the racetrack? &gt;&gt; Have you taken on the racetrack? &gt;&gt; I have. It's terrible at that, but I I &gt;&gt; I have. It's terrible at that, but I I don't want to say it's terrible at that. don't want to say it's terrible at that. That's not what it's designed for. It's That's not what it's designed for. It's designed for the road, and that's why designed for the road, and that's why it's great. There are a lot of fast cars it's great. There are a lot of fast cars that are straddling their race car for that are straddling their race car for the road. You don't actually want a race the road. You don't actually want a race car for the world. A race car for the car for the world. A race car for the world is a pain in the ass. It's way too world is a pain in the ass. It's way too stiff. It's way too loud. It's way too stiff. It's way too loud. It's way too uncomfortable. You can't actually take uncomfortable. You can't actually take it on a road trip. it on a road trip. &gt;&gt; So, this actually feels good driving. &gt;&gt; So, this actually feels good driving. &gt;&gt; Totally. &gt;&gt; Totally. &gt;&gt; Totally. &gt;&gt; And you of course always go to speed &gt;&gt; And you of course always go to speed limit. limit. limit. &gt;&gt; Always. This is why I love having this &gt;&gt; Always. This is why I love having this car in Spain cuz they're uh a little car in Spain cuz they're uh a little more relaxed. Not entirely relaxed, but more relaxed. Not entirely relaxed, but more relaxed than they are in a lot of more relaxed than they are in a lot of places. In Denmark, I kid you not, if places. In Denmark, I kid you not, if you are on the highway and you go more you are on the highway and you go more than twice the speed limit, they than twice the speed limit, they confiscate your car and keep it. confiscate your car and keep it. &gt;&gt; You're not getting it back. They don't &gt;&gt; You're not getting it back. They don't even care if it's your car or not. Like, even care if it's your car or not. Like, if if you were boring my car and you if if you were boring my car and you went twice the speed limit, it's gone. went twice the speed limit, it's gone. So, they don't do that in Spain. I mean, So, they don't do that in Spain. I mean, they in most places, except for the they in most places, except for the German Autobon, they get pissy. If you German Autobon, they get pissy. If you go twice the speed limit for all sorts go twice the speed limit for all sorts of fair reasons. I'm not advocating that of fair reasons. I'm not advocating that you should be going much more than that. you should be going much more than that. But there are certain special roads But there are certain special roads where you can't open things up and no where you can't open things up and no one's in harm's way. And that's an one's in harm's way. And that's an incredible sensation. And I do think incredible sensation. And I do think that some of those speed limits actually that some of those speed limits actually are kind of silly. And I'm not just are kind of silly. And I'm not just saying that in the in a vacuum. In saying that in the in a vacuum. In Germany, they have the glorious Autobon. Germany, they have the glorious Autobon. And on the Autobon, there is no speed And on the Autobon, there is no speed limit in a bunch of segments. And limit in a bunch of segments. And they're so committed to their speed they're so committed to their speed limitless Autobon, which is, by the way, limitless Autobon, which is, by the way, very weird of Germans. They usually love very weird of Germans. They usually love rules. They usually very precise about. rules. They usually very precise about. And then they have this glorious thing And then they have this glorious thing called the Ottabban. There was a great called the Ottabban. There was a great case a couple of years ago where a guy case a couple of years ago where a guy took out a a Bugatti Chiron, went 400 km took out a a Bugatti Chiron, went 400 km an hour on the Autobon and he filmed it an hour on the Autobon and he filmed it and put it on YouTube and a case was and put it on YouTube and a case was brought against him because even though brought against him because even though they don't have a speed limit, they do they don't have a speed limit, they do have rules that you can't drive have rules that you can't drive recklessly. And he won the case. He recklessly. And he won the case. He wasn't driving recklessly. He was just wasn't driving recklessly. He was just going very, very fast. I've done the going very, very fast. I've done the Autobon a couple of times. Uh my wife Autobon a couple of times. Uh my wife and I went on a road trip in Europe in and I went on a road trip in Europe in 2009 2009 2009 and I got the Lamborghini Giata we were and I got the Lamborghini Giata we were driving up to 200 miles an hour and it driving up to 200 miles an hour and it I'd driven 200 miles an hour or close to I'd driven 200 miles an hour or close to it on a racetrack before. That feels it on a racetrack before. That feels like one thing driving on a public road like one thing driving on a public road 200 mph feels really really fast. 200 mph feels really really fast. &gt;&gt; Scary. &gt;&gt; Scary. &gt;&gt; Scary. &gt;&gt; Actually a little scary. Yes. Because &gt;&gt; Actually a little scary. Yes. Because you constantly think like on a racetrack you constantly think like on a racetrack you know the road you know the surface. you know the road you know the surface. You can walk the track most of the time. You can walk the track most of the time. You can know if there's a dip on a You can know if there's a dip on a public road. You can't know if there's public road. You can't know if there's suddenly a pothole. Presumably, there's suddenly a pothole. Presumably, there's not going to be a pothole on the German not going to be a pothole on the German autobon, but it does feel a little autobon, but it does feel a little scary, but also exhilarating. Speed is scary, but also exhilarating. Speed is just intrinsically really fun. I don't just intrinsically really fun. I don't know anyone I've taken out in a fast know anyone I've taken out in a fast car. Well, actually, I do know a few car. Well, actually, I do know a few people. Most people that take out in a people. Most people that take out in a fast car, they grin. Just it's a human fast car, they grin. Just it's a human reaction to grin when you go really reaction to grin when you go really fast. fast. fast. &gt;&gt; Do you know what the fastest you've ever &gt;&gt; Do you know what the fastest you've ever gone? gone? gone? &gt;&gt; I was probably at Lamar. I think when &gt;&gt; I was probably at Lamar. I think when the LMP2s were at their maximum power the LMP2s were at their maximum power and had 600 horsepower and really sticky and had 600 horsepower and really sticky tires, we were going 340 km an hour, tires, we were going 340 km an hour, which is just over 200 mph. A bit over which is just over 200 mph. A bit over 200 mph. That's that does feel fast. And 200 mph. That's that does feel fast. And it's really interesting with speed is it's really interesting with speed is that the difference between going let's that the difference between going let's say 150 and 160 say 150 and 160 doesn't feel that much. actually those doesn't feel that much. actually those 10 uh mph, but the difference between 10 uh mph, but the difference between going 190 and 200 feels crazy faster, going 190 and 200 feels crazy faster, which as a percentage change is actually which as a percentage change is actually less than going from 150 to 160, but less than going from 150 to 160, but there's some sense of exponentiality there's some sense of exponentiality once you get up to those limits. Um once you get up to those limits. Um where it's just on a complete different where it's just on a complete different level. level. level. &gt;&gt; Yeah, cuz to me like 110 &gt;&gt; Yeah, cuz to me like 110 120 feels fast. 200 120 feels fast. 200 &gt;&gt; that's &gt;&gt; that's crazy. It really is crazy. &gt;&gt; that's crazy. It really is crazy. &gt;&gt; I got to ask you about the &gt;&gt; I got to ask you about the the the details of your programming the the details of your programming setup, the IDE, all that kind of stuff. setup, the IDE, all that kind of stuff. Let's paint the picture of the perfect Let's paint the picture of the perfect uh programming setup. Do you have a a uh programming setup. Do you have a a programming setup that you enjoy? Are programming setup that you enjoy? Are you very flexible? Like how many you very flexible? Like how many monitors, monitors, monitors, what kind of keyboard, what kind of what kind of keyboard, what kind of chair, what kind of desk? It's funny chair, what kind of desk? It's funny because if you'd asked me, let's see, a because if you'd asked me, let's see, a year and a half ago, I would have given year and a half ago, I would have given you the same answer as I would given you the same answer as I would given anyone for basically 20 years. anyone for basically 20 years. &gt;&gt; I want a Mac. I like the Magic Keyboard. &gt;&gt; I want a Mac. I like the Magic Keyboard. &gt;&gt; I like the single monitor. Apple makes &gt;&gt; I like the single monitor. Apple makes an awesome 6K 32-in XDR screen that I've an awesome 6K 32-in XDR screen that I've still haven't found anyone who beaten still haven't found anyone who beaten that I still use. Even though I switched that I still use. Even though I switched away from Apple computers, I still use away from Apple computers, I still use their monitor because it's just their monitor because it's just fantastic. But I've always been a single fantastic. But I've always been a single screen kind of guy. I do like a big screen kind of guy. I do like a big screen, but I don't want multiple screen, but I don't want multiple screens. I've never found that that screens. I've never found that that really works with my p perception. I really works with my p perception. I want to be able to just focus on a want to be able to just focus on a single thing. I don't want all of it all single thing. I don't want all of it all over the place. And I've always used over the place. And I've always used multiple virtual desktops and being able multiple virtual desktops and being able to switch back and forth between those to switch back and forth between those things. But the setup I have today is things. But the setup I have today is Linux. that I switched to a little over Linux. that I switched to a little over a year ago after I finally got fed up a year ago after I finally got fed up with Apple enough that I couldn't do with Apple enough that I couldn't do that anymore. And then I use this that anymore. And then I use this lowprofile mechanical keyboard called lowprofile mechanical keyboard called the low free flow 84 the low free flow 84 which is just the most glorious sounding which is just the most glorious sounding keyboard I've ever heard. I know there keyboard I've ever heard. I know there are a lot of connoisseurs of mechanical are a lot of connoisseurs of mechanical keyboards that'll probably contest me on keyboards that'll probably contest me on this. this is too thcky or too clicky or this. this is too thcky or too clicky or too clacky or whatever. But for me, the too clacky or whatever. But for me, the Lowree Flow 84 is just a delight that I Lowree Flow 84 is just a delight that I did not even know existed, which is so did not even know existed, which is so funny because I mean, I've been funny because I mean, I've been programming for a long time. Mechanical programming for a long time. Mechanical keyboards have been a thing for a long keyboards have been a thing for a long time. And the keyboard when you look at time. And the keyboard when you look at it like this, it just kind of it looks it like this, it just kind of it looks plain. It doesn't look extravagant, but plain. It doesn't look extravagant, but the tactile sensation you get out of the tactile sensation you get out of pushing those keys, the the talky sound pushing those keys, the the talky sound that you hear when the keys hit the that you hear when the keys hit the board, it's just sublime. And I'm board, it's just sublime. And I'm kicking myself that I was in this Mac kicking myself that I was in this Mac bubble for so long that I wasn't even in bubble for so long that I wasn't even in the market to find this. I didn't I knew the market to find this. I didn't I knew mechanical keyboards existed, but I to mechanical keyboards existed, but I to be blunt, I thought it was a bit of a be blunt, I thought it was a bit of a nerd thing that only real nerds that nerd thing that only real nerds that were much more nerdy than me would ever were much more nerdy than me would ever care about. care about. care about. And then I got out of the Apple bubble And then I got out of the Apple bubble and suddenly I had to find everything and suddenly I had to find everything again. I had to find a new mouse. I had again. I had to find a new mouse. I had to find a new keyboard. I had to find to find a new keyboard. I had to find everything. And I thought like, all everything. And I thought like, all right, let me give mechanical keyboards right, let me give mechanical keyboards a try. And I gave quite a few of them a a try. And I gave quite a few of them a try. The Keyron is one of the big brands try. The Keyron is one of the big brands in that. I didn't like that at all. I in that. I didn't like that at all. I tried a bunch of other keyboards and tried a bunch of other keyboards and then I finally found this keyboard and I then I finally found this keyboard and I just went like angels are singing. Where just went like angels are singing. Where have you been my whole life? We spent as have you been my whole life? We spent as programmers so much of our time programmers so much of our time interacting with those keys. It really interacting with those keys. It really kind of matters in a way I didn't fully kind of matters in a way I didn't fully appreciate. I used to defend the Apple appreciate. I used to defend the Apple Magic Keyboard. Like it's it's great. Magic Keyboard. Like it's it's great. It's actually a great keyboard. And I It's actually a great keyboard. And I think for what it is, this ultra low think for what it is, this ultra low profile, ultra low travel is actually a profile, ultra low travel is actually a really nice keyboard. But once you've really nice keyboard. But once you've tried a longer travel mechanical tried a longer travel mechanical keyboard, there's no going back. keyboard, there's no going back. &gt;&gt; Uh you do have to remember in in many &gt;&gt; Uh you do have to remember in in many ways both on the software side and the ways both on the software side and the hardware side that you do spend a lot of hardware side that you do spend a lot of hours. hours. hours. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Behind the computer. It's worth &gt;&gt; Behind the computer. It's worth &gt;&gt; it's worth investing in. &gt;&gt; it's worth investing in. &gt;&gt; And also worth exploring until you find &gt;&gt; And also worth exploring until you find the thing where the angel starts singing the thing where the angel starts singing or whatever. or whatever. or whatever. &gt;&gt; That's exactly right. And I I'm I &gt;&gt; That's exactly right. And I I'm I actually do regret that a little bit. actually do regret that a little bit. Especially with this damn keyboard. I I Especially with this damn keyboard. I I could have been listening to these could have been listening to these beautiful thoughty keys for years and beautiful thoughty keys for years and years, but uh sometimes you have to get years, but uh sometimes you have to get really pissed off before you open your really pissed off before you open your eyes and see that something else exists. eyes and see that something else exists. I feel the same way about Linux. So, I feel the same way about Linux. So, I've been using Linux on the server I've been using Linux on the server since since since late '9s probably. We ran servers on late '9s probably. We ran servers on Linux back then. I never seriously Linux back then. I never seriously considered it as a desktop option. I considered it as a desktop option. I never ran Linux before directly myself. never ran Linux before directly myself. I always thought, you know what, I just I always thought, you know what, I just I want to focus on programming. I don't I want to focus on programming. I don't have time for all these configuration have time for all these configuration files and all this setup bullshit and files and all this setup bullshit and and whatnot. And Apple is close enough. and whatnot. And Apple is close enough. It's built on Unix underpinnings. Why do It's built on Unix underpinnings. Why do why do I need to bother with Linux? And why do I need to bother with Linux? And again, it was one of those things I again, it was one of those things I needed to try new things and try needed to try new things and try something else to something else to realize that there is other things other realize that there is other things other than Apple. And again, it's not because than Apple. And again, it's not because I hate Apple. I think they still make I hate Apple. I think they still make good computers. I think a lot of the good computers. I think a lot of the software is still also pretty okay, but software is still also pretty okay, but I have come to realize that as a web I have come to realize that as a web developer, Linux is just better. developer, Linux is just better. &gt;&gt; Yeah, &gt;&gt; Yeah, &gt;&gt; Yeah, &gt;&gt; Linux is just better. It's closer to &gt;&gt; Linux is just better. It's closer to what I deploy on. The tooling is what I deploy on. The tooling is actually phenomenal. And if you spend a actually phenomenal. And if you spend a bit of time setting it up, you can bit of time setting it up, you can record a reproducible environment that record a reproducible environment that I've now done with this cube concept or I've now done with this cube concept or project that I've done that I can set up project that I've done that I can set up a new Linux machine in less than 30 a new Linux machine in less than 30 minutes and it's perfect. It's not minutes and it's perfect. It's not pretty good. It's not like I still need pretty good. It's not like I still need to spend two hours on. It's perfect to spend two hours on. It's perfect because you can encode all aspects of because you can encode all aspects of the development environment into this. the development environment into this. And I didn't know I I didn't even know And I didn't know I I didn't even know to be fair that Linux could look as good to be fair that Linux could look as good as it can. If you look at a stock Ubuntu as it can. If you look at a stock Ubuntu or Fedora or Boot I mean not that it's or Fedora or Boot I mean not that it's ugly, but I'd pick the Mac in day of the ugly, but I'd pick the Mac in day of the week. You look at a you look at I mean week. You look at a you look at I mean I'm biased here of course because I I'm biased here of course because I built it with my own sensibilities but I built it with my own sensibilities but I look at that and go like this is better. look at that and go like this is better. This is beautiful. And then you look at This is beautiful. And then you look at some of those true Linux rising setups some of those true Linux rising setups where people go nuts with everything and where people go nuts with everything and you go, "Oh yeah, I remember when you go, "Oh yeah, I remember when computers used to be fun in this way, computers used to be fun in this way, when there was this individuality and when there was this individuality and this setup and it wasn't just all bland this setup and it wasn't just all bland the sameness." the sameness." the sameness." And I think that's a flip side sometimes And I think that's a flip side sometimes of something like Apple where they have of something like Apple where they have really strong opinions and they have really strong opinions and they have really good opinions. They have very really good opinions. They have very good taste and it looks very nice and it good taste and it looks very nice and it also looks totally the same. And Linux also looks totally the same. And Linux has far more variety and far more has far more variety and far more texture and flavor. Sometimes also texture and flavor. Sometimes also annoyances and bugs and whatever. But I annoyances and bugs and whatever. But I run Linux now. It's Auntu based with the run Linux now. It's Auntu based with the Yamakoup stuff on top. The low free Yamakoup stuff on top. The low free keyboard. I use a uh Logitech uh what's keyboard. I use a uh Logitech uh what's it called? The MS3 mouse which I love it called? The MS3 mouse which I love how it feels in my hand. I don't love how it feels in my hand. I don't love how it looks. I actually was a magic how it looks. I actually was a magic mouse stand for the longest time. I mouse stand for the longest time. I thought it was genius that Apple thought it was genius that Apple integrated the trackpad into a mouse and integrated the trackpad into a mouse and I I used that and I always thought it I I used that and I always thought it was ridiculous that people would slag it was ridiculous that people would slag it just because you had to charge it by just because you had to charge it by flipping it over cuz the battery would flipping it over cuz the battery would last for 3 months and then you charge it last for 3 months and then you charge it for half an hour. I thought like that's for half an hour. I thought like that's a perfect compatibility with my a perfect compatibility with my sensibilities. I don't mind giving up a sensibilities. I don't mind giving up a little inconvenience if something is little inconvenience if something is beautiful and that magic mouse is beautiful and that magic mouse is beautiful but it wasn't going to work on beautiful but it wasn't going to work on Linux. So I found something else. the Linux. So I found something else. the the MS3 is is is nice, but I sometimes the MS3 is is is nice, but I sometimes do wish like uh the magic mouse is do wish like uh the magic mouse is pretty good. pretty good. pretty good. &gt;&gt; Yeah, Linux is really great for &gt;&gt; Yeah, Linux is really great for customizing everything for for tiling, customizing everything for for tiling, for macros, for all of that. I also do for macros, for all of that. I also do the same in Windows with auto hotkey or the same in Windows with auto hotkey or just customize the whole thing to your just customize the whole thing to your to your preferences. to your preferences. &gt;&gt; If you're a developer, you should learn &gt;&gt; If you're a developer, you should learn how to control your environment with the how to control your environment with the keyboard. keyboard. keyboard. It's just it's faster. It's more fluid. It's just it's faster. It's more fluid. I think one of those silly things I've I think one of those silly things I've come to truly appreciate about my alma come to truly appreciate about my alma setup is that I can in whatever time it setup is that I can in whatever time it takes to refresh the screen, probably 5 takes to refresh the screen, probably 5 milliseconds, switch from one virtual milliseconds, switch from one virtual desktop to another. desktop to another. &gt;&gt; Even on Windows, can't get it that &gt;&gt; Even on Windows, can't get it that smooth. smooth. smooth. &gt;&gt; You can get close, can't get it that &gt;&gt; You can get close, can't get it that smooth. on Mac OS. For whatever reason, smooth. on Mac OS. For whatever reason, Apple insists on having this infuriating Apple insists on having this infuriating animation when you switch between animation when you switch between virtual desktops, which makes it you virtual desktops, which makes it you don't want to. You don't want to run don't want to. You don't want to run full screen apps because it's too full screen apps because it's too cumbersome to switch between the virtual cumbersome to switch between the virtual desktops. The kind of immediacy that you desktops. The kind of immediacy that you can get from a wonderful Linux setup in can get from a wonderful Linux setup in that regard is just next level. that regard is just next level. &gt;&gt; Yeah. And it seems like a subtle thing &gt;&gt; Yeah. And it seems like a subtle thing but you know difference in milliseconds but you know difference in milliseconds and latency between switching the and latency between switching the virtual desktops for example. I don't virtual desktops for example. I don't know it changes know it changes &gt;&gt; it changes how you use the computer. It &gt;&gt; it changes how you use the computer. It really does. really does. really does. &gt;&gt; Similar thing with VR right there. If &gt;&gt; Similar thing with VR right there. If there's some kind of latency or there's some kind of latency or &gt;&gt; like it just completely takes you out of &gt;&gt; like it just completely takes you out of it. it. it. &gt;&gt; And it's funny I actually had to watch I &gt;&gt; And it's funny I actually had to watch I think it was the Primagen on YouTube think it was the Primagen on YouTube when he was showing off his setup and I when he was showing off his setup and I was seeing how quickly he was switching was seeing how quickly he was switching between those virtual desktops. And I'd between those virtual desktops. And I'd always been using virtual desktops, but always been using virtual desktops, but I didn't like switching too much because I didn't like switching too much because just of that latency. And it's like, oh, just of that latency. And it's like, oh, you can do that on Linux. Oh, that's you can do that on Linux. Oh, that's pretty cool. pretty cool. pretty cool. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; So, I run that. And then my editor of &gt;&gt; So, I run that. And then my editor of choice now is Neoim. choice now is Neoim. &gt;&gt; Oh, good. All right. Well, we're out of &gt;&gt; Oh, good. All right. Well, we're out of time. No. All right. You did for many, time. No. All right. You did for many, many years. You used what is it? Text many years. You used what is it? Text me. me. me. &gt;&gt; Yes. Textmate. That was actually that &gt;&gt; Yes. Textmate. That was actually that was the main blocker of moving away from was the main blocker of moving away from Apple. Apple. Apple. &gt;&gt; Everything else I thought, do you know &gt;&gt; Everything else I thought, do you know what? I can swing it. But Textmate was what? I can swing it. But Textmate was and is a wonderful editor, one I helped and is a wonderful editor, one I helped birth into this world. The programmer birth into this world. The programmer Alan Uggo is a good friend of mine all Alan Uggo is a good friend of mine all the way back from those the party days the way back from those the party days when we were lugging our computers when we were lugging our computers around and he was a big uh Mac guy and around and he was a big uh Mac guy and in in in &gt;&gt; in 2005 he was writing this editor um &gt;&gt; in 2005 he was writing this editor um and I helped him with the project and I helped him with the project management of kind of keeping him on management of kind of keeping him on track, keeping him focused on getting track, keeping him focused on getting something released because I really something released because I really wanted it for myself and I thought this wanted it for myself and I thought this was the last editor. I thought I was was the last editor. I thought I was never going to switch. Forgive me for never going to switch. Forgive me for not knowing, but how featureful is this not knowing, but how featureful is this editor? Is this It's quite featureful, editor? Is this It's quite featureful, but it's it's it's um but it's it's it's um a guey driven editor in some regards. It a guey driven editor in some regards. It was really early on with u ways of was really early on with u ways of recording macros and having sort of recording macros and having sort of sophisticated syntax highlighting and it sophisticated syntax highlighting and it did a bunch of first and it was just a did a bunch of first and it was just a really pleasant editing experience. I really pleasant editing experience. I think these days a lot of people would think these days a lot of people would just use VS Code. VS codes exist in the just use VS Code. VS codes exist in the same universe as Textmate in some ways same universe as Textmate in some ways and actually I think is compatible with and actually I think is compatible with the original Textmate bundles, the the original Textmate bundles, the original Textmate format. So it really original Textmate format. So it really trailed a path there, but it also just trailed a path there, but it also just didn't evolve. didn't evolve. didn't evolve. &gt;&gt; Now a lot of people saw a huge problem &gt;&gt; Now a lot of people saw a huge problem with that. They were like, "Oh, it needs with that. They were like, "Oh, it needs to have more features. It needs to have to have more features. It needs to have all these things." I was like, "I'm all these things." I was like, "I'm happy with this text editor that hasn't happy with this text editor that hasn't changed at all." basically when Allan changed at all." basically when Allan stopped working on it for a decade or stopped working on it for a decade or more. I don't need anything else because more. I don't need anything else because as our original discussion went, I don't as our original discussion went, I don't want an IDE. I don't want the editor to want an IDE. I don't want the editor to write code for me. I want a text editor. write code for me. I want a text editor. I want to interact with characters I want to interact with characters directly. directly. directly. And Neoim And Neoim And Neoim allows me to do that in some ways that allows me to do that in some ways that are even better than Text. And I love are even better than Text. And I love Textmate. But BI, as you know, once you Textmate. But BI, as you know, once you learn the commands, and it sounds I learn the commands, and it sounds I sometimes feel like BI fans overplay how sometimes feel like BI fans overplay how difficult it is to learn because it difficult it is to learn because it makes them perhaps seem kind of more makes them perhaps seem kind of more awesome that they were able to do it. awesome that they were able to do it. It's not that difficult and it doesn't It's not that difficult and it doesn't take that long in my opinion to learn take that long in my opinion to learn just enough combo moves to get that high just enough combo moves to get that high of holy shit, I could not do this in any of holy shit, I could not do this in any other edit. other edit. other edit. &gt;&gt; How long did it take you? And by the &gt;&gt; How long did it take you? And by the way, I don't know. I'm still I haven't way, I don't know. I'm still I haven't yet. Well, I know intellectually, but yet. Well, I know intellectually, but just like with kids, I haven't just like with kids, I haven't &gt;&gt; You haven't &gt;&gt; You haven't &gt;&gt; I haven't uh gone in all the way in. I &gt;&gt; I haven't uh gone in all the way in. I haven't used them. haven't used them. &gt;&gt; You You have a treat in in &gt;&gt; You You have a treat in in mind? Well, I switched in about I had mind? Well, I switched in about I had three day when I switched here about a three day when I switched here about a year ago. I had three days of cursing year ago. I had three days of cursing where I thought it was absolutely where I thought it was absolutely terrible and it was never going to terrible and it was never going to happen. And I had three days of happen. And I had three days of annoyance and already the next week I annoyance and already the next week I was like, "This is sweet. I'm not going was like, "This is sweet. I'm not going anywhere." anywhere." anywhere." &gt;&gt; Oh, wow. But I also had a bit of a head &gt;&gt; Oh, wow. But I also had a bit of a head start about 20 years ago in the early start about 20 years ago in the early 2000s. I tried Vim for like a summer 2000s. I tried Vim for like a summer and it didn't stick. I didn't for and it didn't stick. I didn't for whatever reason love it at the time. But whatever reason love it at the time. But Neovim is really good. The key to Neoim Neovim is really good. The key to Neoim is to realize that you don't have to is to realize that you don't have to build the whole damn editor yourself. So build the whole damn editor yourself. So a lot of Neovim stands are like here's a lot of Neovim stands are like here's how to write the confict from scratch how to write the confict from scratch over 17 episodes. It's going to take you over 17 episodes. It's going to take you three weeks. I I don't care that much. I three weeks. I I don't care that much. I love a great editor. I love to tailor it love a great editor. I love to tailor it a little bit, but not that much. So, you a little bit, but not that much. So, you have to pair Neoim with this thing have to pair Neoim with this thing called Lazy Vim. called Lazy Vim. &gt;&gt; LazyVim.org &gt;&gt; LazyVim.org &gt;&gt; LazyVim.org is a distribution for Neoim that takes is a distribution for Neoim that takes all the drudgery out of getting an all the drudgery out of getting an amazing editor experience right out of amazing editor experience right out of the box. the box. the box. Ridiculous question. We talked about a Ridiculous question. We talked about a bunch of programming languages. Uh, you bunch of programming languages. Uh, you told us how much you love JavaScript. told us how much you love JavaScript. It's your second favorite programming It's your second favorite programming language. Um, language. Um, language. Um, would Typescript be the third? Then would Typescript be the third? Then &gt;&gt; Typescript wouldn't even be in this &gt;&gt; Typescript wouldn't even be in this universe. universe. universe. &gt;&gt; I hate TypeScript as much as I like &gt;&gt; I hate TypeScript as much as I like JavaScript. JavaScript. JavaScript. &gt;&gt; So, what you hate? Oh, man. I'm not &gt;&gt; So, what you hate? Oh, man. I'm not smart enough to understand the math of smart enough to understand the math of that. Okay. Before I ask about other that. Okay. Before I ask about other programming languages, what's if you can programming languages, what's if you can encapsulate your hatred of TypeScript encapsulate your hatred of TypeScript into something that could be human into something that could be human interpretable, what would be the interpretable, what would be the reasoning? that JavaScript smells a lot reasoning? that JavaScript smells a lot like Ruby when it comes to some aspects like Ruby when it comes to some aspects of its metaroming and TypeScript just of its metaroming and TypeScript just complicates that to an infuriating complicates that to an infuriating degree when you're trying to write that degree when you're trying to write that kind of code and even when you're trying kind of code and even when you're trying to write the normal kind of code none of to write the normal kind of code none of the benefits that acrew to people who the benefits that acrew to people who like it like autocomp completion is like it like autocomp completion is something I care about I don't care something I care about I don't care about autocomp completion because I'm about autocomp completion because I'm not using an IDE now I understand that not using an IDE now I understand that that is part of what separates it and that is part of what separates it and why why why I don't see the benefits. I only see the I don't see the benefits. I only see the costs. I see the extra typing. I see the costs. I see the extra typing. I see the type gymnastics that you sometimes have type gymnastics that you sometimes have to do and where a bunch of people give to do and where a bunch of people give up and just do any instead, right? Like up and just do any instead, right? Like that they don't actually use the type that they don't actually use the type system because it's just too frustrating system because it's just too frustrating to use. So I've ever only felt the to use. So I've ever only felt the frustration of Typescript and the frustration of Typescript and the obfuscation of Typescript in the code obfuscation of Typescript in the code that gave me no payoff. Again, I that gave me no payoff. Again, I understand that there is a payoff. I understand that there is a payoff. I don't want the payoff. So for my don't want the payoff. So for my situation, I'm not willing to make the situation, I'm not willing to make the trade and I'm not willing to take a trade and I'm not willing to take a language that underneath is as dynamic language that underneath is as dynamic of a language as Rubious and then turn of a language as Rubious and then turn it into this pretend statically type it into this pretend statically type language. I find that just language. I find that just intellectually insulting. intellectually insulting. intellectually insulting. &gt;&gt; Do you think it will and do you think it &gt;&gt; Do you think it will and do you think it should die Typescript? should die Typescript? &gt;&gt; I don't want to take something away from &gt;&gt; I don't want to take something away from people who enjoy it. So if you like people who enjoy it. So if you like Typescript, all the most part of you, if Typescript, all the most part of you, if you're using TypeScript because you you're using TypeScript because you think that's what a professional think that's what a professional programmer is supposed to do, here's my programmer is supposed to do, here's my permission. You don't have to use permission. You don't have to use TypeScript. There's something deeply TypeScript. There's something deeply enjoy enjoyable about a brilliant enjoy enjoyable about a brilliant programmer such as yourself, a DHA programmer such as yourself, a DHA talking shit. It's just it's like one of talking shit. It's just it's like one of my favorite things in life. Uh what are my favorite things in life. Uh what are the top three programming languages the top three programming languages everyone should learn? If you're talking everyone should learn? If you're talking to a beginner, to a beginner, &gt;&gt; I would 100% start with Ruby. It is &gt;&gt; I would 100% start with Ruby. It is magic for beginners in terms of just magic for beginners in terms of just understanding the core concepts of understanding the core concepts of conditionals and loops and whatever conditionals and loops and whatever because it makes it so easy. Even if because it makes it so easy. Even if you're just making a shell program you're just making a shell program that's outputting to the terminal, that's outputting to the terminal, getting hello world running in Ruby is getting hello world running in Ruby is basically puts ps space start quote basically puts ps space start quote hello world end quote. You're done, hello world end quote. You're done, right? There's no fluff. There's nothing right? There's no fluff. There's nothing to rabbit into. There are other to rabbit into. There are other languages that does that especially in languages that does that especially in the pearl or python would be rather the pearl or python would be rather similar but go would not java would not. similar but go would not java would not. There's a lot of other languages that There's a lot of other languages that have a lot more ceremony and have a lot more ceremony and boilerplate. Ruby has none of it. So boilerplate. Ruby has none of it. So it's a wonderful starting language. it's a wonderful starting language. There's a book called learn to program There's a book called learn to program by pine that uses Ruby essentially to by pine that uses Ruby essentially to just teach basic programming principles just teach basic programming principles that I've seen heavily recommended. So that I've seen heavily recommended. So that's a great language. that's a great language. &gt;&gt; How quickly would you go to Rails? It &gt;&gt; How quickly would you go to Rails? It depends on what you want to do. If you depends on what you want to do. If you want to build web applications, go to want to build web applications, go to Rails right away. Learn Ruby along with Rails right away. Learn Ruby along with Rails because I think what really helps Rails because I think what really helps power through learning programming is to power through learning programming is to build programs that you want. Right? If build programs that you want. Right? If you're just learning it in the abstract, you're just learning it in the abstract, it's difficult to motivate yourself to it's difficult to motivate yourself to actually do it well. Some people learn actually do it well. Some people learn languages just for the fun of them. Most languages just for the fun of them. Most people do not. Most people learn it people do not. Most people learn it because they have a mission. They want because they have a mission. They want to build a program. They want to become to build a program. They want to become a programmer. So, you got to use it for a programmer. So, you got to use it for something real. And I actually find that something real. And I actually find that it's easier to learn programming that it's easier to learn programming that way too because it drives your learning way too because it drives your learning process. You can't just learn the whole process. You can't just learn the whole thing up front. You can't just sit down thing up front. You can't just sit down and read the language specification then and read the language specification then go like oo like neo now I know kung fu go like oo like neo now I know kung fu now I know Ruby. It doesn't download now I know Ruby. It doesn't download that way. You actually have to type it that way. You actually have to type it out in anger on a real program. out in anger on a real program. &gt;&gt; Yeah. Yeah. For sure. &gt;&gt; Yeah. Yeah. For sure. &gt;&gt; So I would start there. But then number &gt;&gt; So I would start there. But then number two, I probably would be JavaScript two, I probably would be JavaScript because JavaScript just is the language because JavaScript just is the language you need to know if you want to work you need to know if you want to work with the web. And the web is the with the web. And the web is the greatest application platform of all greatest application platform of all time. If you're making business time. If you're making business software, collaboration software, all software, collaboration software, all this kind of stuff. If you're making this kind of stuff. If you're making video games, you should probably go off video games, you should probably go off learn C++ or C or something else like learn C++ or C or something else like that. But if you're in the realm of web that. But if you're in the realm of web applications, you got to learn applications, you got to learn JavaScript. Regardless of what else you JavaScript. Regardless of what else you learn, you got to learn JavaScript. So learn, you got to learn JavaScript. So if you're learning Ruby, what does Ruby if you're learning Ruby, what does Ruby not have in terms of programming not have in terms of programming concepts concepts concepts that you would need other languages for? that you would need other languages for? &gt;&gt; I don't know if there's any concepts &gt;&gt; I don't know if there's any concepts missing, but it doesn't have the speed missing, but it doesn't have the speed or the low-level access of memory or the low-level access of memory manipulation that you would need to manipulation that you would need to build a 3D gaming engine, for example. build a 3D gaming engine, for example. No one's going to build that in Ruby. No one's going to build that in Ruby. You can build quite low-level stuff when You can build quite low-level stuff when it comes to web technologies in Ruby, it comes to web technologies in Ruby, but at some point you're going to hit but at some point you're going to hit the limit and you should use something the limit and you should use something else. I'm not someone who prescribed else. I'm not someone who prescribed just Ruby for everything. Just once you just Ruby for everything. Just once you reach the level of abstraction that's reach the level of abstraction that's involved with web applications, Ruby is involved with web applications, Ruby is superb. But if you're writing, for superb. But if you're writing, for example, a um HTTP proxy, Go is great example, a um HTTP proxy, Go is great for that. We've written quite a few HTTP for that. We've written quite a few HTTP proxies lately at the company for proxies lately at the company for various reasons, including our cloud various reasons, including our cloud exit and so forth. And Kevin, one of the exit and so forth. And Kevin, one of the programs I'm working with, he writes all programs I'm working with, he writes all of that in Go. Go. Just have the of that in Go. Go. Just have the primitives and it has the pace and the primitives and it has the pace and the speed to do that really well. I highly speed to do that really well. I highly recommend it. If you're writing an HTTP recommend it. If you're writing an HTTP general proxy, do it in Go. Great general proxy, do it in Go. Great language for that. Don't write your language for that. Don't write your business logic in Go. I know people do, business logic in Go. I know people do, but I don't see the point in that. but I don't see the point in that. &gt;&gt; So, what would you say the three? So go &gt;&gt; So, what would you say the three? So go Ruby plus Rails JavaScript. Ruby plus Rails JavaScript. &gt;&gt; Yeah, if you're willing or interested in &gt;&gt; Yeah, if you're willing or interested in working with the web, I'd probably pick working with the web, I'd probably pick those three. Go, Ruby and JavaScript. those three. Go, Ruby and JavaScript. &gt;&gt; Go Ruby and JavaScript. Okay. Functional &gt;&gt; Go Ruby and JavaScript. Okay. Functional languages. languages. languages. &gt;&gt; Someone's talking about Okamel. &gt;&gt; Someone's talking about Okamel. &gt;&gt; There's always they are always going to &gt;&gt; There's always they are always going to show up. They're always I it must be show up. They're always I it must be some kind of some kind of um OAML industrial complex or something um OAML industrial complex or something like this. But they always say mention O like this. But they always say mention O camel. I love that there are people who camel. I love that there are people who love functional languages to that love functional languages to that degree. Those people are not me. I don't degree. Those people are not me. I don't care at all. Like I care about care at all. Like I care about functional principles when they help me functional principles when they help me in these isolated cases where that's in these isolated cases where that's just better than everything else. But at just better than everything else. But at heart, I'm an object-oriented heart, I'm an object-oriented guy. That's just how I think about guy. That's just how I think about programs. That's how I like to think programs. That's how I like to think about programs. That's how I carve up a about programs. That's how I carve up a big problem space into a domain big problem space into a domain language. language. language. Objects are my gem. Objects are my gem. &gt;&gt; Yeah. Yeah, me too. So I I programmed a &gt;&gt; Yeah. Yeah, me too. So I I programmed a list a bunch for like AI applications list a bunch for like AI applications for uh basic so chess engines that kind for uh basic so chess engines that kind of stuff and I did try just to force of stuff and I did try just to force myself to program just a very basic game myself to program just a very basic game of life simulation and it's it's not of life simulation and it's it's not it's it's much you know lisp is just it's it's much you know lisp is just parenthesis everywhere. It's actually parenthesis everywhere. It's actually not readable at all. not readable at all. &gt;&gt; That's my bad with uh okamel is very &gt;&gt; That's my bad with uh okamel is very very intuitive very readable. this very intuitive very readable. this &gt;&gt; I really should pick up a language like &gt;&gt; I really should pick up a language like that at some point. I've been that at some point. I've been programming long enough that it's a programming long enough that it's a little embarrassing that I haven't little embarrassing that I haven't actually done anything real in anger in actually done anything real in anger in a fully functional programming language. a fully functional programming language. &gt;&gt; Yeah, but like I I have to figure out &gt;&gt; Yeah, but like I I have to figure out I'm sure there's an answer to this. What I'm sure there's an answer to this. What can I do that would be useful for me can I do that would be useful for me &gt;&gt; like that I actually want to build? &gt;&gt; like that I actually want to build? &gt;&gt; That's my problem. &gt;&gt; That's my problem. &gt;&gt; That a functional language is better &gt;&gt; That a functional language is better suited for. suited for. suited for. &gt;&gt; That's right. &gt;&gt; That's right. &gt;&gt; Because I really want to experience the &gt;&gt; Because I really want to experience the language properly. language properly. language properly. &gt;&gt; That's right. &gt;&gt; That's right. &gt;&gt; Yeah. Cuz I'm still Yeah. I'm very ob at &gt;&gt; Yeah. Cuz I'm still Yeah. I'm very ob at this point I'm very object-oriented. this point I'm very object-oriented. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; And that's my problem too. I just I &gt;&gt; And that's my problem too. I just I don't care as much about these low-level don't care as much about these low-level problems in computer science. I care problems in computer science. I care about the high level. I care about about the high level. I care about writing software. I care about the writing software. I care about the abstraction layer that really floats abstraction layer that really floats well with web applications and business well with web applications and business logic. And I just I've come to accept logic. And I just I've come to accept that about myself. Even though as we that about myself. Even though as we talked about when I was a kid, I really talked about when I was a kid, I really wanted to become a games programmer. And wanted to become a games programmer. And then I saw what it took to write a then I saw what it took to write a collision detection engine and I go collision detection engine and I go like, "Yeah, that's not me at all. I'm like, "Yeah, that's not me at all. I'm never going to be into vector matrix never going to be into vector matrix manipulation or any of that stuff. It's manipulation or any of that stuff. It's way too much math. And I'm more of a way too much math. And I'm more of a writing person than I am of a math writing person than I am of a math person." I mean, just in the way you person." I mean, just in the way you were speaking today, you have like a were speaking today, you have like a poetic literary approach to programming. poetic literary approach to programming. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; That's actually exactly right. So I did &gt;&gt; That's actually exactly right. So I did actually a keynote at Railscom 10 years actually a keynote at Railscom 10 years ago where I called myself a software ago where I called myself a software writer. I mean I'm not the first person writer. I mean I'm not the first person to say that software writer has been in to say that software writer has been in the vernacular for a long time. But the the vernacular for a long time. But the modern modern modern identity that most programmers adopt identity that most programmers adopt when they're trying to be serious is when they're trying to be serious is software engineer. And I reject that software engineer. And I reject that label. I'm not an engineer. Occasionally label. I'm not an engineer. Occasionally I dabble in some engineering but the I dabble in some engineering but the vast majority of time I'm a software vast majority of time I'm a software writer. I write software for human writer. I write software for human consumption and for my own delight. consumption and for my own delight. &gt;&gt; I can get away with that because I'm &gt;&gt; I can get away with that because I'm working in a high level language like working in a high level language like Ruby, working on collaboration software Ruby, working on collaboration software and to-do lists and all the other stuff. and to-do lists and all the other stuff. Again, if I was trying to apply my Again, if I was trying to apply my talent to writing 3D game engines, talent to writing 3D game engines, no, that's not the right mindset. That's no, that's not the right mindset. That's not the right identity. But I find that not the right identity. But I find that the software engineering identity the software engineering identity flattens thing a little bit. I'd like to flattens thing a little bit. I'd like to think that we have software writers and think that we have software writers and software mathematicians for example and software mathematicians for example and then those are actually richer ways of then those are actually richer ways of describing the abstraction level that describing the abstraction level that you're working at than engineer. you're working at than engineer. &gt;&gt; Yeah. And I think if AI becomes more and &gt;&gt; Yeah. And I think if AI becomes more and more successful, more successful, more successful, I think we'll need software writer skill I think we'll need software writer skill more and more because it feels like more and more because it feels like that's the realm of which cuz it's not that's the realm of which cuz it's not writer. writer. writer. &gt;&gt; You're going to have to do the software. &gt;&gt; You're going to have to do the software. You're going to have to be a computer You're going to have to be a computer person. But there had there's a more I person. But there had there's a more I don't know uh I don't want to don't know uh I don't want to romanticize it, but it's more poetic. romanticize it, but it's more poetic. It's more literary. It's more feels like It's more literary. It's more feels like writing a a good blog post than um writing a a good blog post than um &gt;&gt; I actually wish that AI had a bit higher &gt;&gt; I actually wish that AI had a bit higher standards for writing. I find the fact standards for writing. I find the fact that it accepts my slobby incomplete that it accepts my slobby incomplete sentences a little offensive. I wish sentences a little offensive. I wish there was like a strict mode for AI there was like a strict mode for AI where it would snap my fingers if I was where it would snap my fingers if I was just feeding it keywords and like speak just feeding it keywords and like speak proper, do pronunciation, do proper, do pronunciation, do punctuation. punctuation. punctuation. Uh because I love that. I love crafting Uh because I love that. I love crafting a just right sentence that hasn't been a just right sentence that hasn't been boiled down that it has no meat on it. boiled down that it has no meat on it. It has no character in it. It's It has no character in it. It's succinct. It's not overly flowery. It's succinct. It's not overly flowery. It's just right. That writing phase to me is just right. That writing phase to me is just addictive. And I find that when just addictive. And I find that when programming is the best, it's almost programming is the best, it's almost equivalent exactly to that. You also equivalent exactly to that. You also have to solve a problem. You're not just have to solve a problem. You're not just communicating a solution. and you have communicating a solution. and you have to actually figure out what are you to actually figure out what are you trying to say but even writing has that trying to say but even writing has that half the time when I start writing a half the time when I start writing a blog post I don't know exactly which blog post I don't know exactly which arguments I'm going to use they develop arguments I'm going to use they develop as part of the writing process and as part of the writing process and that's how writing software happens too that's how writing software happens too you know roughly the kind of problem you know roughly the kind of problem you're trying to solve you know ex don't you're trying to solve you know ex don't know exactly how you're going to solve know exactly how you're going to solve it and as you start typing the solution it and as you start typing the solution emerges and actually as far as I emerges and actually as far as I understand you and Jason working on a understand you and Jason working on a new book it's in the early days of that new book it's in the early days of that kind of topic. I I think he said it's kind of topic. I I think he said it's some he tweeted that it's going to be some he tweeted that it's going to be titled something like we don't know what titled something like we don't know what we're doing upfront or something like we're doing upfront or something like that. That kind of topic and you figure that. That kind of topic and you figure out along the way. out along the way. &gt;&gt; That's a big part of it. trying to give &gt;&gt; That's a big part of it. trying to give more people the permission to trust your more people the permission to trust your own instincts and their own gut and own instincts and their own gut and realizing that developing realizing that developing that supercomputer in your stomach is that supercomputer in your stomach is actually the work of a career and that actually the work of a career and that you should not discard those feelings in you should not discard those feelings in preference to over preference to over comp or not even complicated to comp or not even complicated to analytics to intellectualism. Very often analytics to intellectualism. Very often when we look at the big decisions we've when we look at the big decisions we've had to make, they've come from the gut had to make, they've come from the gut where you cannot fully articulate like where you cannot fully articulate like why do I think this is the right thing? why do I think this is the right thing? Well, because I've been in this business Well, because I've been in this business for 20 years and I've seen a bunch of for 20 years and I've seen a bunch of things. I've talked to a bunch of people things. I've talked to a bunch of people and that is percolating into this being and that is percolating into this being the right answer. the right answer. A lot of people are very skeptical about A lot of people are very skeptical about that in business or unable to trust it that in business or unable to trust it because it feels like they can't because it feels like they can't rationalize. Why are we doing something? rationalize. Why are we doing something? Well, because I feel like it. Damn it. Well, because I feel like it. Damn it. That's a great privilege of being a That's a great privilege of being a bootstrapped independent founder who bootstrapped independent founder who don't owe their business to someone else don't owe their business to someone else and doesn't have to produce a return and doesn't have to produce a return because I feel like a lot of the because I feel like a lot of the bullshit really creeps in when you're bullshit really creeps in when you're trying to rationalize to other people trying to rationalize to other people why you do the things you do and why you why you do the things you do and why you take the decisions that you do. If you take the decisions that you do. If you don't have anyone to answer to, you're don't have anyone to answer to, you're free to follow your gut. And free to follow your gut. And that's that's that's hell of enjoyable way to work. And it's hell of enjoyable way to work. And it's also in very often uh the correct way to also in very often uh the correct way to work. Your gut knows a lot. Like you work. Your gut knows a lot. Like you can't articulate it, but it's spot-on can't articulate it, but it's spot-on more times than not. Yeah. Having to more times than not. Yeah. Having to make a plan can be a paralyzing thing. make a plan can be a paralyzing thing. I've often I mean I suppose there's I've often I mean I suppose there's different kinds of brains. And first of different kinds of brains. And first of all, I can't wait to read that book if all, I can't wait to read that book if it materializes. it materializes. it materializes. Uh they I often feel like in the more in Uh they I often feel like in the more interesting things I do in my the more interesting things I do in my life, I really don't know what I'm doing life, I really don't know what I'm doing up up front. And I think there's a lot up up front. And I think there's a lot of people around me that care for me of people around me that care for me that really want me to know what I'm that really want me to know what I'm doing. They're like, "What's the plan? doing. They're like, "What's the plan? What's the why are you doing this crazy What's the why are you doing this crazy thing?" And I if if I had to wait until thing?" And I if if I had to wait until I have a plan, I'm not going to do it. I have a plan, I'm not going to do it. People are they have different brains on People are they have different brains on this kind of stuff. Some people really this kind of stuff. Some people really are planners and it maybe energizes are planners and it maybe energizes them. But I think most creative them. But I think most creative pursuits, most really interesting, most pursuits, most really interesting, most novel pursuits are like you kind of have novel pursuits are like you kind of have to just take the leap and then just to just take the leap and then just figure out as you go. figure out as you go. &gt;&gt; My favorite essay in rework is the last &gt;&gt; My favorite essay in rework is the last one and it's entitled inspiration is one and it's entitled inspiration is perishable. And I think that captures a perishable. And I think that captures a lot of it that if you take the time to lot of it that if you take the time to do a detailed plan, you may very well do a detailed plan, you may very well have lost the inspiration by the time have lost the inspiration by the time you're done. If you follow the you're done. If you follow the inspiration in that moment and trust inspiration in that moment and trust your gut, trust your own competence that your gut, trust your own competence that you will figure it out, you're going to you will figure it out, you're going to get so much more back. You're going to get so much more back. You're going to go on the adventure you otherwise go on the adventure you otherwise wouldn't have. Whether that's just a wouldn't have. Whether that's just a business decisions or a life decision, business decisions or a life decision, you have to seize that inspiration. you have to seize that inspiration. There's a great set of children's books There's a great set of children's books written by this Japanese author about written by this Japanese author about chasing an idea and trying to get a hold chasing an idea and trying to get a hold of it. And it's beautifully illustrated of it. And it's beautifully illustrated as an idea, something that's floating as an idea, something that's floating around as something you have to catch around as something you have to catch and latch onto that I really feel and latch onto that I really feel captures this notion that inspiration is captures this notion that inspiration is perishable. It'll disappear. If you just perishable. It'll disappear. If you just put it back on the shelf and say like, put it back on the shelf and say like, well, I got to be diligent about this. I well, I got to be diligent about this. I got to line up a plan. you may run out got to line up a plan. you may run out and then there's no there's no steam to and then there's no there's no steam to keep going. keep going. keep going. I have to ask you about open source. I have to ask you about open source. What does it take uh to run a successful What does it take uh to run a successful open source project? You've uh spoken open source project? You've uh spoken about that it's a misconception that uh about that it's a misconception that uh open source is democratic. It's actually open source is democratic. It's actually meritocratic. meritocratic. meritocratic. I thought that's a beautiful way to put I thought that's a beautiful way to put it. So there's often is a kind of a it. So there's often is a kind of a benevolent dictator at top often. So, benevolent dictator at top often. So, can you just speak to that having run can you just speak to that having run successful open source projects yourself successful open source projects yourself and and being a benevolent dictator and and being a benevolent dictator yourself, yourself, yourself, which is going to be a bit of a biased which is going to be a bit of a biased uh piece of evidence here, but uh piece of evidence here, but &gt;&gt; I &gt;&gt; I &gt;&gt; I you should definitely have dictators and you should definitely have dictators and they should control everything, they should control everything, especially when the dictator is me now. especially when the dictator is me now. Well, I think I learned very early on Well, I think I learned very early on that a quick way to burn out in open that a quick way to burn out in open source is to treat it as a business, as source is to treat it as a business, as though your users are customers, as though your users are customers, as though they have claims of legitimacy on though they have claims of legitimacy on your time and your attention and your your time and your attention and your direction. direction. direction. &gt;&gt; Because I faced this almost immediately &gt;&gt; Because I faced this almost immediately with Ruby and Rails as soon as it was with Ruby and Rails as soon as it was released. There were a million peoples released. There were a million peoples who had all sorts of opinions about who had all sorts of opinions about where I ought to take it. and not just where I ought to take it. and not just opinions, but actually demands. Unless opinions, but actually demands. Unless you implement an Oracle database you implement an Oracle database adapter, this is always going to be a adapter, this is always going to be a toy. toy. toy. &gt;&gt; It was actually more or less that exact &gt;&gt; It was actually more or less that exact demand that prompted me to have a slide demand that prompted me to have a slide at one of the early Rails conferences at one of the early Rails conferences that just said, "Fuck you." that just said, "Fuck you." &gt;&gt; Yeah, I saw that. &gt;&gt; Yeah, I saw that. &gt;&gt; I'm not going to do what you tell me to. &gt;&gt; I'm not going to do what you tell me to. I'm here as a bringer of gift. I am I'm here as a bringer of gift. I am sharing code that I wrote on my own time sharing code that I wrote on my own time on my own valition and you don't have to on my own valition and you don't have to say thank you. I mean be nice if you say thank you. I mean be nice if you did. You can take the code and do did. You can take the code and do whatever you want with it. You can whatever you want with it. You can contribute back if you want but you contribute back if you want but you can't tell me what to do or where to go can't tell me what to do or where to go or how to act. I'm not a vendor. This is or how to act. I'm not a vendor. This is a fundamental misconception that users a fundamental misconception that users of open source occasionally step into of open source occasionally step into because they're used to buying software because they're used to buying software from companies who really care about from companies who really care about their business. I care about people their business. I care about people using my software. I think it's great, using my software. I think it's great, but we don't have a transactional but we don't have a transactional relationship. I don't get something back relationship. I don't get something back when you tell me what to do except grief when you tell me what to do except grief and I don't want it. So you can keep it. and I don't want it. So you can keep it. So my open-source philosophy from the So my open-source philosophy from the start has been I got to do this start has been I got to do this primarily for me. I love when other primarily for me. I love when other people find use in my open source. It's people find use in my open source. It's not my primary motivation. I'm not not my primary motivation. I'm not primarily doing it for other people. I'm primarily doing it for other people. I'm primarily doing it for me and my own primarily doing it for me and my own objectives because um as Adam Smith objectives because um as Adam Smith said, it's not for the benevolence of said, it's not for the benevolence of the butcher that we expect our daily the butcher that we expect our daily meat. It's for his self-interest. And I meat. It's for his self-interest. And I actually find that to be a beautiful actually find that to be a beautiful thought that our comments increase in thought that our comments increase in value when we all pursue our value when we all pursue our self-interest certainly in the realm of self-interest certainly in the realm of open source. This is also why I reject open source. This is also why I reject this notion that open source is in some this notion that open source is in some sort of crisis that there's a funding sort of crisis that there's a funding crisis that we have to spend more. No, crisis that we have to spend more. No, we don't. Open source has never been we don't. Open source has never been doing better. Open source has never doing better. Open source has never controlled more domains in software than controlled more domains in software than it has right now. There is no crisis. it has right now. There is no crisis. There's a misconception from some people There's a misconception from some people making open source and from a lot of making open source and from a lot of people using open source that open people using open source that open source is primarily like commercial source is primarily like commercial software something you buy and something software something you buy and something where you can then make demands as a where you can then make demands as a customer and that the customer is always customer and that the customer is always right. Customer is not always right. Not right. Customer is not always right. Not even in business but certainly not in even in business but certainly not in open source. In open source the customer open source. In open source the customer as it is is a receiver of gifts. We are as it is is a receiver of gifts. We are having a gift exchange. I show up and having a gift exchange. I show up and give you my code. If you like it, you give you my code. If you like it, you can use it. And if you have some code can use it. And if you have some code that fits in with where I'm going with that fits in with where I'm going with this, I would love to get those gifts this, I would love to get those gifts back. And we can keep trading like that. back. And we can keep trading like that. I give you more gifts, you give me some I give you more gifts, you give me some of your gifts. Together, we pull all the of your gifts. Together, we pull all the gifts such that someone showing up brand gifts such that someone showing up brand new just get a mountain of gifts. This new just get a mountain of gifts. This is the magic thing of open source is it is the magic thing of open source is it increases the total sum value of what's increases the total sum value of what's in the comments when we all pursue our in the comments when we all pursue our own self-interest. So, I'm building own self-interest. So, I'm building things for Rails that I need. And you things for Rails that I need. And you know what? You want me to do that. You know what? You want me to do that. You do not want me to build things that I do not want me to build things that I don't need on behalf of other people don't need on behalf of other people because I'll do a crap job. I do I build because I'll do a crap job. I do I build much better software when I can evaluate much better software when I can evaluate the quality of that software by my own the quality of that software by my own use. I have to I need this feature. I'm use. I have to I need this feature. I'm going to build a good version of that going to build a good version of that feature and I'm going to build just feature and I'm going to build just enough just for me. So, I'm not going to enough just for me. So, I'm not going to bloat it. I'm not trying to attract a bloat it. I'm not trying to attract a customer here. I'm not trying to see customer here. I'm not trying to see some angle. I'm just building what I some angle. I'm just building what I need. And if you go into open source need. And if you go into open source with that mentality that you're building with that mentality that you're building for you and everything else is a bonus, for you and everything else is a bonus, I think you have all the ingredients to I think you have all the ingredients to go the distance. I think the people who go the distance. I think the people who burn out in open source is when they go burn out in open source is when they go in thinking, I'm making all these gifts. in thinking, I'm making all these gifts. I don't really need them myself, but I'm I don't really need them myself, but I'm like hoping someone else does and maybe like hoping someone else does and maybe they'll also give me some money. That's they'll also give me some money. That's a losing proposition. It never basically a losing proposition. It never basically works. If you want money for your works. If you want money for your software, you should just sell it. We software, you should just sell it. We have a perfectly fine model of have a perfectly fine model of commercial software that people can make commercial software that people can make that kind and then they can sell it. But that kind and then they can sell it. But I find a lot of I find a lot of confusion, let's just call it that confusion, let's just call it that politely, in open source contributors politely, in open source contributors who want to have their cake and eat it who want to have their cake and eat it too. They like the mode of working with too. They like the mode of working with open source. They maybe even like the open source. They maybe even like the status that comes from open source, but status that comes from open source, but they also would like to earn a living they also would like to earn a living from making that open source. And from making that open source. And therefore they occasionally end up with therefore they occasionally end up with the kind of grievances that someone who the kind of grievances that someone who feels underappreciated at work will feels underappreciated at work will develop when others aren't doing enough develop when others aren't doing enough to recognize their great gifts and and to recognize their great gifts and and then they might walk away. I wish I had then they might walk away. I wish I had one of the I wish I had more insight one of the I wish I had more insight into their mind state of the individual into their mind state of the individual people that are running these projects people that are running these projects like if they're feeling sad or they need like if they're feeling sad or they need more money or they're burn like it's more money or they're burn like it's just such a dark box. It can be. just such a dark box. It can be. &gt;&gt; I mean, of course, there's some &gt;&gt; I mean, of course, there's some communication, but I just I just sadly communication, but I just I just sadly see too often they just kind of walk see too often they just kind of walk away, away, away, &gt;&gt; right? And I think that's actually also &gt;&gt; right? And I think that's actually also part of the beauty of open source. You part of the beauty of open source. You are not obligated to do this code are not obligated to do this code forever. You're obligated to do this for forever. You're obligated to do this for as long as you want to do it. as long as you want to do it. &gt;&gt; That's basically your own obligation. &gt;&gt; That's basically your own obligation. &gt;&gt; But there is a I know. Okay, you might &gt;&gt; But there is a I know. Okay, you might criticize this and push back. You did criticize this and push back. You did write a blog post on forever until the write a blog post on forever until the end of the internet with Tadalist. end of the internet with Tadalist. There is a beautiful aspect and you There is a beautiful aspect and you found a good balance there. found a good balance there. But I don't know, you're bringing so But I don't know, you're bringing so much joy to people with this thing you much joy to people with this thing you created. It's not an obligation, but created. It's not an obligation, but there's a real beauty to taking care of there's a real beauty to taking care of this thing you've created and not this thing you've created and not forgetting. I think we what I think what forgetting. I think we what I think what the open-source creator is not seeing the open-source creator is not seeing enough I mean there's like &gt;&gt; how how many lives you're making better. &gt;&gt; how how many lives you're making better. There's certain pieces of software that There's certain pieces of software that I just quietly use a lot. I just quietly use a lot. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; Yes. &gt;&gt; And like they bring my life joy and I &gt;&gt; And like they bring my life joy and I wish I could communicate that. Well, wish I could communicate that. Well, there's ways to donate, but it's there's ways to donate, but it's inefficient. It's usually hard to inefficient. It's usually hard to donate. It is there's some ways for some donate. It is there's some ways for some people that made it easier. GitHub people that made it easier. GitHub donations is one way of doing it. I donations is one way of doing it. I donate to a few people even though I donate to a few people even though I don't love the paradigm. I also accept don't love the paradigm. I also accept that we can have multiple paradigms. that we can have multiple paradigms. except that I can do open source for one except that I can do open source for one set of motivations and other people can set of motivations and other people can do open source for other motivations. We do open source for other motivations. We don't all have to do it the same way. don't all have to do it the same way. But I do want to counter the But I do want to counter the misconception that open source is misconception that open source is somehow in a crisis unless we all start somehow in a crisis unless we all start paying for open source. That model paying for open source. That model already exists. It's commercial already exists. It's commercial software. It works very well and plenty software. It works very well and plenty of great companies have been built off of great companies have been built off the back of it and the expectations are the back of it and the expectations are very clear. I pay you this amount and I very clear. I pay you this amount and I get this software. Open source once you get this software. Open source once you start mixing money into it gets real start mixing money into it gets real muddy real fast. And a lot of it is just muddy real fast. And a lot of it is just from those misaligned expectations that from those misaligned expectations that if you feel like you're starving artists if you feel like you're starving artists as an open source developer and you are as an open source developer and you are owed x amount of money because your owed x amount of money because your software is popular, you're delusional software is popular, you're delusional and you need to knock that off. Just get and you need to knock that off. Just get back on track where you realize that back on track where you realize that you're putting gifts into the world. And you're putting gifts into the world. And if you get something back in terms of if you get something back in terms of monetary compensation, okay, that's a monetary compensation, okay, that's a bonus. But if you need that money back bonus. But if you need that money back in terms of monetary compensation, you in terms of monetary compensation, you should just charge for software or go should just charge for software or go work for a software company that will work for a software company that will employ you to do open source. There's employ you to do open source. There's tons of that. That is probably actually tons of that. That is probably actually the primary mode that open source the primary mode that open source software is being developed in the world software is being developed in the world today. Commercial companies today. Commercial companies making open source that they need making open source that they need themselves and then contributing it themselves and then contributing it back. back. back. &gt;&gt; So I'm glad you brought sort of like &gt;&gt; So I'm glad you brought sort of like drew some hard lines here. is a good drew some hard lines here. is a good moment to bring up uh what I think is moment to bring up uh what I think is the maybe one of the greatest the maybe one of the greatest open-source projects ever, WordPress, open-source projects ever, WordPress, and uh you spoke up in October and uh you spoke up in October 24 24 24 uh about some of the stuff that's been uh about some of the stuff that's been going on with WordPress's founder, Matt going on with WordPress's founder, Matt Mullig, in a blog post, Open Source Mullig, in a blog post, Open Source Royalty and Mad Kings. It's a really Royalty and Mad Kings. It's a really good blog post on sort of just the idea good blog post on sort of just the idea of benevolent dictators for life, this of benevolent dictators for life, this model for open source projects. And then model for open source projects. And then the basic implication was that the basic implication was that Matt as the BDFL of WordPress has lost Matt as the BDFL of WordPress has lost his way a bit with his battle with WP his way a bit with his battle with WP Engine. Engine. Engine. Uh so I should also say that I really Uh so I should also say that I really love WordPress. It brings me joy. I love WordPress. It brings me joy. I think it's a really it's a beacon of think it's a really it's a beacon of what open source could be. as he has what open source could be. as he has made the internet better. It allowed a made the internet better. It allowed a lot of people to create wonderful lot of people to create wonderful websites. websites. websites. And I also think, now you might disagree And I also think, now you might disagree with this, but from everything I've with this, but from everything I've seen, seen, seen, WP Engine just gives me bad vibes. WP Engine just gives me bad vibes. I I think they're not a good the good I I think they're not a good the good guy in this. I don't like it. I guy in this. I don't like it. I understand the frustration. I understand understand the frustration. I understand all of it, but I don't think that all of it, but I don't think that excuses the behavior. There is a bit of excuses the behavior. There is a bit of see this kind of counter to a little bit see this kind of counter to a little bit what you said which is when you have a what you said which is when you have a open source project of that size there open source project of that size there is a bit of a like when you're the king is a bit of a like when you're the king that for of a project that for of a project of a kingdom that large there's a bit of of a kingdom that large there's a bit of responsibility anyway could you speak to responsibility anyway could you speak to your uh maybe to your empathy of Matt your uh maybe to your empathy of Matt and uh to your criticism and uh to your criticism and but and maybe uh paint a path of how and but and maybe uh paint a path of how he and WordPress can be winning again. he and WordPress can be winning again. First, I echo what you said about what a First, I echo what you said about what a wonderful thing it is that WordPress wonderful thing it is that WordPress exists. There are not many projects in exists. There are not many projects in the open source world or in the world at the open source world or in the world at large that has had as big of an impact large that has had as big of an impact on the internet as WordPress has. He on the internet as WordPress has. He deserves a ton of accolades for that deserves a ton of accolades for that work. So that was my engagement work. So that was my engagement essentially my premise. Do you know what essentially my premise. Do you know what I had tremendous respect for what Matt I had tremendous respect for what Matt has built with WordPress, what that has built with WordPress, what that entire ecosystem has built around entire ecosystem has built around itself. It's a true marvel, but there's itself. It's a true marvel, but there's some principles that are larger than my some principles that are larger than my personal sympathies to the characters personal sympathies to the characters involved. I agree. The Silver Lake involved. I agree. The Silver Lake private equity company that's involved private equity company that's involved with WP Engine is not my natural ally. with WP Engine is not my natural ally. I'm not the natural ally of private I'm not the natural ally of private equity doing some game with VP Engine. equity doing some game with VP Engine. That's not my interest in the case. My That's not my interest in the case. My interest is essentially a set of interest is essentially a set of principles. And the principles are if principles. And the principles are if you release something as open source, you release something as open source, people are free to use it as they see people are free to use it as they see fit and they are free to donate code or fit and they are free to donate code or resources or money back to the community resources or money back to the community as they see fit. You may disagree about as they see fit. You may disagree about whether they've done enough, whether whether they've done enough, whether they should do more, but you can't show they should do more, but you can't show up after you've given the gift of free up after you've given the gift of free software to the world and then say, "Now software to the world and then say, "Now that you've used that gift, you actually that you've used that gift, you actually owe me a huge slide of your business owe me a huge slide of your business because you got too successful using the because you got too successful using the thing I gave you for free." You don't thing I gave you for free." You don't get to take a gift back. That's why we get to take a gift back. That's why we have open source licenses. They have open source licenses. They stipulate exactly what the obligations stipulate exactly what the obligations are on both sides of the equation. The are on both sides of the equation. The users of open source don't get to demand users of open source don't get to demand what the makers of open source do and what the makers of open source do and how they act. And the makers of open how they act. And the makers of open source don't get to suddenly show up source don't get to suddenly show up with a ransom note to the users and say with a ransom note to the users and say actually you owe me for all sorts of actually you owe me for all sorts of use. I'm 100% allergic to that kind of use. I'm 100% allergic to that kind of interaction. And I think Matt, interaction. And I think Matt, unfortunately, for whatever reason, unfortunately, for whatever reason, got so wrapped up in what he was owed got so wrapped up in what he was owed that he failed to realize what he was that he failed to realize what he was destroying. WordPress and automatic destroying. WordPress and automatic already makes a ton of money. This is already makes a ton of money. This is part of the wonder of WordPress. This is part of the wonder of WordPress. This is a project that generates hundreds of a project that generates hundreds of millions of dollars and Matt didn't feel millions of dollars and Matt didn't feel like he was getting enough of that. like he was getting enough of that. That's not a good argument, bro. You That's not a good argument, bro. You can't just violate the spirit and the can't just violate the spirit and the letter of these open source licences and letter of these open source licences and just start showing up with demand just start showing up with demand letters even to characters that are not letters even to characters that are not particularly sympathetic. This goes to particularly sympathetic. This goes to the root of my interpretation of open the root of my interpretation of open source in general. The GPL source in general. The GPL is a particular license that actually is a particular license that actually demands code from people who use it demands code from people who use it under certain circumstances. I've never under certain circumstances. I've never liked the GPL. I don't want your shitty liked the GPL. I don't want your shitty code if you don't want to give it to me. code if you don't want to give it to me. What am I going to do with that? Some What am I going to do with that? Some code dump that you've I I'm not on board code dump that you've I I'm not on board with that part of Stallman's vision at with that part of Stallman's vision at all. I love the MIT license. To me, that all. I love the MIT license. To me, that is the perfect license cuz it is is the perfect license cuz it is mercifully short. I think it's two mercifully short. I think it's two paragraphs, three paragraphs, really paragraphs, three paragraphs, really short. And it basically says, "Here's short. And it basically says, "Here's some software. It comes with no some software. It comes with no warranty. You can't sue me. You can't warranty. You can't sue me. You can't demand anything. But you can do whatever demand anything. But you can do whatever the hell you want with it. Have a nice the hell you want with it. Have a nice life. That's a perfect open source life. That's a perfect open source interaction in my opinion. And that interaction in my opinion. And that license needs to be upheld. These license needs to be upheld. These licenses in general, even the GPL, even licenses in general, even the GPL, even if I don't like it, we have to abide by if I don't like it, we have to abide by them because if we just set aside those them because if we just set aside those licenses when we in a moment's notice licenses when we in a moment's notice feel like something's slightly unfair, feel like something's slightly unfair, we've lost everything. We've lost the we've lost everything. We've lost the entire framework that allowed open entire framework that allowed open source to prosper and allowed open source to prosper and allowed open source to become such an integral part source to become such an integral part of commerce too. I mean back when open of commerce too. I mean back when open source was initially finding its feet, source was initially finding its feet, it was at war with commercial software. it was at war with commercial software. Stallman is at war with commercial Stallman is at war with commercial software and always has been. Bill Gates software and always has been. Bill Gates was in return at war with open source was in return at war with open source for the longest time. for the longest time. The open source licences and the clarity The open source licences and the clarity that they provide allowed us to end that that they provide allowed us to end that war. Today, commercial software and open war. Today, commercial software and open source software can peacefully coexist. source software can peacefully coexist. I make commercial software, I sell base I make commercial software, I sell base camp, I sell Hey, and then I also make a camp, I sell Hey, and then I also make a bunch of open source software that I bunch of open source software that I give away for free as gifts. give away for free as gifts. That can't happen if we start violating That can't happen if we start violating these contracts. No commercial company these contracts. No commercial company is going to go, "Let me base my next is going to go, "Let me base my next project off this piece of open source." project off this piece of open source." If I'm also running the liability that If I'm also running the liability that some mad maker is going to show up seven some mad maker is going to show up seven years in and demand I give them $50 years in and demand I give them $50 million. That's not an environment million. That's not an environment conducive to commerce collaboration or conducive to commerce collaboration or anything else. And it's just basically anything else. And it's just basically wrong. I think there's one analysis wrong. I think there's one analysis that's all about kind of the practical that's all about kind of the practical outcomes of this which I think are bad. outcomes of this which I think are bad. There's also some an argument that's There's also some an argument that's simply about ethics. This is not right. simply about ethics. This is not right. You can't just show up afterwards and You can't just show up afterwards and demand something. This is not too demand something. This is not too dissimilar in my opinion to the whole dissimilar in my opinion to the whole Apple thing we talked about earlier. Apple thing we talked about earlier. Apple just showing up and feeling like Apple just showing up and feeling like they're entitled to 30% of everyone's they're entitled to 30% of everyone's business. No, that's that's not right. business. No, that's that's not right. That's not fair. So, I think Matt That's not fair. So, I think Matt unfortunately unfortunately unfortunately kind of stared himself blind on the kind of stared himself blind on the indignity he thought was being indignity he thought was being perpetrated against him because there perpetrated against him because there was all this money being made by VP was all this money being made by VP Engine making a good product and not Engine making a good product and not giving quite enough back in Matt's giving quite enough back in Matt's opinion. opinion. opinion. Tough tough cookie. I I think they're Tough tough cookie. I I think they're maybe I'm reading too much into it, but maybe I'm reading too much into it, but there might be some personal stuff too, there might be some personal stuff too, which they weren't not only not giving which they weren't not only not giving enough, but probably implicitly enough, but probably implicitly promising that they will give promising that they will give and then taking advantage of him in that and then taking advantage of him in that way in his mind. Just like interpersonal way in his mind. Just like interpersonal interaction and then and then you get interaction and then and then you get like interpersonally frustrated. You like interpersonally frustrated. You forget like the bigger picture ethics of forget like the bigger picture ethics of it. It's like when a guy keeps saying, it. It's like when a guy keeps saying, you know, promising he'll do something. you know, promising he'll do something. &gt;&gt; Sure. And then you and then you realize &gt;&gt; Sure. And then you and then you realize you wake up one day like a year or two you wake up one day like a year or two later. Wait a minute. I was being lied later. Wait a minute. I was being lied to this whole time. And then that I to this whole time. And then that I don't even know if it's about money. don't even know if it's about money. &gt;&gt; I I'd get mad, too. It's totally fine to &gt;&gt; I I'd get mad, too. It's totally fine to get mad when people disappoint you. get mad when people disappoint you. That's not justification for upending That's not justification for upending decades of open- source licences and the decades of open- source licences and the essential de facto case law we've essential de facto case law we've established around it. This is why I established around it. This is why I chose to even weigh in on this cuz I chose to even weigh in on this cuz I like WordPress. I don't use WordPress. like WordPress. I don't use WordPress. I'm not a part of that community. I I'm not a part of that community. I don't actually have a dog in this fight. don't actually have a dog in this fight. I'm biased if anything towards Matt just I'm biased if anything towards Matt just as a fellow BDFL. as a fellow BDFL. &gt;&gt; I would like to see him do well with &gt;&gt; I would like to see him do well with this, but I also think there's some this, but I also think there's some principles at stake here that ring much principles at stake here that ring much louder. I don't want Rails to suddenly louder. I don't want Rails to suddenly be tainted by the fact that it's open be tainted by the fact that it's open source and whether companies can rely on source and whether companies can rely on it and build businesses on it because it and build businesses on it because wait, maybe one day I'm going to turn wait, maybe one day I'm going to turn Matt and I'm going to turn Matt King and Matt and I'm going to turn Matt King and I'm going to show up with a demand I'm going to show up with a demand ransom letter. No, screw that. We we ransom letter. No, screw that. We we have way more to protect here. There's have way more to protect here. There's way more at stake than your personal way more at stake than your personal beef with someone or your perceived beef with someone or your perceived grievance over what you're owed. grievance over what you're owed. &gt;&gt; What would you recommend? What do you &gt;&gt; What would you recommend? What do you think you should do, can do to walk it think you should do, can do to walk it back to to to heal? Decide. This is the curious thing. He Decide. This is the curious thing. He could decide to give this up. That's could decide to give this up. That's very, very difficult for driven, very, very difficult for driven, ambitious people to do, to accept that ambitious people to do, to accept that they're wrong and to give up and lay they're wrong and to give up and lay down their sword. So, I had a hope down their sword. So, I had a hope earlier on in this that that was earlier on in this that that was possible. I haven't seen any evidence possible. I haven't seen any evidence that Matt is interested in that. And I that Matt is interested in that. And I find that deeply regretful, but that's find that deeply regretful, but that's her his prerogative. I continue to speak her his prerogative. I continue to speak out when he's violating the spirit and out when he's violating the spirit and ethics of open source. But I wish he ethics of open source. But I wish he would just accept that this was a really would just accept that this was a really bad idea. He just he made a bad bet and bad idea. He just he made a bad bet and I thought I think he thought he'd just I thought I think he thought he'd just get away with it, that they just pay up get away with it, that they just pay up and that he could put pressure. I mean, and that he could put pressure. I mean, I know that temptation when you sit as I know that temptation when you sit as the head of a very important project. the head of a very important project. You know that that comes with a great You know that that comes with a great degree of power and you really need a degree of power and you really need a great degree of discipline to rein that great degree of discipline to rein that in and not exercise that power at every in and not exercise that power at every step where you feel agrieved. I've felt step where you feel agrieved. I've felt agrieved a million times over in the 20 agrieved a million times over in the 20 plus years of Ruby and Rails. I've plus years of Ruby and Rails. I've really tried very hard not to let those really tried very hard not to let those sometimes petty, sometimes substantial sometimes petty, sometimes substantial grieviances over time grieviances over time seep in to the foundation of the seep in to the foundation of the ecosystem and risk ruining everything ecosystem and risk ruining everything &gt;&gt; as the king of the rails kingdom. Has &gt;&gt; as the king of the rails kingdom. Has the power gotten to your head over the the power gotten to your head over the years? years? years? &gt;&gt; I'm sure it has. I mean, who wouldn't? &gt;&gt; I'm sure it has. I mean, who wouldn't? &gt;&gt; Do you pace around in your chamber? &gt;&gt; Do you pace around in your chamber? I do occasionally I do occasionally and I I do marvel at both what's been and I I do marvel at both what's been built, what's been possible. Over a built, what's been possible. Over a million applications have been made with million applications have been made with Ruby and Rails by one estimate that I've Ruby and Rails by one estimate that I've seen. Businesses like Shopify and GitHub seen. Businesses like Shopify and GitHub and a million others have been built on and a million others have been built on top of something that I started. That's top of something that I started. That's very gratifying, very gratifying, very gratifying, but you really have to be careful not to but you really have to be careful not to smell your own exhaust too much. And you smell your own exhaust too much. And you have to be just as careful not to listen have to be just as careful not to listen too much to the haters too much to the haters &gt;&gt; and not to listen too much to the super &gt;&gt; and not to listen too much to the super fans either that you assess the value fans either that you assess the value and the sort of principles of what and the sort of principles of what you're working towards on its own merits you're working towards on its own merits on your own scoreboard. I try to on your own scoreboard. I try to block that out and then just go well I'm block that out and then just go well I'm working on Rails because I love to write working on Rails because I love to write Ruby. I love to use Ruby to make web Ruby. I love to use Ruby to make web applications. That's my north star. And applications. That's my north star. And I'll continue to do that. And I'll I'll continue to do that. And I'll continue to share all of the open source continue to share all of the open source gifts that I uncover along the ways. gifts that I uncover along the ways. And and that's it. That's enough, too. I And and that's it. That's enough, too. I don't have to get all of it out of it. don't have to get all of it out of it. This is sometimes just as with the guy This is sometimes just as with the guy who thought I'd given up on being Jira who thought I'd given up on being Jira or something instead of doing base cam. or something instead of doing base cam. There are people over the years who've There are people over the years who've asked like, "Why didn't you charge for asked like, "Why didn't you charge for Rails?" Like, "Don't you know how much Rails?" Like, "Don't you know how much money I've been made off Rails? If we money I've been made off Rails? If we just look at something like Shopify, just look at something like Shopify, it's worth billions of dollars. I'm not it's worth billions of dollars. I'm not a billionaire." And so freaking what? I a billionaire." And so freaking what? I got more than enough. I got plenty of my got more than enough. I got plenty of my share. I will say though, I'm also share. I will say though, I'm also introspective enough to realize that if introspective enough to realize that if it hadn't panned out as well as it did it hadn't panned out as well as it did for me on my own business, maybe I would for me on my own business, maybe I would have been more tempted. Maybe if you see have been more tempted. Maybe if you see other people build huge successful other people build huge successful companies off the back of your work and companies off the back of your work and you really don't have a pot to piss in, you really don't have a pot to piss in, you might be tempted to get a little you might be tempted to get a little upset about that. I've seen that in the upset about that. I've seen that in the Rails world as well where there are Rails world as well where there are people who contributed substantial people who contributed substantial bodies of work and then got really bodies of work and then got really miffed when they didn't feel like they miffed when they didn't feel like they got enough back. I was fortunate enough got enough back. I was fortunate enough that the business that Jason and I built that the business that Jason and I built with Ruby and Rails was as successful as with Ruby and Rails was as successful as it was and I I made the money I needed it was and I I made the money I needed to make that I didn't need to chase the to make that I didn't need to chase the rest of it. But we should also just make rest of it. But we should also just make explicit that many people in your explicit that many people in your position position position chase chase chase uh chase the money. It's not that uh chase the money. It's not that difficult to chase. Basically, you difficult to chase. Basically, you turned away money. You made a lot of turned away money. You made a lot of decisions that just turn away money. decisions that just turn away money. Maybe I also think of Maybe I also think of this example with Matt. He probably this example with Matt. He probably thought there was easy money for the thought there was easy money for the taking. And it wasn't so easy, was it? taking. And it wasn't so easy, was it? It looked like lowhanging dollar bills It looked like lowhanging dollar bills and they turned out to be some really and they turned out to be some really sour grapes. It turned out he turned he sour grapes. It turned out he turned he probably destroyed vast sums of money by probably destroyed vast sums of money by undermining the whole WordPress trust undermining the whole WordPress trust and the ecosystem and putting question and the ecosystem and putting question marks in the heads of folks who would marks in the heads of folks who would choose to use WordPress or something choose to use WordPress or something else going forward. So, I often think else going forward. So, I often think when people think like, "Oh, you left when people think like, "Oh, you left money on the table." First of all, so money on the table." First of all, so what? I don't have to have all the what? I don't have to have all the money, but second of all, maybe the money, but second of all, maybe the money wasn't on the table at all. money wasn't on the table at all. &gt;&gt; And maybe the cost, even if you got the &gt;&gt; And maybe the cost, even if you got the money, maybe the cost in other ways, money, maybe the cost in other ways, like we've talked about, like we've talked about, &gt;&gt; yes, &gt;&gt; yes, &gt;&gt; yes, &gt;&gt; would outweigh all the money that you &gt;&gt; would outweigh all the money that you could have possibly gotten. Meaning like could have possibly gotten. Meaning like &gt;&gt; I think you said that the thing that &gt;&gt; I think you said that the thing that makes you happy makes you happy &gt;&gt; is flow and tranquility. Those two &gt;&gt; is flow and tranquility. Those two things beautifully really beautifully things beautifully really beautifully put put put &gt;&gt; and it you know m gaining money might &gt;&gt; and it you know m gaining money might assign to your responsibility of running assign to your responsibility of running a larger thing that takes away a larger thing that takes away the flow that you gain from being from the flow that you gain from being from from fundamentally for you what flow from fundamentally for you what flow means is programming and then means is programming and then tranquility is like I think you also tranquility is like I think you also have a beautiful post of like nirvana is have a beautiful post of like nirvana is an empty schedule an empty schedule &gt;&gt; when I look at a upcoming week and I see &gt;&gt; when I look at a upcoming week and I see that I have no scheduled meetings at that I have no scheduled meetings at all, which is quite common. Or maybe I all, which is quite common. Or maybe I just have one thing for one hour on one just have one thing for one hour on one day. I think to myself, do you know day. I think to myself, do you know what? This could very easily have been what? This could very easily have been very different. We could have been very different. We could have been running a company of hundreds of people running a company of hundreds of people or thousands of people and my entire or thousands of people and my entire calendar would have been packed solid calendar would have been packed solid with little Tetris blocks of other with little Tetris blocks of other people's demands on my attention and people's demands on my attention and time and I would have been miserable as time and I would have been miserable as fuck. fuck. fuck. &gt;&gt; Yep. And I look at that and go like &gt;&gt; Yep. And I look at that and go like that. What more can I ask for? Which is that. What more can I ask for? Which is a really nice state of being. I'd a really nice state of being. I'd actually say I didn't have this always. actually say I didn't have this always. I did have early on in my career some I did have early on in my career some sense of like I need a little more a sense of like I need a little more security. And I remember little more security. And I remember this really interesting study where a this really interesting study where a bunch of researchers asked people who bunch of researchers asked people who had made certain amounts of money, how had made certain amounts of money, how much money would it take for you to feel much money would it take for you to feel secure? They'd ask people who had a secure? They'd ask people who had a million dollars net worth. How much million dollars net worth. How much money do you need? Probably need two money do you need? Probably need two million. 2 million. Then it'd be good. million. 2 million. Then it'd be good. Then they ask people with a net worth of Then they ask people with a net worth of five million. How much do you need? Ah, five million. How much do you need? Ah, 10. I need 10. Ask people with 10 10. I need 10. Ask people with 10 million. What do you need? 20. Every million. What do you need? 20. Every single time people would need double of single time people would need double of what they did. I did that for a couple what they did. I did that for a couple of doublings until I realized, you know of doublings until I realized, you know what? This is silly. I am already where what? This is silly. I am already where I wished I would be and a million times I wished I would be and a million times over. So, what less is there to pursue? over. So, what less is there to pursue? Now, that doesn't mean that if more Now, that doesn't mean that if more money is coming my way, I'm going to say money is coming my way, I'm going to say no to it. Of course not. But it does no to it. Of course not. But it does mean that I'm free to set other things mean that I'm free to set other things higher. And I also do think you realize, higher. And I also do think you realize, as Jim Carrey would say, I wish everyone as Jim Carrey would say, I wish everyone would get all the money that they wished would get all the money that they wished for and they'd realize it wasn't the for and they'd realize it wasn't the answer. That money solves a whole host answer. That money solves a whole host of problems and anxieties and then it of problems and anxieties and then it creates a bunch of new ones. And then it creates a bunch of new ones. And then it also doesn't touch a huge swath of the also doesn't touch a huge swath of the human experience at all. The world is human experience at all. The world is full of miserable, anxious, hurt rich full of miserable, anxious, hurt rich people. people. people. It's also full of miserable, anxious, It's also full of miserable, anxious, poor people. And I'd rather be a poor people. And I'd rather be a miserable, anxious, rich person than a miserable, anxious, rich person than a poor person. But it isn't this magic poor person. But it isn't this magic wand that make everything go away. And wand that make everything go away. And that's again one of those that's again one of those insights just like having children that insights just like having children that you cannot communicate in words. I've you cannot communicate in words. I've never been able to persuade a person never been able to persuade a person who's not wealthy that wealth wasn't who's not wealthy that wealth wasn't going to solve all their problems. going to solve all their problems. &gt;&gt; One quote you've returned to often that &gt;&gt; One quote you've returned to often that I enjoy a lot is the Coco Chanel quote I enjoy a lot is the Coco Chanel quote of the best things in in life are free of the best things in in life are free and uh the second best things are very and uh the second best things are very very expensive. And I guess the task is very expensive. And I guess the task is to uh focus on to uh focus on uh surrounding yourself with the best uh surrounding yourself with the best things in life like family and all of things in life like family and all of this and not caring about the other this and not caring about the other stuff. stuff. stuff. &gt;&gt; I would even say you can care about the &gt;&gt; I would even say you can care about the other stuff. Just know the order of other stuff. Just know the order of priority. priority. priority. &gt;&gt; Yeah. If you are blessed with &gt;&gt; Yeah. If you are blessed with a partner that you love, some children a partner that you love, some children that you adore, you've already won the that you adore, you've already won the greatest prize that most humans are able greatest prize that most humans are able to achieve. Most humans in this world, to achieve. Most humans in this world, if they are of marital age and they have if they are of marital age and they have children, if you ask them what's the children, if you ask them what's the most important thing, they would all say most important thing, they would all say that. They would all say that. no matter that. They would all say that. no matter whether they're rich or poor. It's easy whether they're rich or poor. It's easy to lose sight of that when you're to lose sight of that when you're chasing the second best things because chasing the second best things because do you know what? They're also very do you know what? They're also very nice. nice. nice. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; Mhm. &gt;&gt; I I really like that Pagani Sonda. It &gt;&gt; I I really like that Pagani Sonda. It was a very expensive car and I would had was a very expensive car and I would had no chance of acquiring it if I hadn't no chance of acquiring it if I hadn't become rather become rather become rather successful in business. So, I don't want successful in business. So, I don't want to dismiss it either. It's great fun to to dismiss it either. It's great fun to have money. It's just have money. It's just not as fun for quite as long or as deep not as fun for quite as long or as deep as you think it is. And these other as you think it is. And these other things, having an occupation and a things, having an occupation and a pursuit that you enjoy, being able to pursuit that you enjoy, being able to carry burdens carry burdens carry burdens with a stiff up lip and with again a with a stiff up lip and with again a sense of meaning is incredible. to have sense of meaning is incredible. to have family, to have friends, to have family, to have friends, to have hobbies, to have all these things that hobbies, to have all these things that are actually available are actually available to most people around the world. That's to most people around the world. That's winning. And it doesn't mean you have to winning. And it doesn't mean you have to discount your ambitions. It doesn't mean discount your ambitions. It doesn't mean you can't reach for more. But it does you can't reach for more. But it does mean it's pretty dumb if you don't mean it's pretty dumb if you don't realize that realize that realize that it's not going to complete you in some it's not going to complete you in some hocus pocus woo sense to make more. It hocus pocus woo sense to make more. It it really isn't. What gives you hope it really isn't. What gives you hope about the future of this whole thing we about the future of this whole thing we have going on here, human civilization? have going on here, human civilization? I find it easier to be optimistic I find it easier to be optimistic optimistic than pessimistic because I optimistic than pessimistic because I don't know either way. So if I get to don't know either way. So if I get to choose, why not just choose to believe choose, why not just choose to believe it's going to pan out? it's going to pan out? &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Yeah. &gt;&gt; Like we suffer more in our imagination &gt;&gt; Like we suffer more in our imagination than we do in reality. That's one of the than we do in reality. That's one of the quotes out of stoicism. And I also think quotes out of stoicism. And I also think we have a tendency, a lot of humans have we have a tendency, a lot of humans have a tendency to be pessimistic in advance a tendency to be pessimistic in advance for things they don't know how it's for things they don't know how it's going to pan out. Climate change, for going to pan out. Climate change, for example, is making a lot of people very example, is making a lot of people very anxious and very pessimistic about the anxious and very pessimistic about the future. You know, nothing. 40 years ago, future. You know, nothing. 40 years ago, we thought the problem was that the we thought the problem was that the planet was going to be too cool. I planet was going to be too cool. I happen to believe that it's probably happen to believe that it's probably correct that the planet is getting too correct that the planet is getting too hot and that CO2 has something to do hot and that CO2 has something to do with it. Whether we have the right with it. Whether we have the right measures to fix it in time, if that's measures to fix it in time, if that's even possible or not, is completely up even possible or not, is completely up in the air. And we don't know. If you in the air. And we don't know. If you convince yourself with such certainty convince yourself with such certainty that the world is going to turn to shit, that the world is going to turn to shit, it is right up here in your head today. it is right up here in your head today. Climate change might wipe out this Climate change might wipe out this entire species in 200 years. It's not entire species in 200 years. It's not next year. It's not 10 years from now. next year. It's not 10 years from now. you life might become more unpleasant you life might become more unpleasant and there might be more negative effects and there might be more negative effects and so on. Yes. Okay. But then deal with and so on. Yes. Okay. But then deal with that hardship when it arrives. Don't that hardship when it arrives. Don't take that in advance. How are you take that in advance. How are you helping earth by just walking around helping earth by just walking around being depressed? being depressed? being depressed? I think our whole conversation today is I think our whole conversation today is also an indication there. It's just two also an indication there. It's just two humans talking. There's billions of us humans talking. There's billions of us and there is something about us that and there is something about us that wants to solve problems and build cool wants to solve problems and build cool stuff. Yes. And so we're going to build stuff. Yes. And so we're going to build our way out of whatever shit we get our way out of whatever shit we get ourselves into. This is what humans do. ourselves into. This is what humans do. We create problems for ourselves and and We create problems for ourselves and and come up figure out how to build rocket come up figure out how to build rocket ships to uh to get out of those ships to uh to get out of those problems. And sometimes the rocket ships problems. And sometimes the rocket ships create other problems like nuclear create other problems like nuclear warheads. And then we'll I'm sure warheads. And then we'll I'm sure I hope figure out ways how to avoid I hope figure out ways how to avoid those problems. And then there'll be those problems. And then there'll be nanobots. And then the aliens will come nanobots. And then the aliens will come and it'll be a massive war between the and it'll be a massive war between the nanobots and the aliens and and that nanobots and the aliens and and that will bring also all of us humans will bring also all of us humans together. together. together. The funny thing just to pick on one of The funny thing just to pick on one of the points you mentioned the atom bomb the points you mentioned the atom bomb for example when that was first invented for example when that was first invented a lot of people thought we have a lot of people thought we have essentially ended life on earth right essentially ended life on earth right or maybe we prevented World War II from or maybe we prevented World War II from happening in the past 80 years because happening in the past 80 years because assured mutual annihilation kept the assured mutual annihilation kept the superpowers from attacking each other at superpowers from attacking each other at least head on and kept their fighting to least head on and kept their fighting to proxy wars. You know what? Proxy wars proxy wars. You know what? Proxy wars are not great, but they're probably are not great, but they're probably better than World War II with nuclear better than World War II with nuclear weapons. So, it's quite difficult in the weapons. So, it's quite difficult in the moment to tell what's actually benefit moment to tell what's actually benefit and what's not. And I think we should be and what's not. And I think we should be a bit more humble. I've certainly become a bit more humble. I've certainly become more humble over time of thinking I know more humble over time of thinking I know which way it's going to turn. I think which way it's going to turn. I think the pandemic was a huge moment for a lot the pandemic was a huge moment for a lot of people where there was so much of people where there was so much certainty about whether this certainty about whether this intervention worked or that intervention intervention worked or that intervention didn't work. And most people were wrong. didn't work. And most people were wrong. Certainly a lot of very smart people, Certainly a lot of very smart people, very qualified people got that just very qualified people got that just utterly and catastrophyingly utterly and catastrophyingly wrong. So just a little intellectual wrong. So just a little intellectual humility. I think back upon that and go humility. I think back upon that and go like you know what I'm not a PhD in like you know what I'm not a PhD in viology. viology. viology. Um and I don't claim that like I somehow Um and I don't claim that like I somehow saw how it all was going to play out. saw how it all was going to play out. But the people who were really experts But the people who were really experts and that they got a bunch of it wrong. and that they got a bunch of it wrong. Nobody knows anything. I keep reminding Nobody knows anything. I keep reminding myself of that every day. No one knows myself of that every day. No one knows anything. We can't predict the economy a anything. We can't predict the economy a month out. We can't predict world month out. We can't predict world affairs a month. The world is just too affairs a month. The world is just too complicated. complicated. complicated. &gt;&gt; Yeah. I when I watched the Netflix &gt;&gt; Yeah. I when I watched the Netflix documentary Chimp Empire documentary Chimp Empire and how, you know, there's a hierarchy and how, you know, there's a hierarchy of chimps, of chimps, of chimps, all of that looks eerily similar to us all of that looks eerily similar to us humans. We're recent descendants. So, humans. We're recent descendants. So, these experts, some of the chimps are these experts, some of the chimps are got a PhD, others don't. Uh, others are got a PhD, others don't. Uh, others are really muscular, others are like beta really muscular, others are like beta male kind. They're sucking up to the male kind. They're sucking up to the alpha. There's a lot of interesting alpha. There's a lot of interesting dynamics going on that really maps dynamics going on that really maps cleanly to the geopolitics of the day. cleanly to the geopolitics of the day. They don't have nuclear weapons, but the They don't have nuclear weapons, but the nature of their behavior is similar to nature of their behavior is similar to ours. So, I think I think we barely know ours. So, I think I think we barely know what's going on. But I do think there's what's going on. But I do think there's like a basic like a basic uh will to cooperate. uh will to cooperate. There's a basic compassion that There's a basic compassion that underlies are just the human spirit underlies are just the human spirit that's there. And maybe that is just me that's there. And maybe that is just me being optimistic, but if if that is being optimistic, but if if that is indeed there, I think we're going to be indeed there, I think we're going to be okay. okay. okay. &gt;&gt; The capacity is certainly there. &gt;&gt; The capacity is certainly there. &gt;&gt; Whether we choose that capacity or not, &gt;&gt; Whether we choose that capacity or not, who knows? And in what situation, I who knows? And in what situation, I think accepting that we all have the think accepting that we all have the capacity for both ways for both capacity for both ways for both incredible generosity and kindness and incredible generosity and kindness and also cruelty. I think uh Young with his also cruelty. I think uh Young with his whole theory of the shadow was really whole theory of the shadow was really spot on that we all have that capacity spot on that we all have that capacity in us and accepting that it's our job to in us and accepting that it's our job to attempt to cultivate the better parts of attempt to cultivate the better parts of our human nature our human nature is weighed against our propensity to is weighed against our propensity to sometime be the worst of ourselves. sometime be the worst of ourselves. I'm excited to find out what's going to I'm excited to find out what's going to happen. It's so awesome to be human. I happen. It's so awesome to be human. I don't want to die. I kind of want to be don't want to die. I kind of want to be alive for a while to see all the cool alive for a while to see all the cool shit we do. And uh one of the cool shit we do. And uh one of the cool things I want to see is all the software things I want to see is all the software you create and all the things you tweet, you create and all the things you tweet, all the trouble you get yourself into on all the trouble you get yourself into on Twitter. Um David, yeah, I'm a huge fan. Twitter. Um David, yeah, I'm a huge fan. Like I said, thank you for everything Like I said, thank you for everything you've done for the world, for the you've done for the world, for the millions of developers you've inspired millions of developers you've inspired and uh one of whom is me. And thank you and uh one of whom is me. And thank you for this awesome conversation, brother. for this awesome conversation, brother. &gt;&gt; Thanks so much for having me. &gt;&gt; Thanks so much for having me. Thanks for listening to this Thanks for listening to this conversation with DHH. To support this conversation with DHH. To support this podcast, please check out our sponsors podcast, please check out our sponsors in the description and consider in the description and consider subscribing to this channel. And now, subscribing to this channel. And now, let me leave you with some words from let me leave you with some words from Rework by DHH and Jason Frerieded. Rework by DHH and Jason Frerieded. What you do is what matters, not what What you do is what matters, not what you think or say or plan. you think or say or plan. Thank you for listening and hope to see Thank you for listening and hope to see you next time.